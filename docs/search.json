[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "만두만두",
    "section": "",
    "text": "안녕하세요, 데이터 분석 만두만두입니다."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "myblog",
    "section": "",
    "text": "hw6\n\n\n\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nRecent posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhw3\n\n\n\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nhw5\n\n\n\nbigdata\n\n\n\n\n\n\n\n정은서\n\n\nJul 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n\nbigdata\n\n\n\n\n\n\n\n정은서\n\n\nJul 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\ngraph\n\n\n\nbigdata\n\n\n\n\n\n\n\n정은서\n\n\nJul 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw3\n\n\n\nbigdata\n\n\n\n\n\n\n\n정은서\n\n\nJul 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw1\n\n\n\nbigdata\n\n\n\n\n\n\n\n정은서\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw2\n\n\n\nbigdata\n\n\n\n\n\n\n\n정은서\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Recent posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nhw3\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nhw6\n\n\nt검정 연습문제\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nhw6\n\n\nt검정 연습문제\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nhw5\n\n\n\n정은서\n\n\nJul 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n\n정은서\n\n\nJul 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\ngraph\n\n\n\n정은서\n\n\nJul 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw1\n\n\n\n정은서\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw2\n\n\n\n정은서\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/숙제 Qmd/index.html",
    "href": "posts/숙제 Qmd/index.html",
    "title": "hw3",
    "section": "",
    "text": "숙제 Qmd\n\n\n1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그릴 것.\n\ndef norm(x, mu, sigma):\n    import numpy as np\n    a = 1/(sigma* np.sqrt(2*np.pi))\n    b = np.exp( -(x-mu)**2 / (2*sigma**2))\n    return a*b\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx=np.linspace(-20,20,1000)\ny= norm(x, mu=3, sigma=2)\n\nplt.clf()\nplt.plot(x, y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n—\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n\nX ~ N(2, 3^2)\n\n\n1) P(X&lt;3)\n\n\n2) P(2&lt;X&lt;5)\n\n\n3) P(X&lt;3 or X&gt;7)\n\nfrom scipy.stats import norm\n\nprint(\"1) P(X&lt;3) :\",norm.cdf(3, loc=2, scale=3))\nprint(\"2) P(2&lt;X&lt;5) :\", norm.cdf(5, loc=2, scale=3) - norm.cdf(2, loc=2, scale=3))\nprint(\"3) P(X&lt;3 or X&gt;7) :\", norm.cdf(3, loc=2, scale=3) + (1-norm.cdf(7,loc=2,scale=3)))\n\n1) P(X&lt;3) : 0.6305586598182363\n2) P(2&lt;X&lt;5) : 0.3413447460685429\n3) P(X&lt;3 or X&gt;7) : 0.678349012091051\n\n\n\n\n\n—\n\n\n3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다.\n\n\n상위 5%에 해당하는 학생의 점수는?\n\nprint(\"상위 5%에 해당하는 학생의 점수는? \",norm.ppf(0.95, loc=30, scale=2))\n\n상위 5%에 해당하는 학생의 점수는?  33.28970725390295"
  },
  {
    "objectID": "posts/graph/index.html",
    "href": "posts/graph/index.html",
    "title": "graph",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=mpg, x='displ', y='hwy', hue='drv').set(xlim=[3,6], ylim=[10,30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\npx.scatter(data_frame = mpg, x = \"displ\" , y=\"hwy\", color = \"drv\")\n\n                                                \n\n\n\n\n\n\nmpg_group = mpg.groupby('drv', as_index=False).agg(hwy_mean = ('hwy', 'mean')).sort_values('hwy_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group, x='drv', y='hwy_mean', hue='drv')\nplt.show()\n\n\n\n\n\n\n\n\n\nmpg_group3 = mpg.groupby('drv').agg(drv_count = ('drv','count')).sort_values('drv_count', ascending=False)\nplt.clf()\nsns.barplot(data= mpg_group3, x='drv', y='drv_count', hue='drv')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#그래프-그리기",
    "href": "posts/graph/index.html#그래프-그리기",
    "title": "graph",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=mpg, x='displ', y='hwy', hue='drv').set(xlim=[3,6], ylim=[10,30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\npx.scatter(data_frame = mpg, x = \"displ\" , y=\"hwy\", color = \"drv\")\n\n                                                \n\n\n\n\n\n\nmpg_group = mpg.groupby('drv', as_index=False).agg(hwy_mean = ('hwy', 'mean')).sort_values('hwy_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group, x='drv', y='hwy_mean', hue='drv')\nplt.show()\n\n\n\n\n\n\n\n\n\nmpg_group3 = mpg.groupby('drv').agg(drv_count = ('drv','count')).sort_values('drv_count', ascending=False)\nplt.clf()\nsns.barplot(data= mpg_group3, x='drv', y='drv_count', hue='drv')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-countplot-사용한-막대-그래프",
    "href": "posts/graph/index.html#sns의-countplot-사용한-막대-그래프",
    "title": "graph",
    "section": "sns의 countplot 사용한 막대 그래프",
    "text": "sns의 countplot 사용한 막대 그래프\n\nplt.clf()\nsns.countplot(data=mpg, x='drv', hue='drv')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.countplot(data=mpg, x='drv', hue='drv', order=mpg['drv'].value_counts().index)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.countplot(data=mpg, x='drv', hue='drv', order=['r','4','f'])\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프",
    "href": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프",
    "title": "graph",
    "section": "sns의 lineplot() 사용한 선 그래프",
    "text": "sns의 lineplot() 사용한 선 그래프\n\neconomics = pd.read_csv('../../economics.csv')\n\nplt.clf()\nsns.lineplot(data=economics , x='date', y='unemploy')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프---x축-주의",
    "href": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프---x축-주의",
    "title": "graph",
    "section": "sns의 lineplot() 사용한 선 그래프 - x축 주의",
    "text": "sns의 lineplot() 사용한 선 그래프 - x축 주의\n\neconomics['date'] = pd.to_datetime(economics['date'])\neconomics['year'] = economics['date'].dt.year\nplt.clf()\nsns.lineplot(data=economics, x='year', y='unemploy')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-boxplot-사용한-상자-그림",
    "href": "posts/graph/index.html#sns의-boxplot-사용한-상자-그림",
    "title": "graph",
    "section": "sns의 boxplot() 사용한 상자 그림",
    "text": "sns의 boxplot() 사용한 상자 그림\n\nplt.clf()\nsns.boxplot(data= mpg, x='drv', y='hwy', hue='drv')\nplt.show()"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "posts/hw1/index.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "href": "posts/hw1/index.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "title": "hw1",
    "section": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.",
    "text": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nimport numpy as np\n\n# 가격 평균\nprint(\"가격 평균 : \",np.mean(df['가격']))\n\n#판매량 평균\nprint(\"판매량 평균 : \",np.mean(df['판매량']))\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0"
  },
  {
    "objectID": "posts/hw1/index.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "posts/hw1/index.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('../../mpg.csv')\n\ndf_copy = df.copy()\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "posts/hw1/index.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "posts/hw1/index.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_copy=df_copy.rename(columns={'cty' : 'city', 'hwy' : 'highway'})\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "posts/hw1/index.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "href": "posts/hw1/index.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "title": "hw1",
    "section": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.",
    "text": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\ndf_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/index.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "posts/hw1/index.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('../../midwest.csv')\nmidwest.head()\n\n#pd.set_option('display.max_columns', None)\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns\n\n\n\n\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n결측치가 하나도 없는 데이터이다. 범주 컬럼은 3개이고, 그 외에는 다 수치컬럼이다."
  },
  {
    "objectID": "posts/hw1/index.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "href": "posts/hw1/index.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "title": "hw1",
    "section": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정",
    "text": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns"
  },
  {
    "objectID": "posts/hw1/index.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "posts/hw1/index.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['pct'] = (midwest['asian']/midwest['total'])*100\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\nmidwest['pct'].plot.hist()\nplt.show()"
  },
  {
    "objectID": "posts/hw1/index.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "href": "posts/hw1/index.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "title": "hw1",
    "section": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.",
    "text": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n\nprint( \"아시아 인구 백분율 전체 평균 :\",np.mean(midwest['pct']) )\n\n아시아 인구 백분율 전체 평균 : 0.4872461834357345\n\n\n\nmidwest['size'] = np.where(midwest['pct'] &gt; np.mean(midwest['pct']) , 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "posts/hw1/index.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "href": "posts/hw1/index.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "title": "hw1",
    "section": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.",
    "text": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nplt.clf()\nmidwest['size'].value_counts().plot.bar(rot=0)\nplt.show()"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\ndf = pd.read_csv('../../mpg.csv')\npd.set_option('display.max_columns', None)\n\ndf.assign(type = np.where(df['displ']&lt;=4, '4이하', np.where(df['displ']&gt;=5, '5이상', '기타'))).groupby('type').agg(type_mean = ('hwy','mean'))\n\n\n\n\n\n\n\n\ntype_mean\n\n\ntype\n\n\n\n\n\n4이하\n25.963190\n\n\n5이상\n18.078947\n\n\n기타\n17.151515\n\n\n\n\n\n\n\n4이하 가 5이상보다 평균이 높다는 것을 알 수 있다.\n\n\n\nprint(\"4이하인 경우 평균 :\",df.query('displ &lt;= 4')['hwy'].mean())\nprint(\"5이상인 경우 평균 :\",df.query('displ &gt;=5')['hwy'].mean())\n\n4이하인 경우 평균 : 25.96319018404908\n5이상인 경우 평균 : 18.07894736842105"
  },
  {
    "objectID": "posts/hw2/index.html#자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw2/index.html#자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\ndf = pd.read_csv('../../mpg.csv')\npd.set_option('display.max_columns', None)\n\ndf.assign(type = np.where(df['displ']&lt;=4, '4이하', np.where(df['displ']&gt;=5, '5이상', '기타'))).groupby('type').agg(type_mean = ('hwy','mean'))\n\n\n\n\n\n\n\n\ntype_mean\n\n\ntype\n\n\n\n\n\n4이하\n25.963190\n\n\n5이상\n18.078947\n\n\n기타\n17.151515\n\n\n\n\n\n\n\n4이하 가 5이상보다 평균이 높다는 것을 알 수 있다.\n\n\n\nprint(\"4이하인 경우 평균 :\",df.query('displ &lt;= 4')['hwy'].mean())\nprint(\"5이상인 경우 평균 :\",df.query('displ &gt;=5')['hwy'].mean())\n\n4이하인 경우 평균 : 25.96319018404908\n5이상인 경우 평균 : 18.07894736842105"
  },
  {
    "objectID": "posts/hw2/index.html#자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota-중-어느-manufacturer자동차-제조-회사의-cty도시연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw2/index.html#자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota-중-어느-manufacturer자동차-제조-회사의-cty도시연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시연비) 평균이 더 높은지 알아보세요.",
    "text": "자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시연비) 평균이 더 높은지 알아보세요.\n\ndf.groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).query(\"manufacturer == 'audi' | manufacturer=='toyota'\")\n\n\n\n\n\n\n\n\nmanufacturer\ncty_mean\n\n\n\n\n0\naudi\n17.611111\n\n\n13\ntoyota\n18.529412\n\n\n\n\n\n\n\ntoyota 제조회사가 도시연비 평균이 더 높다.\n\n다른 방법\n\ndf.groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).query(\"manufacturer in ['audi','toyota']\")\n\n\n\n\n\n\n\n\nmanufacturer\ncty_mean\n\n\n\n\n0\naudi\n17.611111\n\n\n13\ntoyota\n18.529412"
  },
  {
    "objectID": "posts/hw2/index.html#chevrolet-ford-honda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "href": "posts/hw2/index.html#chevrolet-ford-honda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "title": "hw2",
    "section": "‘chevrolet’, ‘ford’, ‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.",
    "text": "‘chevrolet’, ‘ford’, ‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nprint(\"세 회사 데이터에 대한 hwy 전체 평균 :\",df.query(\"manufacturer in ['chevrolet','ford','honda']\")['hwy'].mean())\n\n세 회사 데이터에 대한 hwy 전체 평균 : 22.50943396226415"
  },
  {
    "objectID": "posts/hw2/index.html#audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "href": "posts/hw2/index.html#audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.",
    "text": "’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nprint(\"=\"*70, \"\\n 1. audi 중 hwy가 높은 순의 자동차 모델 \\n\")\ndf.query('manufacturer == \"audi\"').groupby('model').agg(hwy_mean = ('hwy' , 'mean'))\n\n====================================================================== \n 1. audi 중 hwy가 높은 순의 자동차 모델 \n\n\n\n\n\n\n\n\n\n\nhwy_mean\n\n\nmodel\n\n\n\n\n\na4\n28.285714\n\n\na4 quattro\n25.750000\n\n\na6 quattro\n24.000000\n\n\n\n\n\n\n\n\nprint(\"\\n\",\"=\"*70, \"\\n 2. audi 중 hwy가 1~5위인 자동차 데이터 \\n\")\ndf.query('manufacturer == \"audi\"').sort_values('hwy', ascending=False).head(5)\n\n\n ====================================================================== \n 2. audi 중 hwy가 1~5위인 자동차 데이터 \n\n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "href": "posts/hw2/index.html#mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.",
    "text": "mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg = df.copy()\nmpg= mpg.assign(sum_cty_hwy = mpg['cty']+mpg['hwy'])\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42"
  },
  {
    "objectID": "posts/hw2/index.html#앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "href": "posts/hw2/index.html#앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.",
    "text": "앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg = mpg.assign(avg_cty_hwy = mpg['sum_cty_hwy']/2)\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\navg_cty_hwy\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0"
  },
  {
    "objectID": "posts/hw2/index.html#평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "href": "posts/hw2/index.html#평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.",
    "text": "’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg.sort_values('avg_cty_hwy', ascending=False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\navg_cty_hwy\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/index.html#번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "href": "posts/hw2/index.html#번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "title": "hw2",
    "section": "1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.",
    "text": "1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\ndf.assign(sum_cty_hwy = df['cty']+df['hwy']\n          , avg_cty_hwy = lambda x: x['sum_cty_hwy']/2) \\\n    .sort_values('avg_cty_hwy', ascending=False) \\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\navg_cty_hwy\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "hw3",
    "section": "",
    "text": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그릴 것.\n\ndef norm(x, mu, sigma):\n    import numpy as np\n    a = 1/(sigma* np.sqrt(2*np.pi))\n    b = np.exp( -(x-mu)**2 / (2*sigma**2))\n    return a*b\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx=np.linspace(-20,20,1000)\ny= norm(x, mu=3, sigma=2)\n\nplt.clf()\nplt.plot(x, y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n—\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n\nX ~ N(2, 3^2)\n\n\n1) P(X&lt;3)\n\n\n2) P(2&lt;X&lt;5)\n\n\n3) P(X&lt;3 or X&gt;7)\n\nfrom scipy.stats import norm\n\nprint(\"1) P(X&lt;3) :\",norm.cdf(3, loc=2, scale=3))\nprint(\"2) P(2&lt;X&lt;5) :\", norm.cdf(5, loc=2, scale=3) - norm.cdf(2, loc=2, scale=3))\nprint(\"3) P(X&lt;3 or X&gt;7) :\", norm.cdf(3, loc=2, scale=3) + (1-norm.cdf(7,loc=2,scale=3)))\n\n1) P(X&lt;3) : 0.6305586598182363\n2) P(2&lt;X&lt;5) : 0.3413447460685429\n3) P(X&lt;3 or X&gt;7) : 0.678349012091051\n\n\n\n\n\n—\n\n\n3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다.\n\n\n상위 5%에 해당하는 학생의 점수는?\n\nprint(\"상위 5%에 해당하는 학생의 점수는? \",norm.ppf(0.95, loc=30, scale=2))\n\n상위 5%에 해당하는 학생의 점수는?  33.28970725390295"
  },
  {
    "objectID": "posts/hw3/index.html#mpg-데이터의-cty도시연비와-hwy고속도로-연비-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-cty-y축은-hwy로-된-산점도를-만들어보세요.",
    "href": "posts/hw3/index.html#mpg-데이터의-cty도시연비와-hwy고속도로-연비-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-cty-y축은-hwy로-된-산점도를-만들어보세요.",
    "title": "hw3",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.scatterplot(data = mpg, x='cty', y='hwy')\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html#미국의-지역별-인구통계-정보를-담은-midwest.csv를-이용해-전체-인구와-아시아인-인구-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-poptotal전체-인구-y축은-popasian아시아인-인구으로-된-산점도를-만들어-보세요.-전체-인구는-50만-명-이하-아시아인-인구는-1만-명-이하인-지역만-산점도에-표시되게-설정하세요.",
    "href": "posts/hw3/index.html#미국의-지역별-인구통계-정보를-담은-midwest.csv를-이용해-전체-인구와-아시아인-인구-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-poptotal전체-인구-y축은-popasian아시아인-인구으로-된-산점도를-만들어-보세요.-전체-인구는-50만-명-이하-아시아인-인구는-1만-명-이하인-지역만-산점도에-표시되게-설정하세요.",
    "title": "hw3",
    "section": "미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.",
    "text": "미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv('../../midwest.csv')\n\nplt.clf()\nsns.scatterplot(data=midwest , x= 'poptotal' , y='popasian').set(xlim = [0,500000], ylim=[0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html#어떤-회사에서-생산한-suv-차종의-도시-연비가-높은지-알아보려고-합니다.-suv-차종을-대상으로-cty도시-연비-평균이-가장-높은-회사-다섯-곳을-막대-그래프로-표현해-보세요.-막대는-연비가-높은-순으로-정렬하세요.",
    "href": "posts/hw3/index.html#어떤-회사에서-생산한-suv-차종의-도시-연비가-높은지-알아보려고-합니다.-suv-차종을-대상으로-cty도시-연비-평균이-가장-높은-회사-다섯-곳을-막대-그래프로-표현해-보세요.-막대는-연비가-높은-순으로-정렬하세요.",
    "title": "hw3",
    "section": "어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.",
    "text": "어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nmpg_group = mpg.query(\"category == 'suv'\").groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).sort_values('cty_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group , x='manufacturer', y='cty_mean')\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html#자동차-중에-어떤-category자동차-종류가-많은지-알아보려고-합니다.-sns.barplot을-이용해-자동차-종류별-빈도를-표현한-막대-그래프를-만들어-보세요.-막대는-빈도가-높은-순으로-정렬하세요.",
    "href": "posts/hw3/index.html#자동차-중에-어떤-category자동차-종류가-많은지-알아보려고-합니다.-sns.barplot을-이용해-자동차-종류별-빈도를-표현한-막대-그래프를-만들어-보세요.-막대는-빈도가-높은-순으로-정렬하세요.",
    "title": "hw3",
    "section": "자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.",
    "text": "자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nmpg_group2 = mpg.groupby('category',as_index=False).agg(category_count = ('category', 'count') ).sort_values('category_count' , ascending = False)\nplt.clf()\nsns.barplot(data=mpg_group2, x='category', y='category_count')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "hw3",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.scatterplot(data = mpg, x='cty', y='hwy')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.-n으로-구하는-방법-n-1로-구하는-방법",
    "href": "posts/hw4/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.-n으로-구하는-방법-n-1로-구하는-방법",
    "title": "hw4",
    "section": "",
    "text": "from scipy.stats import uniform\nimport numpy as np\nx = uniform.rvs(loc=3, scale=4, size=20)\nx_bar = np.mean(x)\ns_2_1 = sum((x-x_bar)**2)/(len(x)-1)  # n-1로 표본 분산 구하는 방법1\ns_2_2 = x.var(ddof=1)  # n-1로 표본 분산 구하는 방법2\ns_2_3 = np.var(x, ddof=1)  # n-1로 표본 분산 구하는 방법3\n\nprint(\"s_2_1 : \",s_2_1)\nprint(\"s_2_2 : \",s_2_2)\nprint(\"s_2_3 : \",s_2_3)\n\nk_2_1 = sum((x-x_bar)**2)/len(x)  # n로 표본 분산 구하는 방법1\nk_2_2 = x.var()  # n로 표본 분산 구하는 방법2\nk_2_3 = np.var(x)  # n로 표본 분산 구하는 방법3\n\nprint(\"k_2_1 : \",k_2_1)\nprint(\"k_2_2 : \",k_2_2)\nprint(\"k_2_3 : \",k_2_3)\n\ns_2_1 :  0.9093052370095528\ns_2_2 :  0.909305237009553\ns_2_3 :  0.909305237009553\nk_2_1 :  0.8638399751590752\nk_2_2 :  0.8638399751590754\nk_2_3 :  0.8638399751590754\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20) )**2).sum(axis=1)/(20 -1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw5/index.html",
    "href": "posts/hw5/index.html",
    "title": "hw4",
    "section": "",
    "text": "from scipy.stats import uniform\nimport numpy as np\nx = uniform.rvs(loc=3, scale=4, size=20)\nx_bar = np.mean(x)\ns_2_1 = sum((x-x_bar)**2)/(len(x)-1)  # n-1로 표본 분산 구하는 방법1\ns_2_2 = x.var(ddof=1)  # n-1로 표본 분산 구하는 방법2\ns_2_3 = np.var(x, ddof=1)  # n-1로 표본 분산 구하는 방법3\n\nprint(\"s_2_1 : \",s_2_1)\nprint(\"s_2_2 : \",s_2_2)\nprint(\"s_2_3 : \",s_2_3)\n\nk_2_1 = sum((x-x_bar)**2)/len(x)  # n로 표본 분산 구하는 방법1\nk_2_2 = x.var()  # n로 표본 분산 구하는 방법2\nk_2_3 = np.var(x)  # n로 표본 분산 구하는 방법3\n\nprint(\"k_2_1 : \",k_2_1)\nprint(\"k_2_2 : \",k_2_2)\nprint(\"k_2_3 : \",k_2_3)\n\ns_2_1 :  1.2815850339277062\ns_2_2 :  1.2815850339277062\ns_2_3 :  1.2815850339277062\nk_2_1 :  1.2175057822313209\nk_2_2 :  1.2175057822313209\nk_2_3 :  1.2175057822313209\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20) )**2).sum(axis=1)/(20 -1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw5/index.html#데이터-불러오기",
    "href": "posts/hw5/index.html#데이터-불러오기",
    "title": "hw5",
    "section": "",
    "text": "import pandas as pd\nwelfare = pd.read_spss('../../../Doit_Python/Data/Koweps_hpwc14_2019_beta2.sav')\nwelfare.head()\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n5 rows × 830 columns"
  },
  {
    "objectID": "posts/hw5/index.html#필요한-데이터만-가져오기",
    "href": "posts/hw5/index.html#필요한-데이터만-가져오기",
    "title": "hw5",
    "section": "",
    "text": "import numpy as np\ndf = welfare[['h14_g3','p1402_8aq1']]\ndf = df.rename(columns = {'h14_g3' : 'sex',\n                           'p1402_8aq1' : 'income' })\ndf = df.dropna(subset='income')\ndf['sex'] = np.where(df['sex'] == 1, 'male', 'female')\ndf.head()\n\n\n\n\n\n\n\n\nsex\nincome\n\n\n\n\n2\nmale\n107.0\n\n\n3\nmale\n192.0\n\n\n7\nfemale\n27.0\n\n\n8\nfemale\n27.0\n\n\n14\nmale\n338.0"
  },
  {
    "objectID": "posts/hw5/index.html#신뢰구간-구하기",
    "href": "posts/hw5/index.html#신뢰구간-구하기",
    "title": "hw5",
    "section": "",
    "text": "male_income = df.loc[df['sex']=='male', 'income']\nfemale_income = df.loc[df['sex'] == 'female', 'income']\nmale_bar = male_income.mean()\nfemale_bar = female_income.mean()\nmale_scale = np.sqrt(male_income.var(ddof=1))\nfemale_scale = np.sqrt(female_income.var(ddof=1))\nmale_n = len(male_income)\nfemale_n = len(female_income)\n\nfrom scipy.stats import norm\n\nz0025 = norm.ppf(0.975, loc=0 , scale=1)\nmale_a = male_bar + z0025*male_scale/np.sqrt(male_n)\nmale_b = male_bar - z0025*male_scale/np.sqrt(male_n)\nprint(\"male의 오른쪽 신뢰구간 위치 :\", male_a)\nprint(\"male의 왼쪽 신뢰구간 위치 :\", male_b)\n\nfemale_a = female_bar + z0025*female_scale/np.sqrt(female_n)\nfemale_b = female_bar - z0025*female_scale/np.sqrt(female_n)\nprint(\"female의 오른쪽 신뢰구간 위치 :\", female_a)\nprint(\"female의 왼쪽 신뢰구간 위치 :\", female_b)\n\nmale의 오른쪽 신뢰구간 위치 : 357.96254968365116\nmale의 왼쪽 신뢰구간 위치 : 340.11259229974775\nfemale의 오른쪽 신뢰구간 위치 : 191.7557368532799\nfemale의 왼쪽 신뢰구간 위치 : 180.83045468346845"
  },
  {
    "objectID": "posts/hw5/index.html#groupby로-성별별-평균-income-데이터-만들기",
    "href": "posts/hw5/index.html#groupby로-성별별-평균-income-데이터-만들기",
    "title": "hw5",
    "section": "",
    "text": "sex_income = df.groupby('sex', as_index=False).agg(mean_income = ('income','mean'))\nsex_income\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571"
  },
  {
    "objectID": "posts/hw5/index.html#성별별-평균-income-데이터로-막대그래프-그리고-신뢰구간-그리기",
    "href": "posts/hw5/index.html#성별별-평균-income-데이터로-막대그래프-그리고-신뢰구간-그리기",
    "title": "hw5",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.barplot(data=sex_income , x='sex', y='mean_income')\nplt.plot([0,0], [female_a,female_b], color='red')\nplt.plot([1,1], [male_a, male_b], color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw6/index.html",
    "href": "posts/hw6/index.html",
    "title": "hw5",
    "section": "",
    "text": "import pandas as pd\nwelfare = pd.read_spss('../../../Doit_Python/Data/Koweps_hpwc14_2019_beta2.sav')\nwelfare.head()\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n5 rows × 830 columns\n\n\n\n\n\n\n\nimport numpy as np\ndf = welfare[['h14_g3','p1402_8aq1']]\ndf = df.rename(columns = {'h14_g3' : 'sex',\n                           'p1402_8aq1' : 'income' })\ndf = df.dropna(subset='income')\ndf['sex'] = np.where(df['sex'] == 1, 'male', 'female')\ndf.head()\n\n\n\n\n\n\n\n\nsex\nincome\n\n\n\n\n2\nmale\n107.0\n\n\n3\nmale\n192.0\n\n\n7\nfemale\n27.0\n\n\n8\nfemale\n27.0\n\n\n14\nmale\n338.0\n\n\n\n\n\n\n\n\n\n\n\nmale_income = df.loc[df['sex']=='male', 'income']\nfemale_income = df.loc[df['sex'] == 'female', 'income']\nmale_bar = male_income.mean()\nfemale_bar = female_income.mean()\nmale_scale = np.sqrt(male_income.var(ddof=1))\nfemale_scale = np.sqrt(female_income.var(ddof=1))\nmale_n = len(male_income)\nfemale_n = len(female_income)\n\nfrom scipy.stats import norm\n\nz0025 = norm.ppf(0.975, loc=0 , scale=1)\nmale_a = male_bar + z0025*male_scale/np.sqrt(male_n)\nmale_b = male_bar - z0025*male_scale/np.sqrt(male_n)\nprint(\"male의 오른쪽 신뢰구간 위치 :\", male_a)\nprint(\"male의 왼쪽 신뢰구간 위치 :\", male_b)\n\nfemale_a = female_bar + z0025*female_scale/np.sqrt(female_n)\nfemale_b = female_bar - z0025*female_scale/np.sqrt(female_n)\nprint(\"female의 오른쪽 신뢰구간 위치 :\", female_a)\nprint(\"female의 왼쪽 신뢰구간 위치 :\", female_b)\n\nmale의 오른쪽 신뢰구간 위치 : 357.96254968365116\nmale의 왼쪽 신뢰구간 위치 : 340.11259229974775\nfemale의 오른쪽 신뢰구간 위치 : 191.7557368532799\nfemale의 왼쪽 신뢰구간 위치 : 180.83045468346845\n\n\n\n\n\n\nsex_income = df.groupby('sex', as_index=False).agg(mean_income = ('income','mean'))\nsex_income\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571\n\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.barplot(data=sex_income , x='sex', y='mean_income')\nplt.plot([0,0], [female_a,female_b], color='red')\nplt.plot([1,1], [male_a, male_b], color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw6/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "href": "posts/hw6/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "title": "hw6",
    "section": "2. 검정을 위한 가설을 명확하게 서술하시오.",
    "text": "2. 검정을 위한 가설을 명확하게 서술하시오.\n\n\nH0 : mu(신형 자동차의 평균 복합 에너지 소비효율 평균) &gt;= 16.0 (mu0)\nH1 : mu(신형 자동차의 평균 복합 에너지 소비효율 평균) &lt; 16.0 (mu0)"
  },
  {
    "objectID": "posts/hw6/index.html#검정통계량-계산하시오.",
    "href": "posts/hw6/index.html#검정통계량-계산하시오.",
    "title": "hw6",
    "section": "3. 검정통계량 계산하시오.",
    "text": "3. 검정통계량 계산하시오.\n\nimport numpy as np\nx = np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,\n15.382, 16.709, 16.804])\nx_bar = x.mean()\nsample_std = x.std(ddof=1)\n\nz = (x_bar - 16)/ (sample_std/np.sqrt(len(x)))\nprint(\"검정통계량 :\",z)\n\n검정통계량 : -1.8500447456376756"
  },
  {
    "objectID": "posts/hw6/index.html#pvalue을-구하세요.",
    "href": "posts/hw6/index.html#pvalue을-구하세요.",
    "title": "hw6",
    "section": "4. p‑value을 구하세요.",
    "text": "4. p‑value을 구하세요.\n\nfrom scipy.stats import t\nprint(\"p-value :\",t.cdf(z, df=len(x) -1))\n\np-value : 0.042762417664207845"
  },
  {
    "objectID": "posts/hw6/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "href": "posts/hw6/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "title": "hw6",
    "section": "6. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.",
    "text": "6. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.\n\nt0025 = t.ppf(0.975, df=15-1)\nprint(\"95% 신뢰구간 : (\",x_bar - t0025*sample_std/np.sqrt(len(x)) , \",\", x_bar + t0025*sample_std/np.sqrt(len(x)), \")\")\n\n95% 신뢰구간 : ( 14.988864240339733 , 16.074602426326933 )"
  },
  {
    "objectID": "project1.html",
    "href": "project1.html",
    "title": "project1",
    "section": "",
    "text": "예전에는 전통시장을 가면 편의시설이 부족해서 접근성이 떨어졌는데, 요즘에는 편의시설을 개선하려는 노력을 기울이고 있다.\n\n와이파이 설치 2. 건강한 식재료 (백년초 국수 등 + 지역 특색) 3. 공산품이 아니라 정성이 들어간 음식들 4. 저렴한 가격 + 온누리 상품권 사용가능 5. 쇼핑 후 차 한 잔의 여유를 위한 여가 공간 구비 (카페 등) 6. 1인 가구를 위한 음식\n\n상품권 가맹점포 정보 https://www.sbiz.or.kr/sijangtong/nation/onnuri/onnuriMktList.do?menu_type_a=A&menu_cms=&menu_id=070400#shopPopBtn\n데이터 출처 소상공인시장진흥공단_전국 전통시장 현황_2010 : https://www.data.go.kr/data/15102810/fileData.do 소상공인시장진흥공단_전국 전통시장 현황_20151231 : https://www.data.go.kr/data/15052836/fileData.do 소상공인시장진흥공단_시장 시설_20210928 : https://www.data.go.kr/data/15090651/fileData.do 소상공인시장진흥공단_전국 전통시장 현황_20230725 : https://www.data.go.kr/data/15012894/fileData.do 소상공인시장진흥공단_전국 전통시장 현황_20240719 : https://www.data.go.kr/data/15052837/fileData.do?recommendDataYn=Y\n소상공인시장진흥공단_시장 서비스 정보_20210928 : https://www.data.go.kr/data/15090612/fileData.do #"
  },
  {
    "objectID": "project1.html#변수명-바꾸기",
    "href": "project1.html#변수명-바꾸기",
    "title": "project1",
    "section": "변수명 바꾸기",
    "text": "변수명 바꾸기\n\nmarket2 = market2.rename(columns={'시장명' : 'market_name',\n                              '시장유형' : 'type',\n                              '소재지도로명주소' : 'address_road',\n                              '시장개설주기' : 'open_period',\n                              '소재지지번주소' : 'address_old',\n                              '점포수' : 'store_count',\n                              '사용가능상품권' : 'certificate',\n                              '공중화장실 보유여부' : 'public_toilet',\n                              '주차장 보유여부' : 'parking_lot',\n                              '개설년도' : 'year' ,\n                              '데이터기준일자' : 'data_date'})\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\n\n\n\n\n\n\n\n잘 바뀐 것을 알 수 있다."
  },
  {
    "objectID": "project1.html#데이터-정보-알아보기",
    "href": "project1.html#데이터-정보-알아보기",
    "title": "project1",
    "section": "데이터 정보 알아보기",
    "text": "데이터 정보 알아보기\n\nmarket2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nData columns (total 11 columns):\n #   Column         Non-Null Count  Dtype         \n---  ------         --------------  -----         \n 0   market_name    1439 non-null   object        \n 1   type           1439 non-null   object        \n 2   address_road   1439 non-null   object        \n 3   open_period    1439 non-null   object        \n 4   address_old    1439 non-null   object        \n 5   store_count    1439 non-null   int64         \n 6   certificate    1159 non-null   object        \n 7   public_toilet  1439 non-null   object        \n 8   parking_lot    1439 non-null   object        \n 9   year           1281 non-null   float64       \n 10  data_date      1439 non-null   datetime64[ns]\ndtypes: datetime64[ns](1), float64(1), int64(1), object(8)\nmemory usage: 123.8+ KB\n\n\n8개가 범주컬럼이고, 2개가 수치 컬럼, 1개가 날짜컬럼임을 알 수 있다. (수치컬럼중 1개는 연도컬럼이라서, 우리가 분석해 볼 수 있는 수치 컬럼은 1개뿐이다.) 그리고 사용가능상품권(certificate)와 개설연도(year)에만 null값이 있다는 것을 알 수 있다.\n각 컬럼의 범주 알아보기\n\nmarket2['market_name'].value_counts()\n\nmarket_name\n중앙시장      16\n동부시장       6\n역전시장       5\n현대시장       4\n강남시장       4\n          ..\n신광시장       1\n장성종합시장     1\n한라종합시장     1\n기계시장       1\n목행시장       1\nName: count, Length: 1367, dtype: int64\n\n\n이름이 동일한 서로 다른 시장이 존재함.\n\nmarket2['type'].value_counts()\n\ntype\n상설       1002\n상설+정기     259\n정기        178\nName: count, dtype: int64\n\n\n시장 유형은 3가지임.\n\nmarket2['address_road'].value_counts().head()\n\naddress_road\n대구광역시 북구 칠성시장로 5길 22    2\n경상북도 예천군 예천읍 시장로 109    2\n서울특별시 중구 청계천로 274       2\n인천광역시 서구 가정로 208        2\n대구광역시 남구 대명동 1157-10    2\nName: count, dtype: int64\n\n\n\nmarket2['address_old'].value_counts().head()\n\naddress_old\n서울 강서구 화곡 370        2\n서울 중구 을지로6가 17번지     2\n대구 수성구 수성동2가 39-4    2\n경기 김포시 양촌읍 414-3     2\n인천 동구 송림동 50         2\nName: count, dtype: int64\n\n\n주소가 동일한 시장이 있음\n\nmarket2['open_period'].value_counts()\n\nopen_period\n상설    1002\n5일     435\n2일       1\n6일       1\nName: count, dtype: int64\n\n\n정기 시장에 5일, 2일, 6일 있음.\n\nmarket2['certificate'].value_counts()\n\ncertificate\n온누리상품권    1159\nName: count, dtype: int64\n\n\n\nmarket2['public_toilet'].value_counts()\n\npublic_toilet\nY    1308\nN     131\nName: count, dtype: int64\n\n\n\nmarket2['parking_lot'].value_counts()\n\nparking_lot\nY    859\nN    580\nName: count, dtype: int64\n\n\n\nmarket2['year'].value_counts().head()\n\nyear\n2005.0    130\n2006.0    104\n2013.0     85\n2009.0     80\n2007.0     78\nName: count, dtype: int64\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nyear_group_count = market2.groupby('year').agg(year_count= ('year', 'count'))\n\nplt.clf()\nsns.lineplot(data=year_group_count, x='year', y='year_count')\nplt.show()\n\n\n\n\n\n\n\n\n\nmarket2['data_date'].value_counts()\n\ndata_date\n2015-12-31    1439\nName: count, dtype: int64"
  },
  {
    "objectID": "project1.html#점포수-요약-정보-알아보기-범주화",
    "href": "project1.html#점포수-요약-정보-알아보기-범주화",
    "title": "project1",
    "section": "점포수 요약 정보 알아보기 (범주화)",
    "text": "점포수 요약 정보 알아보기 (범주화)\n\nmarket2[['store_count']].describe()\n\n\n\n\n\n\n\n\nstore_count\n\n\n\n\ncount\n1439.000000\n\n\nmean\n143.907575\n\n\nstd\n298.989963\n\n\nmin\n0.000000\n\n\n25%\n50.000000\n\n\n50%\n80.000000\n\n\n75%\n134.000000\n\n\nmax\n5852.000000\n\n\n\n\n\n\n\n점포수 위주로 봤을 때, 25%, 75% 기준으로 점포 사이즈를 나누는 것이 합리적으로 보인다. samll : 50개 미만 medium : 50개 이상 134개 미만 large : 134개 이상 3가지의 범주로 나누고자 한다."
  },
  {
    "objectID": "project1.html#범주화-1-점포수로-범주화하기",
    "href": "project1.html#범주화-1-점포수로-범주화하기",
    "title": "project1",
    "section": "범주화 1 : 점포수로 범주화하기",
    "text": "범주화 1 : 점포수로 범주화하기\n\nmarket2 = market2.assign(market_scale = np.where(market2[\"store_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"store_count\"] &gt;= 50, \"medium\", \"small\")))\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\n\n\n\n\n\n\n\n점포수대로 범주화가 잘 되어진 것으로 보인다.\n\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['market_scale'].value_counts().plot.bar(rot=0)\nplt.show()"
  },
  {
    "objectID": "project1.html#범주화-2-편의시절공중화장실-주차장-보유-여부에-따라-시장을-범주화하기.",
    "href": "project1.html#범주화-2-편의시절공중화장실-주차장-보유-여부에-따라-시장을-범주화하기.",
    "title": "project1",
    "section": "범주화 2 : 편의시절(공중화장실, 주차장) 보유 여부에 따라 시장을 범주화하기.",
    "text": "범주화 2 : 편의시절(공중화장실, 주차장) 보유 여부에 따라 시장을 범주화하기.\n\nmarket2['level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n\n\n\n\n\n\n\n편의시절(공중화장실, 주차장) 보유 여부에 따라 시장의 편의성이 얼마나 좋은지 범주화 해보고자 한다.\n(공중화장실 Y, 주차장 Y) -&gt; high (공중화장실 Y, 주차장 N) -&gt; intermediate (공중화장실 N, 주차장 Y) -&gt; intermediate (공중화장실 N, 주차장 N) -&gt; low\n\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['level'].value_counts().plot.bar(rot=0)\nplt.show()\n\n\n\n\n\n\n\n\n대다수의 시장이 편의시설이 잘 구비되어 있음을 알 수 있다.\nY의 현황을 파악하기 위해서, N은 null값으로 만들기 -&gt; market3 데이터프레임으로 함. N 갯수 알아보기\n\nmarket2['public_toilet'].value_counts()\n\npublic_toilet\nY    1308\nN     131\nName: count, dtype: int64\n\n\n\nmarket2['parking_lot'].value_counts()\n\nparking_lot\nY    859\nN    580\nName: count, dtype: int64\n\n\n온누리 상품권은 사용안하는 곳은 null값이니까 그대로 count 쓰면 쓰는 곳만 세어짐 공중화장실, 주차장은 Y/N 이므로, Y만 세려면 Y만 세어줘야 함."
  },
  {
    "objectID": "project1.html#범주별-데이텨-현황-알아보기",
    "href": "project1.html#범주별-데이텨-현황-알아보기",
    "title": "project1",
    "section": "범주별 데이텨 현황 알아보기",
    "text": "범주별 데이텨 현황 알아보기\n\nmarket3 = market2.copy()\nimport numpy as np\nmarket3.loc[market3['public_toilet']=='N', 'public_toilet'] = np.nan\nmarket3['public_toilet'].isna().sum()\n\nmarket3.loc[market3['parking_lot']=='N', 'parking_lot'] = np.nan\nmarket3['parking_lot'].isna().sum()\n\n\npd.set_option('display.max_columns', None)\ngroup_df = market3.groupby(['type','market_scale']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df\n\n\n\n\n\n\n\n\n\nmarket_count\ncertificate_count\npublic_toilet_count\nparking_lot_count\n\n\ntype\nmarket_scale\n\n\n\n\n\n\n\n\n상설\nlarge\n281\n256\n259\n182\n\n\nmedium\n532\n459\n444\n247\n\n\nsmall\n189\n127\n180\n103\n\n\n상설+정기\nlarge\n66\n64\n63\n53\n\n\nmedium\n145\n132\n138\n101\n\n\nsmall\n48\n33\n48\n40\n\n\n정기\nlarge\n15\n14\n15\n13\n\n\nmedium\n46\n32\n46\n36\n\n\nsmall\n117\n42\n115\n84\n\n\n\n\n\n\n\n5일장 중에서 점포수가 많은 시장은 15곳 밖에 안 됨. 대부분 small에 해당함. 따라서 5일장만 열리는 곳은 소규모로 진행되는 시장임. 즉 외부 관광객이 간다기 보다는 지역 현지인들이 이용할 것으로 보임. 라고 생각을 했지, 5일장 블로그 봐보니까 관광지라면 관광객도 갈 법한 점포들도 있었음."
  },
  {
    "objectID": "project1.html#범주별-데이텨-현황-알아보기-1",
    "href": "project1.html#범주별-데이텨-현황-알아보기-1",
    "title": "project1",
    "section": "범주별 데이텨 현황 알아보기",
    "text": "범주별 데이텨 현황 알아보기\n\ngroup_df = market3.groupby(['type','market_scale','level']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df['certificate_pct']= round(group_df['certificate_count']/group_df['market_count']*100,1)\ngroup_df['public_toilet_pct']=round(group_df['public_toilet_count']/group_df['market_count']*100,1)\ngroup_df['parking_lot_pct']=round(group_df['parking_lot_count']/group_df['market_count']*100,1)\ngroup_df\n\n\n\n\n\n\n\n\n\n\nmarket_count\ncertificate_count\npublic_toilet_count\nparking_lot_count\ncertificate_pct\npublic_toilet_pct\nparking_lot_pct\n\n\ntype\nmarket_scale\nlevel\n\n\n\n\n\n\n\n\n\n\n\n상설\nlarge\nhigh\n175\n159\n175\n175\n90.9\n100.0\n100.0\n\n\nintermediate\n84\n76\n84\n0\n90.5\n100.0\n0.0\n\n\nlow\n22\n21\n0\n7\n95.5\n0.0\n31.8\n\n\nmedium\nhigh\n231\n205\n231\n231\n88.7\n100.0\n100.0\n\n\nintermediate\n213\n180\n213\n0\n84.5\n100.0\n0.0\n\n\nlow\n88\n74\n0\n16\n84.1\n0.0\n18.2\n\n\nsmall\nhigh\n100\n68\n100\n100\n68.0\n100.0\n100.0\n\n\nintermediate\n80\n51\n80\n0\n63.7\n100.0\n0.0\n\n\nlow\n9\n8\n0\n3\n88.9\n0.0\n33.3\n\n\n상설+정기\nlarge\nhigh\n53\n51\n53\n53\n96.2\n100.0\n100.0\n\n\nintermediate\n10\n10\n10\n0\n100.0\n100.0\n0.0\n\n\nlow\n3\n3\n0\n0\n100.0\n0.0\n0.0\n\n\nmedium\nhigh\n99\n92\n99\n99\n92.9\n100.0\n100.0\n\n\nintermediate\n39\n33\n39\n0\n84.6\n100.0\n0.0\n\n\nlow\n7\n7\n0\n2\n100.0\n0.0\n28.6\n\n\nsmall\nhigh\n40\n28\n40\n40\n70.0\n100.0\n100.0\n\n\nintermediate\n8\n5\n8\n0\n62.5\n100.0\n0.0\n\n\n정기\nlarge\nhigh\n13\n12\n13\n13\n92.3\n100.0\n100.0\n\n\nintermediate\n2\n2\n2\n0\n100.0\n100.0\n0.0\n\n\nmedium\nhigh\n36\n28\n36\n36\n77.8\n100.0\n100.0\n\n\nintermediate\n10\n4\n10\n0\n40.0\n100.0\n0.0\n\n\nsmall\nhigh\n83\n34\n83\n83\n41.0\n100.0\n100.0\n\n\nintermediate\n32\n8\n32\n0\n25.0\n100.0\n0.0\n\n\nlow\n2\n0\n0\n1\n0.0\n0.0\n50.0"
  },
  {
    "objectID": "project1.html#상설정기-시장의-지역-봐보기",
    "href": "project1.html#상설정기-시장의-지역-봐보기",
    "title": "project1",
    "section": "상설+정기 시장의 지역 봐보기",
    "text": "상설+정기 시장의 지역 봐보기\n\nmarket2.query('type == \"상설+정기\"').head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\n\n\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n\n\n7\n간성시장\n상설+정기\n강원도 고성군 간성시장 2길 11-1\n5일\n강원 고성군 간성읍 신안리 262번지\n89\n온누리상품권\nY\nY\n2003.0\n2015-12-31\nmedium\nhigh\n\n\n8\n거진시장\n상설+정기\n강원도 고성군 거진읍 거진시장길 15\n5일\n강원 고성군 거진읍 거진리 272번지\n51\n온누리상품권\nY\nY\n2010.0\n2015-12-31\nmedium\nhigh\n\n\n9\n북평민속시장\n상설+정기\n강원도 동해시 북평 오일장길 32\n5일\n강원 동해시 구미동 497-11번지 일원\n130\n온누리상품권\nY\nY\n2013.0\n2015-12-31\nmedium\nhigh\n\n\n15\n삼척중앙시장\n상설+정기\n강원도 삼척시 진주로 12-21\n5일\n강원 삼척시 남양동 55-4\n299\n온누리상품권\nY\nY\n2014.0\n2015-12-31\nlarge\nhigh"
  },
  {
    "objectID": "project1.html#지역별로-시장-수-알아보기-삭제할지-보기",
    "href": "project1.html#지역별로-시장-수-알아보기-삭제할지-보기",
    "title": "project1",
    "section": "지역별로 시장 수 알아보기 (삭제할지 보기)",
    "text": "지역별로 시장 수 알아보기 (삭제할지 보기)\n\n# pd.set_option('display.max_rows', None)\n# market2['town_city'].value_counts().head()"
  },
  {
    "objectID": "project1.html#관광형-상설정기-시장이-있는-지역-알아보기-삭제할지-보기",
    "href": "project1.html#관광형-상설정기-시장이-있는-지역-알아보기-삭제할지-보기",
    "title": "project1",
    "section": "관광형 상설+정기 시장이 있는 지역 알아보기 (삭제할지 보기)",
    "text": "관광형 상설+정기 시장이 있는 지역 알아보기 (삭제할지 보기)\n\n# market4 = market2.query('type == \"상설+정기\"')\n# market4['town_city'].value_counts().head()\n\nhttps://www.bigdata-culture.kr/bigdata/user/data_market/detail.do?id=359f0000-4129-11ec-a107-3b8bd6a15b10 관심있는 지역"
  },
  {
    "objectID": "project1.html#점포수-크기에-따른-연령층-확인하기",
    "href": "project1.html#점포수-크기에-따른-연령층-확인하기",
    "title": "project1",
    "section": "점포수 크기에 따른 연령층 확인하기",
    "text": "점포수 크기에 따른 연령층 확인하기\n\n0~19세 = 유소년\n\n\n20~59세 = 성인\n\n\n60~100세 이상 = 노인"
  },
  {
    "objectID": "project1.html#년-12월-기준-인구조사-파일-불러오기",
    "href": "project1.html#년-12월-기준-인구조사-파일-불러오기",
    "title": "project1",
    "section": "2015년 12월 기준 인구조사 파일 불러오기",
    "text": "2015년 12월 기준 인구조사 파일 불러오기\n\npop = pd.read_excel('pop_2015.xlsx')\npop.head()\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n연령구간인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n남 인구수\n연령구간인구수.1\n0~9세.1\n10~19세.1\n20~29세.1\n30~39세.1\n40~49세.1\n50~59세.1\n60~69세.1\n70~79세.1\n80~89세.1\n90~99세.1\n100세 이상.1\n여 인구수\n연령구간인구수.2\n0~9세.2\n10~19세.2\n20~29세.2\n30~39세.2\n40~49세.2\n50~59세.2\n60~69세.2\n70~79세.2\n80~89세.2\n90~99세.2\n100세 이상.2\n\n\n\n\n0\n전국\n51,529,338\n51,529,338\n4,601,688\n5,717,089\n6,699,048\n7,670,966\n8,858,993\n8,324,791\n5,073,279\n3,176,437\n1,225,210\n165,628\n16,209\n25,758,186\n25,758,186\n2,365,981\n2,980,812\n3,527,813\n3,919,396\n4,505,612\n4,196,330\n2,462,313\n1,366,101\n391,673\n38,373\n3,782\n25,771,152\n25,771,152\n2,235,707\n2,736,277\n3,171,235\n3,751,570\n4,353,381\n4,128,461\n2,610,966\n1,810,336\n833,537\n127,255\n12,427\n\n\n1\n서울특별시\n10,022,181\n10,022,181\n783,299\n985,790\n1,447,221\n1,668,253\n1,701,609\n1,588,333\n1,037,752\n582,367\n192,801\n29,719\n5,037\n4,930,943\n4,930,943\n401,797\n510,041\n723,200\n837,657\n849,573\n773,917\n492,879\n266,597\n66,262\n7,727\n1,293\n5,091,238\n5,091,238\n381,502\n475,749\n724,021\n830,596\n852,036\n814,416\n544,873\n315,770\n126,539\n21,992\n3,744\n\n\n2\n부산광역시\n3,513,777\n3,513,777\n267,227\n345,503\n456,514\n493,958\n568,218\n619,703\n432,899\n239,641\n79,128\n9,497\n1,489\n1,735,570\n1,735,570\n137,437\n181,499\n240,807\n252,411\n282,846\n299,943\n207,555\n105,634\n25,040\n2,078\n320\n1,778,207\n1,778,207\n129,790\n164,004\n215,707\n241,547\n285,372\n319,760\n225,344\n134,007\n54,088\n7,419\n1,169\n\n\n3\n대구광역시\n2,487,829\n2,487,829\n208,115\n289,590\n326,755\n342,633\n438,674\n419,653\n253,693\n148,884\n53,282\n6,007\n543\n1,237,291\n1,237,291\n107,230\n153,618\n179,517\n172,408\n216,253\n206,822\n120,190\n62,625\n17,216\n1,292\n120\n1,250,538\n1,250,538\n100,885\n135,972\n147,238\n170,225\n222,421\n212,831\n133,503\n86,259\n36,066\n4,715\n423\n\n\n4\n인천광역시\n2,925,815\n2,925,815\n271,758\n324,530\n402,113\n455,898\n516,105\n494,119\n255,834\n142,147\n54,650\n7,960\n701\n1,469,869\n1,469,869\n139,490\n167,985\n209,317\n234,355\n260,769\n251,005\n126,517\n61,342\n16,942\n1,959\n188\n1,455,946\n1,455,946\n132,268\n156,545\n192,796\n221,543\n255,336\n243,114\n129,317\n80,805\n37,708\n6,001\n513\n\n\n\n\n\n\n\n\nsubset = pop.iloc[1:18,[0,1,3,4,5,6,7,8,9,10,11,12,13]]\nsubset = subset.reset_index().iloc[:,1:]\nsubset\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n0\n서울특별시\n10,022,181\n783,299\n985,790\n1,447,221\n1,668,253\n1,701,609\n1,588,333\n1,037,752\n582,367\n192,801\n29,719\n5,037\n\n\n1\n부산광역시\n3,513,777\n267,227\n345,503\n456,514\n493,958\n568,218\n619,703\n432,899\n239,641\n79,128\n9,497\n1,489\n\n\n2\n대구광역시\n2,487,829\n208,115\n289,590\n326,755\n342,633\n438,674\n419,653\n253,693\n148,884\n53,282\n6,007\n543\n\n\n3\n인천광역시\n2,925,815\n271,758\n324,530\n402,113\n455,898\n516,105\n494,119\n255,834\n142,147\n54,650\n7,960\n701\n\n\n4\n광주광역시\n1,472,199\n143,700\n197,005\n198,686\n221,036\n258,049\n217,366\n127,348\n76,489\n28,346\n3,860\n314\n\n\n5\n대전광역시\n1,518,775\n145,049\n184,964\n210,749\n228,720\n267,008\n238,664\n134,281\n76,136\n29,005\n3,918\n281\n\n\n6\n울산광역시\n1,173,534\n116,241\n139,958\n158,615\n180,833\n211,988\n201,390\n100,468\n45,817\n16,011\n2,074\n139\n\n\n7\n세종특별자치시\n210,884\n29,825\n23,398\n23,043\n40,025\n37,370\n25,872\n15,614\n10,351\n4,718\n634\n34\n\n\n8\n경기도\n12,522,606\n1,251,234\n1,479,739\n1,644,870\n1,969,170\n2,302,937\n1,962,003\n1,027,712\n616,198\n232,931\n32,804\n3,008\n\n\n9\n강원도\n1,549,507\n123,275\n171,073\n184,802\n189,754\n250,407\n269,286\n171,452\n131,730\n49,542\n7,578\n608\n\n\n10\n충청북도\n1,583,952\n142,319\n179,628\n196,456\n216,258\n262,133\n260,270\n158,194\n114,586\n47,691\n5,977\n440\n\n\n11\n충청남도\n2,077,649\n197,236\n229,214\n244,233\n296,909\n333,108\n318,857\n212,781\n160,439\n74,759\n9,433\n680\n\n\n12\n전라북도\n1,869,711\n159,824\n217,813\n218,698\n232,517\n299,535\n295,583\n210,933\n155,007\n70,437\n8,725\n639\n\n\n13\n전라남도\n1,908,996\n158,142\n209,957\n206,551\n224,820\n291,730\n308,904\n224,235\n190,822\n82,190\n10,892\n753\n\n\n14\n경상북도\n2,702,826\n223,394\n277,327\n311,383\n347,557\n428,513\n456,781\n314,821\n229,763\n99,895\n12,658\n734\n\n\n15\n경상남도\n3,364,702\n317,867\n384,287\n394,794\n476,814\n580,967\n551,878\n337,382\n216,802\n92,498\n10,817\n596\n\n\n16\n제주특별자치도\n624,395\n63,183\n77,313\n73,565\n85,811\n110,642\n96,129\n57,880\n39,258\n17,326\n3,075\n213"
  },
  {
    "objectID": "project1.html#원본-숫자-안에-를-없애기-문자열을-숫자열로-바꾸기",
    "href": "project1.html#원본-숫자-안에-를-없애기-문자열을-숫자열로-바꾸기",
    "title": "project1",
    "section": "원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)",
    "text": "원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)\n\ncolumns = subset.columns[1:]\n\nfor col in columns:\n    subset[col] = subset[col].str.replace(',', '')\n    subset[col] = pd.to_numeric(subset[col])\n\nsubset\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n0\n서울특별시\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n\n\n1\n부산광역시\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n\n\n2\n대구광역시\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n\n\n3\n인천광역시\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n\n\n4\n광주광역시\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n\n\n5\n대전광역시\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n\n\n6\n울산광역시\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n\n\n7\n세종특별자치시\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n\n\n8\n경기도\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n\n\n9\n강원도\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n\n\n10\n충청북도\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n\n\n11\n충청남도\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n\n\n12\n전라북도\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n\n\n13\n전라남도\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n\n\n14\n경상북도\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n\n\n15\n경상남도\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n\n\n16\n제주특별자치도\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213"
  },
  {
    "objectID": "project1.html#각-지역마다-연령층-비율-계산하기",
    "href": "project1.html#각-지역마다-연령층-비율-계산하기",
    "title": "project1",
    "section": "각 지역마다 연령층 비율 계산하기",
    "text": "각 지역마다 연령층 비율 계산하기\n\nsubset['minor_ratio'] = round((subset.iloc[:,2]+subset.iloc[:,3])/subset.iloc[:,1]*100,2)\nsubset['youth_ratio'] = round((subset.iloc[:,4]+subset.iloc[:,5]+subset.iloc[:,6]+subset.iloc[:,7])/subset.iloc[:,1]*100,2)\nsubset['old_ratio'] = round((subset.iloc[:,8]+subset.iloc[:,9]+subset.iloc[:,10]+subset.iloc[:,11]+subset.iloc[:,12])/subset.iloc[:,1]*100,2)\nsubset\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n서울특별시\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n17.65\n63.91\n18.44\n\n\n1\n부산광역시\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n17.44\n60.86\n21.70\n\n\n2\n대구광역시\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n20.01\n61.41\n18.59\n\n\n3\n인천광역시\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n20.38\n63.85\n15.77\n\n\n4\n광주광역시\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n23.14\n60.80\n16.05\n\n\n5\n대전광역시\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n21.73\n62.23\n16.04\n\n\n6\n울산광역시\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n21.83\n64.15\n14.02\n\n\n7\n세종특별자치시\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n25.24\n59.90\n14.87\n\n\n8\n경기도\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n21.81\n62.92\n15.27\n\n\n9\n강원도\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n19.00\n57.71\n23.29\n\n\n10\n충청북도\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n20.33\n59.04\n20.64\n\n\n11\n충청남도\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n20.53\n57.43\n22.05\n\n\n12\n전라북도\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n20.20\n55.96\n23.84\n\n\n13\n전라남도\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n19.28\n54.06\n26.66\n\n\n14\n경상북도\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n18.53\n57.13\n24.34\n\n\n15\n경상남도\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n20.87\n59.57\n19.56\n\n\n16\n제주특별자치도\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213\n22.50\n58.64\n18.86"
  },
  {
    "objectID": "project1.html#subset에서-필요한-변수만-남기기",
    "href": "project1.html#subset에서-필요한-변수만-남기기",
    "title": "project1",
    "section": "subset에서 필요한 변수만 남기기",
    "text": "subset에서 필요한 변수만 남기기\n\nsubset2 = subset.iloc[:, [0,1,13,14,15]]\nsubset2 = subset2.rename(columns = {'행정기관' : 'region' , '총 인구수' : 'total_pop'})\nsubset2.head()\n\n\n\n\n\n\n\n\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n서울특별시\n10022181\n17.65\n63.91\n18.44\n\n\n1\n부산광역시\n3513777\n17.44\n60.86\n21.70\n\n\n2\n대구광역시\n2487829\n20.01\n61.41\n18.59\n\n\n3\n인천광역시\n2925815\n20.38\n63.85\n15.77\n\n\n4\n광주광역시\n1472199\n23.14\n60.80\n16.05\n\n\n\n\n\n\n\n\nsubset2['region'] == '서울특별시  '\n\n0      True\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\n14    False\n15    False\n16    False\nName: region, dtype: bool\n\n\nregion 컬럼의 값이 ’ ’ 공백이 포함되어 있음을 알 수 있다. 이 상태에서 merge하면 merge가 안됨.\n\nsubset2['region'] = subset2['region'].str.replace('세종특별자치시','세종특별시') \nsubset2['region'] = subset2['region'].str.replace('제주특별자치도','제주도')\nsubset2['region'] = subset2['region'].str.replace('  ','')\nsubset2\n\n\n\n\n\n\n\n\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n서울특별시\n10022181\n17.65\n63.91\n18.44\n\n\n1\n부산광역시\n3513777\n17.44\n60.86\n21.70\n\n\n2\n대구광역시\n2487829\n20.01\n61.41\n18.59\n\n\n3\n인천광역시\n2925815\n20.38\n63.85\n15.77\n\n\n4\n광주광역시\n1472199\n23.14\n60.80\n16.05\n\n\n5\n대전광역시\n1518775\n21.73\n62.23\n16.04\n\n\n6\n울산광역시\n1173534\n21.83\n64.15\n14.02\n\n\n7\n세종특별시\n210884\n25.24\n59.90\n14.87\n\n\n8\n경기도\n12522606\n21.81\n62.92\n15.27\n\n\n9\n강원도\n1549507\n19.00\n57.71\n23.29\n\n\n10\n충청북도\n1583952\n20.33\n59.04\n20.64\n\n\n11\n충청남도\n2077649\n20.53\n57.43\n22.05\n\n\n12\n전라북도\n1869711\n20.20\n55.96\n23.84\n\n\n13\n전라남도\n1908996\n19.28\n54.06\n26.66\n\n\n14\n경상북도\n2702826\n18.53\n57.13\n24.34\n\n\n15\n경상남도\n3364702\n20.87\n59.57\n19.56\n\n\n16\n제주도\n624395\n22.50\n58.64\n18.86"
  },
  {
    "objectID": "project1.html#market2와-subset-데이터-조인을-위해서-market2의-address_new에서-시도-값-분리해서-region-변수-만들기",
    "href": "project1.html#market2와-subset-데이터-조인을-위해서-market2의-address_new에서-시도-값-분리해서-region-변수-만들기",
    "title": "project1",
    "section": "market2와 subset 데이터 조인을 위해서 market2의 address_new에서 시/도 값 분리해서 ‘region’ 변수 만들기",
    "text": "market2와 subset 데이터 조인을 위해서 market2의 address_new에서 시/도 값 분리해서 ‘region’ 변수 만들기\n\nfirst_tokens=[]\n\nfor address in market2['address_road']:\n    first_token = address.split()[0]\n    first_tokens.append(first_token)\n    \nmarket2['region'] = first_tokens\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도"
  },
  {
    "objectID": "project1.html#market2-subset2-두-데이터셋-조인-비율에-대한-새로운-데이터-프레임-만들기",
    "href": "project1.html#market2-subset2-두-데이터셋-조인-비율에-대한-새로운-데이터-프레임-만들기",
    "title": "project1",
    "section": "market2, subset2 두 데이터셋 조인 (비율에 대한 새로운 데이터 프레임 만들기)",
    "text": "market2, subset2 두 데이터셋 조인 (비율에 대한 새로운 데이터 프레임 만들기)\n\nmarket_pop = pd.merge(market2, subset2, how='left', on='region')\nmarket_pop.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29"
  },
  {
    "objectID": "project1.html#market2와-subset2-조인한-데이터셋-저장하기-market_pop",
    "href": "project1.html#market2와-subset2-조인한-데이터셋-저장하기-market_pop",
    "title": "project1",
    "section": "market2와 subset2 조인한 데이터셋 저장하기 (market_pop)",
    "text": "market2와 subset2 조인한 데이터셋 저장하기 (market_pop)\n\nmarket_pop.to_excel(excel_writer='market_pop.xlsx', index=False)"
  },
  {
    "objectID": "project1.html#대-이상인-인구가-많으면-시장-갯수가-많이-형성되었을-것이다.-마켓-카운터-갯수-데이터-지역별-ratio-데이터-병합",
    "href": "project1.html#대-이상인-인구가-많으면-시장-갯수가-많이-형성되었을-것이다.-마켓-카운터-갯수-데이터-지역별-ratio-데이터-병합",
    "title": "project1",
    "section": "60대 이상인 인구가 많으면 시장 갯수가 많이 형성되었을 것이다. (마켓 카운터 갯수 데이터, 지역별 ratio 데이터 병합)",
    "text": "60대 이상인 인구가 많으면 시장 갯수가 많이 형성되었을 것이다. (마켓 카운터 갯수 데이터, 지역별 ratio 데이터 병합)\n\nmarket_pop['old_up'] = np.where(market_pop['old_ratio'] &gt;= market_pop['old_ratio'].mean(), '1' ,'0')\nmarket_pop['youth_up'] = np.where(market_pop['youth_ratio'] &gt;= market_pop['youth_ratio'].mean(), '1' ,'0')\nmarket_pop['minor_up'] = np.where(market_pop['minor_ratio'] &gt;= market_pop['minor_ratio'].mean(), '1' ,'0')\nmarket_pop.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\nold_up\nyouth_up\nminor_up\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n\n\n\n\n\n\n각 지역마다 60대 이상인 인구가 평균보다 큰지 작은지를 알아보고, 시장의 갯수가 얼마나 되는지 알아보기. (X)\n\nmarket_pop.groupby(['region','old_up']).agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\n\nold_market_count\n\n\nregion\nold_up\n\n\n\n\n\n강원도\n1\n58\n\n\n경기도\n0\n130\n\n\n경상남도\n0\n155\n\n\n경상북도\n1\n149\n\n\n광주광역시\n0\n26\n\n\n대구광역시\n0\n109\n\n\n대전광역시\n0\n27\n\n\n부산광역시\n1\n169\n\n\n서울특별시\n0\n216\n\n\n세종특별시\n0\n4\n\n\n울산광역시\n0\n40\n\n\n인천광역시\n0\n46\n\n\n전라남도\n1\n108\n\n\n전라북도\n1\n60\n\n\n제주도\n0\n25\n\n\n충청남도\n1\n58\n\n\n충청북도\n1\n59\n\n\n\n\n\n\n\n1인 것과 0인 것끼리 합쳐서 알아보기\n\nmarket_pop.groupby('old_up').agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\nold_market_count\n\n\nold_up\n\n\n\n\n\n0\n778\n\n\n1\n661\n\n\n\n\n\n\n\n0 : 60대 이상인 인구가 평균보다 작은 곳의 시장 수는 778개 (경기도, 경상남도, 광주광역시, 대구광역시, 대전광역시, 서울특별시, 세종특별시, 울산광역시, 인천광역시, 제주도) 1 : 60대 이상인 인구가 평균보다 큰 곳의 시장 수는 661개 (강원도, 경상북도, 부산광역시, 전라남도, 전라븍도, 충청남도, 충청북도) 60대 이상인 인구가 평균보다 큰 곳의 시장 수가 아닌 곳보다 적다. 딱히 60대 이상인 인구가 많은 지역이 시장 수가 많다고는 볼 수 없다. 그럼에도 불구하고 60대 이상 인구가 전통시장에서 다른 연령대에 비해 돈을 많이 쓴다면, 해당 지역에서 시장 수가 많이는 없어도 돈을 많이 쓴다고 볼 수 있다. (해당 지역에서 대형마트 등 경쟁사가 적다면 당연히 전통시장에 몰릴 수도 있음.)\n※ 지역별 점포수, 지역별 마켓수 따로 데이터 프레임 만들기, 인구 비율 데이터 프레임\n\nmarket_pop.groupby(['region','youth_up']).agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\n\nold_market_count\n\n\nregion\nyouth_up\n\n\n\n\n\n강원도\n0\n58\n\n\n경기도\n1\n130\n\n\n경상남도\n0\n155\n\n\n경상북도\n0\n149\n\n\n광주광역시\n1\n26\n\n\n대구광역시\n1\n109\n\n\n대전광역시\n1\n27\n\n\n부산광역시\n1\n169\n\n\n서울특별시\n1\n216\n\n\n세종특별시\n0\n4\n\n\n울산광역시\n1\n40\n\n\n인천광역시\n1\n46\n\n\n전라남도\n0\n108\n\n\n전라북도\n0\n60\n\n\n제주도\n0\n25\n\n\n충청남도\n0\n58\n\n\n충청북도\n0\n59\n\n\n\n\n\n\n\n\nmarket_pop.groupby('youth_up').agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\nold_market_count\n\n\nyouth_up\n\n\n\n\n\n0\n676\n\n\n1\n763\n\n\n\n\n\n\n\n0 : 20~50세 인구가 평균보다 작은 곳의 시장 수는 676개 (강원도, 경상남도, 경상북도, 세종특별시, 전라남도, 전라북도, 제주도, 충청남도, 충청북도) 1 : 20~50세 인구가 평균보다 큰 곳의 시장 수는 763개 (경기도, 광주광역시, 대구광역시, 대전광역시, 부산광역시, 서울특별시, 울산광역시, 인천광역시) 20~50세 인구가 평균보다 큰 곳의 시장 수가 아닌 곳보다 크다.\n\n\n\n\nlevel_group = market_pop.groupby(['old_up','level'],as_index=False).agg(market_count = ('market_name', 'count'))\nlevel_group\n\n\n\n\n\n\n\n\nold_up\nlevel\nmarket_count\n\n\n\n\n0\n0\nhigh\n395\n\n\n1\n0\nintermediate\n300\n\n\n2\n0\nlow\n83\n\n\n3\n1\nhigh\n435\n\n\n4\n1\nintermediate\n178\n\n\n5\n1\nlow\n48\n\n\n\n\n\n\n\n60대 이상 인구가 평균보다 적은 지역에서의 level별 시장 수 : 395 / 300 / 83 60대 이상 인구가 평균보다 많은 지역에서의 level별 시장 수 : 435 / 178 / 48\n\nlevel_group2 = market_pop.groupby(['youth_up','level'],as_index=False).agg(market_count = ('market_name', 'count'))\nlevel_group2\n\n\n\n\n\n\n\n\nyouth_up\nlevel\nmarket_count\n\n\n\n\n0\n0\nhigh\n501\n\n\n1\n0\nintermediate\n145\n\n\n2\n0\nlow\n30\n\n\n3\n1\nhigh\n329\n\n\n4\n1\nintermediate\n333\n\n\n5\n1\nlow\n101\n\n\n\n\n\n\n\n20~50세 인구가 평균보다 적은 지역에서의 level별 시장 수 : 501 / 145 / 30 20~50세 인구가 평균보다 많은 지역에서의 level별 시장 수 : 329 / 333 / 101\n젊은 인구가 많은 지역에서 low인 시장이 많다. -&gt; 개선해야 젊은 인구가 많이 간다라고 가도 되나?"
  },
  {
    "objectID": "project1.html#편의시설이-high-인데-인구-많은데야-인구-많으면-편의시설-좋아",
    "href": "project1.html#편의시설이-high-인데-인구-많은데야-인구-많으면-편의시설-좋아",
    "title": "project1",
    "section": "편의시설이 high 인데 인구 많은데야? 인구 많으면 편의시설 좋아?",
    "text": "편의시설이 high 인데 인구 많은데야? 인구 많으면 편의시설 좋아?\n\nmarket_pop.query('level == \"high\"').groupby('region', as_index=False).agg(market_count=('market_name', 'count'),pop = ('total_pop', 'min')).sort_values('pop',ascending=False)\n\n\n\n\n\n\n\n\nregion\nmarket_count\npop\n\n\n\n\n1\n경기도\n74\n12522606\n\n\n8\n서울특별시\n83\n10022181\n\n\n7\n부산광역시\n68\n3513777\n\n\n2\n경상남도\n110\n3364702\n\n\n11\n인천광역시\n21\n2925815\n\n\n3\n경상북도\n100\n2702826\n\n\n5\n대구광역시\n36\n2487829\n\n\n15\n충청남도\n44\n2077649\n\n\n12\n전라남도\n93\n1908996\n\n\n13\n전라북도\n53\n1869711\n\n\n16\n충청북도\n31\n1583952\n\n\n0\n강원도\n46\n1549507\n\n\n6\n대전광역시\n12\n1518775\n\n\n4\n광주광역시\n20\n1472199\n\n\n10\n울산광역시\n15\n1173534\n\n\n14\n제주도\n20\n624395\n\n\n9\n세종특별시\n4\n210884\n\n\n\n\n\n\n\n편의시설이 잘 되어있는 시장이 많은 주변으로 인구 수가 많이 형성되어있다고 보기 어려움."
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "project2_house price",
    "section": "",
    "text": "house price columns\n\n\n\n\n\n\n\n\n\n\n\n정은서\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "project2/columns/columns.html",
    "href": "project2/columns/columns.html",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')"
  },
  {
    "objectID": "project2/columns/columns.html#데이터-불러오기",
    "href": "project2/columns/columns.html#데이터-불러오기",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')"
  },
  {
    "objectID": "project2/columns/columns.html#모든-변수-결측치와-정보-확인",
    "href": "project2/columns/columns.html#모든-변수-결측치와-정보-확인",
    "title": "house price columns",
    "section": "0. 모든 변수 결측치와 정보 확인",
    "text": "0. 모든 변수 결측치와 정보 확인\n\npd.set_option('display.max_rows',None)\nnan_df = train_df.isna().sum()\nnan_df[nan_df&gt;0]\npd.reset_option('display.max_rows')\n\n\ntrain_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n\n\n‘Id’ : 수치컬럼에서 제외해야 함.\n‘MSSubClass’ : 수치컬럼으로 되어있는데, 범주컬럼임.\n‘LotFrontage’ : 259개 결측치는 집에 연결된 거리가 없어서 결측치인걸까? 그렇다면 0값으로 처리해주기.\n‘Alley’ : 1369개 결측치는 골목길이 없다는 것임."
  },
  {
    "objectID": "project2/columns/columns.html#saleprice-판매-가격",
    "href": "project2/columns/columns.html#saleprice-판매-가격",
    "title": "house price columns",
    "section": "1. ‘SalePrice’ : 판매 가격",
    "text": "1. ‘SalePrice’ : 판매 가격\n\ntrain_numeric_hist('SalePrice')\n\nprint(\"최소값 :\", train_df['SalePrice'].min())\nprint(\"최대값 :\", train_df['SalePrice'].max())\n\n\n\n\n\n\n\n\n최소값 : 34900\n최대값 : 755000\n\n\n이상치 있어보임. 100,000~200,000 달러가 제일 많아보임."
  },
  {
    "objectID": "project2/columns/columns.html#mssubclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "href": "project2/columns/columns.html#mssubclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "title": "house price columns",
    "section": "2. ‘MSSubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) <- 수치컬럼으로 되어 있지만 범주 컬럼임.",
    "text": "2. ‘MSSubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) &lt;- 수치컬럼으로 되어 있지만 범주 컬럼임.\n\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype(str)  # 범주 컬럼 처리\ntrain_cat_count('MSSubClass')\n\ntrain_cat_hist('MSSubClass')\n\nprint(train_df['MSSubClass'].value_counts().sort_index())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMSSubClass\n120     87\n160     63\n180     10\n190     30\n20     536\n30      69\n40       4\n45      12\n50     144\n60     299\n70      60\n75      16\n80      58\n85      20\n90      52\nName: count, dtype: int64\n\n\n    20  1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)\n    30  1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)\n    40  다락방이 있는 1층짜리 집 &lt;- 데이터 4개밖에 없음 (1926,1930,1949,1979)\n    45  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집\n    50  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집\n    60  1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)\n    70  1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)\n    75  3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집\n    80  각 층이 엇갈려있는 집\n    85  현관 앞에 계단으로 층이 엇갈려있는 집\n    90  다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)\n   120  1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음)\n   150  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)\n   160  1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)\n   180  연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집\n   190  한 집을 두 집으로 개조해서 쪼갠 집\n\ncols = train_df.columns\ntrain_df[train_df['MSSubClass'] == 20]['YearBuilt'].sort_values()  # 'MSSubClass'=20은 1938, 1946~2010에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 30]['YearBuilt'].sort_values()  # 'MSSubClass'=30은 1885, 1910~1945, 1948에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 60]['YearBuilt'].sort_values()  # 'MSSubClass'=60은 1946~2009에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 70]['YearBuilt'].sort_values()  # 'MSSubClass'=70은 1872~1945에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 120]['YearBuilt'].sort_values()   # 1976~2009에 지어진 집임.\n\nSeries([], Name: YearBuilt, dtype: int64)"
  },
  {
    "objectID": "project2/columns/columns.html#mszoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "href": "project2/columns/columns.html#mszoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "title": "house price columns",
    "section": "3. ‘MSZoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)",
    "text": "3. ‘MSZoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)\n\ntrain_cat_count('MSZoning')\ntrain_cat_hist('MSZoning')\n\nprint(train_df['MSZoning'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMSZoning\nRL         1151\nRM          218\nFV           65\nRH           16\nC (all)      10\nName: count, dtype: int64\n\n\n   A    농업\n   C    상업\n   FV   수상 거주지\n   I    산업\n   RH   높은 밀도 거주지\n   RL   낮은 밀도 거주지\n   RP   Residential Low Density Park \n   RM  중간 밀도 거주지\n=&gt; 데이터상 RL, RM, RH, FV, C(all) 만 있음.\n빈도를 확인해보면, 제일 많은게 RL(낮은 밀도 거주지)임.\n범주별 분포를 보면, 범주마다 집값이 살짝 다른 것 같음. 보라색 분포에 이상치도 존재하는 것 같다."
  },
  {
    "objectID": "project2/columns/columns.html#lotfrontage-집과-연결된-거리의-직선-길이-feet",
    "href": "project2/columns/columns.html#lotfrontage-집과-연결된-거리의-직선-길이-feet",
    "title": "house price columns",
    "section": "4. ‘LotFrontage’ : 집과 연결된 거리의 직선 길이 (feet)",
    "text": "4. ‘LotFrontage’ : 집과 연결된 거리의 직선 길이 (feet)\n\ntrain_numeric_hist('LotFrontage')\n\ntrain_rel_xy('LotFrontage')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n결측치 259개 있음. &lt;- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기.\nLotFrontage의 분포를 보면 이상치 있어보임. LotFrontage과 SalePrice의 관계를 보면 많이 퍼져있기는한데 이상치를 제외하면 양의 관계가 있는 것 같기도 함.\n\ntrain_cat_rel_xy('LotFrontage', 'MSZoning') # 범주별로 y값과의 관계를 알아봄.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'LotFrontage', y='SalePrice', hue='MSZoning')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'LotFrontage', y='LotArea', size='SalePrice')\nplt.show()\n\n\n\n\n\n\n\n\n\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype(str)\nplt.clf()\nsns.scatterplot(data=train_df, x = 'MSSubClass', y='Neighborhood', size='SalePrice')\nplt.show()"
  },
  {
    "objectID": "project2/columns/columns.html#lotarea-부지-크기-square-feet",
    "href": "project2/columns/columns.html#lotarea-부지-크기-square-feet",
    "title": "house price columns",
    "section": "5. ‘LotArea’ : 부지 크기 (square feet)",
    "text": "5. ‘LotArea’ : 부지 크기 (square feet)\n\ntrain_numeric_hist('LotArea')\n\ntrain_rel_xy('LotArea')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLotArea의 분포를 보면 이상치 있어보임. LotArea과 SalePrice의 관계를 보면 일부의 집 때문에 굉장히 퍼지는 관계임.\n\ntrain_cat_rel_xy('LotArea', 'MSZoning') # 범주별로 y값과의 관계를 알아봄."
  },
  {
    "objectID": "project2/columns/columns.html#street-집에-접근-도로-유형-자갈길인지-포장길인지",
    "href": "project2/columns/columns.html#street-집에-접근-도로-유형-자갈길인지-포장길인지",
    "title": "house price columns",
    "section": "6. ‘Street’ : 집에 접근 도로 유형 (자갈길인지, 포장길인지)",
    "text": "6. ‘Street’ : 집에 접근 도로 유형 (자갈길인지, 포장길인지)\n\ntrain_cat_count('Street')\ntrain_cat_hist('Street')\n\nprint(train_df['Street'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStreet\nPave    1454\nGrvl       6\nName: count, dtype: int64\n\n\n   Grvl 자갈길 \n   Pave 포장길\n자갈길이 6개밖에 안됨. 범주별 분포를 보면, 포장길에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#alley-집에-접근-골목-유형-자갈-골목길인지-포장-골목길인지",
    "href": "project2/columns/columns.html#alley-집에-접근-골목-유형-자갈-골목길인지-포장-골목길인지",
    "title": "house price columns",
    "section": "7. ‘Alley’ : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)",
    "text": "7. ‘Alley’ : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)\n\ntrain_cat_count('Alley')\ntrain_cat_hist('Alley')\n\nprint(train_df['Alley'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlley\nGrvl    50\nPave    41\nName: count, dtype: int64\n\n\n   Grvl 자갈 골목길\n   Pave 포장된 골목길\n   NA   골목길 없음\n1369 결측치 있음. &lt;- 이게 다 골목길 없다는 것임. 범주별 분포가 많이 다름. &lt;- 범주별로 집 가격 차이가 있을 것임."
  },
  {
    "objectID": "project2/columns/columns.html#lotshape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "href": "project2/columns/columns.html#lotshape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "title": "house price columns",
    "section": "8. ‘LotShape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)",
    "text": "8. ‘LotShape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)\n\ntrain_cat_count('LotShape')\ntrain_cat_hist('LotShape')\n\nprint(train_df['LotShape'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLotShape\nReg    925\nIR1    484\nIR2     41\nIR3     10\nName: count, dtype: int64\n\n\n   Reg  보통\n   IR1  약간 보통이 아님\n   IR2  중간 정도 보통이 아님\n   IR3  보통이 아님\n일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도…?\n범주별 분포가 크게 다른 것 같진 않음. 근데 파란색분포는 살짝 다른 것 같음.\n주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#landcontour-집의-평탄-정도",
    "href": "project2/columns/columns.html#landcontour-집의-평탄-정도",
    "title": "house price columns",
    "section": "9. ‘LandContour’ : 집의 평탄 정도",
    "text": "9. ‘LandContour’ : 집의 평탄 정도\n\ntrain_cat_count('LandContour')\ntrain_cat_hist('LandContour')\n\n\nprint(train_df['LandContour'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLandContour\nLvl    1311\nBnk      63\nHLS      50\nLow      36\nName: count, dtype: int64\n\n\n   Lvl  평평한 것에 가까움  \n   Bnk  기움 - Quick and significant rise from street grade to building\n   HLS  비탈 - Significant slope from side to side\n   Low 움푹한 곳\n평평한 것에 가까운게 많음. 범주별 분포 차이가 없어 보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#utilities-전기-가스-수도-하수도-사용-가능-여부",
    "href": "project2/columns/columns.html#utilities-전기-가스-수도-하수도-사용-가능-여부",
    "title": "house price columns",
    "section": "10. ‘Utilities’ : 전기, 가스, 수도, 하수도 사용 가능 여부",
    "text": "10. ‘Utilities’ : 전기, 가스, 수도, 하수도 사용 가능 여부\n\ntrain_cat_count('Utilities')\n\nplt.clf()\nsns.histplot(train_df[train_df['Utilities']=='AllPub']['SalePrice'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSewr']['SalePrice'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSeWa']['SalePrice'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='ELO']['SalePrice'], stat='density')\nplt.title('Utilities 범주별, SalePrice 분포')\nplt.tight_layout()\nplt.show()\n\nprint(train_df['Utilities'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUtilities\nAllPub    1459\nNoSeWa       1\nName: count, dtype: int64\n\n\n   AllPub   전기, 가스, 물, 하수도  \n   NoSewr   전기, 가스, 물 (정화조)\n   NoSeWa   전기, 가스\n   ELO      전기\n전기, 가스만 사용가능한 집이 1개만 있고, 그 외에는 모두 사용 가능한 집임. 이상치 존재해 보임."
  },
  {
    "objectID": "project2/columns/columns.html#lotconfig-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "href": "project2/columns/columns.html#lotconfig-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "title": "house price columns",
    "section": "11. ‘LotConfig’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)",
    "text": "11. ‘LotConfig’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)\n\ntrain_cat_count('LotConfig')\n\ntrain_cat_hist('LotConfig')\n\nprint(train_df['LotConfig'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLotConfig\nInside     1052\nCorner      263\nCulDSac      94\nFR2          47\nFR3           4\nName: count, dtype: int64\n\n\n   Inside   안쪽 부지\n   Corner   코너 부지\n   CulDSac  출입하는 길이 하나인 곳\n   FR2      도로.강을 향한 면이 2곳\n   FR3      도로.강을 향한 면이 3곳\n범주별로 분포 차이가 없어보임. 초록색, 주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#landslope-집-토지-경사-경사가-약간인지-심각한지-등",
    "href": "project2/columns/columns.html#landslope-집-토지-경사-경사가-약간인지-심각한지-등",
    "title": "house price columns",
    "section": "12. ‘LandSlope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)",
    "text": "12. ‘LandSlope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)\n\ntrain_cat_count('LandSlope')\ntrain_cat_hist('LandSlope')\n\nprint(train_df['LandSlope'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLandSlope\nGtl    1382\nMod      65\nSev      13\nName: count, dtype: int64\n\n\n   Gtl  약간 경사\n   Mod  보통 경사\n   Sev  심한 경사\n경사가 심하면 건축비용이 많이 든다길래 집값에 차이가 있을 줄 알았는데, 범주별로 분포의 차이가 없어보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#neighborhood-physical-locations-within-ames-city-limits-집-위치",
    "href": "project2/columns/columns.html#neighborhood-physical-locations-within-ames-city-limits-집-위치",
    "title": "house price columns",
    "section": "13. ‘Neighborhood’ : Physical locations within Ames city limits (집 위치)",
    "text": "13. ‘Neighborhood’ : Physical locations within Ames city limits (집 위치)\n\ntrain_cat_count('Neighborhood')\ntrain_cat_hist('Neighborhood')\nplt.clf()\nsns.countplot(data=train_df, x='Neighborhood')\nplt.xticks(rotation = 50)\nplt.show()\n\n\nb = train_df['Neighborhood'].unique()\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[1]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[2]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[3]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[4]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[5]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[6]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[7]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[8]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[9]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[11]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[12]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[13]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[14]]['SalePrice'], stat='density')\nplt.title('Neighborhood 범주별, SalePrice 분포')\nplt.show()\n\nprint(train_df['Neighborhood'].value_counts().sort_index())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeighborhood\nBlmngtn     17\nBlueste      2\nBrDale      16\nBrkSide     58\nClearCr     28\nCollgCr    150\nCrawfor     51\nEdwards    100\nGilbert     79\nIDOTRR      37\nMeadowV     17\nMitchel     49\nNAmes      225\nNPkVill      9\nNWAmes      73\nNoRidge     41\nNridgHt     77\nOldTown    113\nSWISU       25\nSawyer      74\nSawyerW     59\nSomerst     86\nStoneBr     25\nTimber      38\nVeenker     11\nName: count, dtype: int64\n\n\n   Blmngtn  Bloomington Heights\n   Blueste  Bluestem\n   BrDale   Briardale\n   BrkSide  Brookside\n   ClearCr  Clear Creek\n   CollgCr  College Creek\n   Crawfor  Crawford\n   Edwards  Edwards\n   Gilbert  Gilbert\n   IDOTRR   Iowa DOT and Rail Road\n   MeadowV  Meadow Village\n   Mitchel  Mitchell\n   Names    North Ames\n   NoRidge  Northridge\n   NPkVill  Northpark Villa\n   NridgHt  Northridge Heights\n   NWAmes   Northwest Ames\n   OldTown  Old Town\n   SWISU    South & West of Iowa State University\n   Sawyer   Sawyer\n   SawyerW  Sawyer West\n   Somerst  Somerset\n   StoneBr  Stone Brook\n   Timber   Timberland\n   Veenker  Veenker\n분포 차이가 있는 지역이 있는 것 같음. &lt;- 특정 지역은 집값의 차이가 있다고 볼 수 있음. 집값이 비슷한 지역끼리 묶어서 분석해볼 수도 있을 것 같음.\n빨간색, 파란색 분포에서 이상치가 있어보임.\n보라색, 하늘색, 주황색, 회색, 분홍색 지역은 특정 집값에 몰려있는 것 같음.\n집 데이터가 가장 많은 지역은 NridgHt임. 그 다음이 CollgCr임.\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['SalePrice'], stat='density')\nplt.title('Neighborhood 범주별, SalePrice 분포')\nplt.show()\n\n\n\n\n\n\n\n\n집 데이터가 가장 많은 두 지역을 보면 집값 차이가 큼"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "about.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "about.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "about.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "href": "about.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "title": "hw1",
    "section": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.",
    "text": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nimport numpy as np\n\n# 가격 평균\nprint(\"가격 평균 : \",np.mean(df['가격']))\n\n#판매량 평균\nprint(\"판매량 평균 : \",np.mean(df['판매량']))\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0"
  },
  {
    "objectID": "about.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "about.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_copy = df.copy()\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "about.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "about.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_copy=df_copy.rename(columns={'cty' : 'city', 'hwy' : 'highway'})\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "about.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "href": "about.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "title": "hw1",
    "section": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.",
    "text": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\ndf_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "about.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "about.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('midwest.csv')\nmidwest.head()\n\n#pd.set_option('display.max_columns', None)\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns\n\n\n\n\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n결측치가 하나도 없는 데이터이다. 범주 컬럼은 3개이고, 그 외에는 다 수치컬럼이다."
  },
  {
    "objectID": "about.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "href": "about.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "title": "hw1",
    "section": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정",
    "text": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns"
  },
  {
    "objectID": "about.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "about.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['pct'] = (midwest['asian']/midwest['total'])*100\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\nmidwest['pct'].plot.hist()\nplt.show()"
  },
  {
    "objectID": "about.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "href": "about.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "title": "hw1",
    "section": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.",
    "text": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n\nprint( \"아시아 인구 백분율 전체 평균 :\",np.mean(midwest['pct']) )\n\n아시아 인구 백분율 전체 평균 : 0.4872461834357345\n\n\n\nmidwest['size'] = np.where(midwest['pct'] &gt; np.mean(midwest['pct']) , 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "about.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "href": "about.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "title": "hw1",
    "section": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.",
    "text": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nplt.clf()\nmidwest['size'].value_counts().plot.bar(rot=0)\nplt.show()"
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "KB데이터",
    "section": "",
    "text": "60대 이상 소비자를 타켓으로 어느 지역을 활성화하는게 효과적일까?"
  },
  {
    "objectID": "presentation.html#연령-구간별-인구-비율-계산",
    "href": "presentation.html#연령-구간별-인구-비율-계산",
    "title": "KB데이터",
    "section": "(연령 구간별 인구 비율 계산)",
    "text": "(연령 구간별 인구 비율 계산)\n\nmarket_pop['pct_under20'] = round(market_pop['under20'] / market_pop['total_pop'] * 100, 1) #미성년자 비율 추가 + 소숫점 정리\nmarket_pop['pct_2050'] = round(market_pop['2050'] / market_pop['total_pop'] * 100, 1)\nmarket_pop['pct_over60'] = round(market_pop['over60'] / market_pop['total_pop'] * 100, 1)"
  },
  {
    "objectID": "presentation.html#시장.점포-1개-당-60대-이상-인구-비율-계산",
    "href": "presentation.html#시장.점포-1개-당-60대-이상-인구-비율-계산",
    "title": "KB데이터",
    "section": "(시장.점포 1개 당 60대 이상 인구 비율 계산)",
    "text": "(시장.점포 1개 당 60대 이상 인구 비율 계산)\n\nmarket_pop['old_per_market'] = round(market_pop['over60'] / market_pop['market_count'], 1)\nmarket_pop['old_per_store'] = round(market_pop['over60'] / market_pop['store_sum'], 1)"
  },
  {
    "objectID": "presentation.html#대-이상-인구-비율이-평균보다-큰-지역-작은-지역-구분",
    "href": "presentation.html#대-이상-인구-비율이-평균보다-큰-지역-작은-지역-구분",
    "title": "KB데이터",
    "section": "(60대 이상 인구 비율이 평균보다 큰 지역, 작은 지역 구분)",
    "text": "(60대 이상 인구 비율이 평균보다 큰 지역, 작은 지역 구분)\n\n# 60대 이상 비율의 평균을 구한 뒤 그것보다 높거나 낮다는것 표시.\nmarket_pop['over60_mean_updown'] = \\\n  np.where(market_pop['pct_over60'] &gt;= market_pop['pct_over60'].mean(), 'UP', 'DOWN')"
  },
  {
    "objectID": "presentation.html#평균-기준으로-한-근거-60대-이상-박스플롯",
    "href": "presentation.html#평균-기준으로-한-근거-60대-이상-박스플롯",
    "title": "KB데이터",
    "section": "평균 기준으로 한 근거 : 60대 이상 박스플롯",
    "text": "평균 기준으로 한 근거 : 60대 이상 박스플롯\n\npx.box(data_frame = market_pop, y = 'pct_over60')"
  },
  {
    "objectID": "presentation.html#온누리-상품권을-사용하는-시장-수",
    "href": "presentation.html#온누리-상품권을-사용하는-시장-수",
    "title": "KB데이터",
    "section": "(온누리 상품권을 사용하는 시장 수)",
    "text": "(온누리 상품권을 사용하는 시장 수)\n\nmarket_pop['pct_certificate'] = \\\n round(market_pop['certificate_count'] / market_pop['market_count'] *100, 1)\n\n\nmarket_pop.head()\n\n\n\n\n\n\n\n\nregion\nmarket_count\nstore_sum\ncertificate_count\ntotal_pop\nunder20\n2050\nover60\npct_under20\npct_2050\npct_over60\nold_per_market\nold_per_store\nover60_mean_updown\npct_certificate\n\n\n\n\n0\n강원도\n58\n6811\n54\n1549507\n294348\n894249\n360910\n19.0\n57.7\n23.3\n6222.6\n53.0\nUP\n93.1\n\n\n1\n경기도\n130\n18977\n121\n12522606\n2730973\n7878980\n1912653\n21.8\n62.9\n15.3\n14712.7\n100.8\nDOWN\n93.1\n\n\n2\n경상남도\n155\n18156\n102\n3364702\n702154\n2004453\n658095\n20.9\n59.6\n19.6\n4245.8\n36.2\nUP\n65.8\n\n\n3\n경상북도\n149\n16582\n106\n2702826\n500721\n1544234\n657871\n18.5\n57.1\n24.3\n4415.2\n39.7\nUP\n71.1\n\n\n4\n광주광역시\n26\n3411\n25\n1472199\n340705\n895137\n236357\n23.1\n60.8\n16.1\n9090.7\n69.3\nDOWN\n96.2"
  },
  {
    "objectID": "posts/hw7/index.html",
    "href": "posts/hw7/index.html",
    "title": "hw6",
    "section": "",
    "text": "슬통 자동자는 매해 출시되는 신형 자동차의 에너지 소비효율 등급을 1등급으로 유지하고 있다. 22 년 개발된 신형 모델이 한국 자동차 평가원에서 설정한 에너지 소비 효율등급 1등급을 받을 수 있을지 검정하려한다. 평가원에 따르면 1등급의 기준은 평균 복합 에너지 소비효율이 16.0 이상인 경우 부여 한다고 한다. 다음은 신형 자동차 15대의 복합 에너지소비효율 측정한 결과이다. 15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804\n표본에 의하여 판단해볼때, 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있을지 판단해보시오. (유의수준 1%로 설정)"
  },
  {
    "objectID": "posts/hw7/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "href": "posts/hw7/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "title": "hw6",
    "section": "2. 검정을 위한 가설을 명확하게 서술하시오.",
    "text": "2. 검정을 위한 가설을 명확하게 서술하시오.\n\n\nH0 : mu(신형 자동차의 평균 복합 에너지 소비효율 평균) &gt;= 16.0 (mu0)\nH1 : mu(신형 자동차의 평균 복합 에너지 소비효율 평균) &lt; 16.0 (mu0)"
  },
  {
    "objectID": "posts/hw7/index.html#검정통계량-계산하시오.",
    "href": "posts/hw7/index.html#검정통계량-계산하시오.",
    "title": "hw6",
    "section": "3. 검정통계량 계산하시오.",
    "text": "3. 검정통계량 계산하시오.\n\nimport numpy as np\nx = np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,\n15.382, 16.709, 16.804])\nx_bar = x.mean()\nsample_std = x.std(ddof=1)\n\nz = (x_bar - 16)/ (sample_std/np.sqrt(len(x)))\nprint(\"검정통계량 :\",z)\n\n검정통계량 : -1.8500447456376756"
  },
  {
    "objectID": "posts/hw7/index.html#pvalue을-구하세요.",
    "href": "posts/hw7/index.html#pvalue을-구하세요.",
    "title": "hw6",
    "section": "4. p‑value을 구하세요.",
    "text": "4. p‑value을 구하세요.\n\nfrom scipy.stats import t\nprint(\"p-value :\",t.cdf(z, df=len(x) -1))\n\np-value : 0.042762417664207845"
  },
  {
    "objectID": "posts/hw7/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "href": "posts/hw7/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "title": "hw6",
    "section": "6. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.",
    "text": "6. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.\n\nt0025 = t.ppf(0.975, df=15-1)\nprint(\"95% 신뢰구간 : (\",x_bar - t0025*sample_std/np.sqrt(len(x)) , \",\", x_bar + t0025*sample_std/np.sqrt(len(x)), \")\")\n\n95% 신뢰구간 : ( 14.988864240339733 , 16.074602426326933 )"
  },
  {
    "objectID": "posts/hw6/index.html#데이터-불러오기",
    "href": "posts/hw6/index.html#데이터-불러오기",
    "title": "hw5",
    "section": "",
    "text": "import pandas as pd\nwelfare = pd.read_spss('../../../Doit_Python/Data/Koweps_hpwc14_2019_beta2.sav')\nwelfare.head()\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n5 rows × 830 columns"
  },
  {
    "objectID": "posts/hw6/index.html#필요한-데이터만-가져오기",
    "href": "posts/hw6/index.html#필요한-데이터만-가져오기",
    "title": "hw5",
    "section": "",
    "text": "import numpy as np\ndf = welfare[['h14_g3','p1402_8aq1']]\ndf = df.rename(columns = {'h14_g3' : 'sex',\n                           'p1402_8aq1' : 'income' })\ndf = df.dropna(subset='income')\ndf['sex'] = np.where(df['sex'] == 1, 'male', 'female')\ndf.head()\n\n\n\n\n\n\n\n\nsex\nincome\n\n\n\n\n2\nmale\n107.0\n\n\n3\nmale\n192.0\n\n\n7\nfemale\n27.0\n\n\n8\nfemale\n27.0\n\n\n14\nmale\n338.0"
  },
  {
    "objectID": "posts/hw6/index.html#신뢰구간-구하기",
    "href": "posts/hw6/index.html#신뢰구간-구하기",
    "title": "hw5",
    "section": "",
    "text": "male_income = df.loc[df['sex']=='male', 'income']\nfemale_income = df.loc[df['sex'] == 'female', 'income']\nmale_bar = male_income.mean()\nfemale_bar = female_income.mean()\nmale_scale = np.sqrt(male_income.var(ddof=1))\nfemale_scale = np.sqrt(female_income.var(ddof=1))\nmale_n = len(male_income)\nfemale_n = len(female_income)\n\nfrom scipy.stats import norm\n\nz0025 = norm.ppf(0.975, loc=0 , scale=1)\nmale_a = male_bar + z0025*male_scale/np.sqrt(male_n)\nmale_b = male_bar - z0025*male_scale/np.sqrt(male_n)\nprint(\"male의 오른쪽 신뢰구간 위치 :\", male_a)\nprint(\"male의 왼쪽 신뢰구간 위치 :\", male_b)\n\nfemale_a = female_bar + z0025*female_scale/np.sqrt(female_n)\nfemale_b = female_bar - z0025*female_scale/np.sqrt(female_n)\nprint(\"female의 오른쪽 신뢰구간 위치 :\", female_a)\nprint(\"female의 왼쪽 신뢰구간 위치 :\", female_b)\n\nmale의 오른쪽 신뢰구간 위치 : 357.96254968365116\nmale의 왼쪽 신뢰구간 위치 : 340.11259229974775\nfemale의 오른쪽 신뢰구간 위치 : 191.7557368532799\nfemale의 왼쪽 신뢰구간 위치 : 180.83045468346845"
  },
  {
    "objectID": "posts/hw6/index.html#groupby로-성별별-평균-income-데이터-만들기",
    "href": "posts/hw6/index.html#groupby로-성별별-평균-income-데이터-만들기",
    "title": "hw5",
    "section": "",
    "text": "sex_income = df.groupby('sex', as_index=False).agg(mean_income = ('income','mean'))\nsex_income\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571"
  },
  {
    "objectID": "posts/hw6/index.html#성별별-평균-income-데이터로-막대그래프-그리고-신뢰구간-그리기",
    "href": "posts/hw6/index.html#성별별-평균-income-데이터로-막대그래프-그리고-신뢰구간-그리기",
    "title": "hw5",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.barplot(data=sex_income , x='sex', y='mean_income')\nplt.plot([0,0], [female_a,female_b], color='red')\nplt.plot([1,1], [male_a, male_b], color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw5/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.-n으로-구하는-방법-n-1로-구하는-방법",
    "href": "posts/hw5/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.-n으로-구하는-방법-n-1로-구하는-방법",
    "title": "hw4",
    "section": "",
    "text": "from scipy.stats import uniform\nimport numpy as np\nx = uniform.rvs(loc=3, scale=4, size=20)\nx_bar = np.mean(x)\ns_2_1 = sum((x-x_bar)**2)/(len(x)-1)  # n-1로 표본 분산 구하는 방법1\ns_2_2 = x.var(ddof=1)  # n-1로 표본 분산 구하는 방법2\ns_2_3 = np.var(x, ddof=1)  # n-1로 표본 분산 구하는 방법3\n\nprint(\"s_2_1 : \",s_2_1)\nprint(\"s_2_2 : \",s_2_2)\nprint(\"s_2_3 : \",s_2_3)\n\nk_2_1 = sum((x-x_bar)**2)/len(x)  # n로 표본 분산 구하는 방법1\nk_2_2 = x.var()  # n로 표본 분산 구하는 방법2\nk_2_3 = np.var(x)  # n로 표본 분산 구하는 방법3\n\nprint(\"k_2_1 : \",k_2_1)\nprint(\"k_2_2 : \",k_2_2)\nprint(\"k_2_3 : \",k_2_3)\n\ns_2_1 :  1.2815850339277062\ns_2_2 :  1.2815850339277062\ns_2_3 :  1.2815850339277062\nk_2_1 :  1.2175057822313209\nk_2_2 :  1.2175057822313209\nk_2_3 :  1.2175057822313209\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20) )**2).sum(axis=1)/(20 -1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#mpg-데이터의-cty도시연비와-hwy고속도로-연비-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-cty-y축은-hwy로-된-산점도를-만들어보세요.",
    "href": "posts/hw4/index.html#mpg-데이터의-cty도시연비와-hwy고속도로-연비-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-cty-y축은-hwy로-된-산점도를-만들어보세요.",
    "title": "hw3",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.scatterplot(data = mpg, x='cty', y='hwy')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#미국의-지역별-인구통계-정보를-담은-midwest.csv를-이용해-전체-인구와-아시아인-인구-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-poptotal전체-인구-y축은-popasian아시아인-인구으로-된-산점도를-만들어-보세요.-전체-인구는-50만-명-이하-아시아인-인구는-1만-명-이하인-지역만-산점도에-표시되게-설정하세요.",
    "href": "posts/hw4/index.html#미국의-지역별-인구통계-정보를-담은-midwest.csv를-이용해-전체-인구와-아시아인-인구-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-poptotal전체-인구-y축은-popasian아시아인-인구으로-된-산점도를-만들어-보세요.-전체-인구는-50만-명-이하-아시아인-인구는-1만-명-이하인-지역만-산점도에-표시되게-설정하세요.",
    "title": "hw3",
    "section": "미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.",
    "text": "미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv('../../midwest.csv')\n\nplt.clf()\nsns.scatterplot(data=midwest , x= 'poptotal' , y='popasian').set(xlim = [0,500000], ylim=[0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#어떤-회사에서-생산한-suv-차종의-도시-연비가-높은지-알아보려고-합니다.-suv-차종을-대상으로-cty도시-연비-평균이-가장-높은-회사-다섯-곳을-막대-그래프로-표현해-보세요.-막대는-연비가-높은-순으로-정렬하세요.",
    "href": "posts/hw4/index.html#어떤-회사에서-생산한-suv-차종의-도시-연비가-높은지-알아보려고-합니다.-suv-차종을-대상으로-cty도시-연비-평균이-가장-높은-회사-다섯-곳을-막대-그래프로-표현해-보세요.-막대는-연비가-높은-순으로-정렬하세요.",
    "title": "hw3",
    "section": "어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.",
    "text": "어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nmpg_group = mpg.query(\"category == 'suv'\").groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).sort_values('cty_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group , x='manufacturer', y='cty_mean')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#자동차-중에-어떤-category자동차-종류가-많은지-알아보려고-합니다.-sns.barplot을-이용해-자동차-종류별-빈도를-표현한-막대-그래프를-만들어-보세요.-막대는-빈도가-높은-순으로-정렬하세요.",
    "href": "posts/hw4/index.html#자동차-중에-어떤-category자동차-종류가-많은지-알아보려고-합니다.-sns.barplot을-이용해-자동차-종류별-빈도를-표현한-막대-그래프를-만들어-보세요.-막대는-빈도가-높은-순으로-정렬하세요.",
    "title": "hw3",
    "section": "자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.",
    "text": "자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nmpg_group2 = mpg.groupby('category',as_index=False).agg(category_count = ('category', 'count') ).sort_values('category_count' , ascending = False)\nplt.clf()\nsns.barplot(data=mpg_group2, x='category', y='category_count')\nplt.show()"
  }
]