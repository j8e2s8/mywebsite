[
  {
    "objectID": "project2/index.html",
    "href": "project2/index.html",
    "title": "Recent posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nhouse price columns\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nNorth_Ames\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhouse price columns\n\n\n\n정은서\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "project2/columns2/columns2.html",
    "href": "project2/columns2/columns2.html",
    "title": "columns2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')\n\n함수\n\nWxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n\n# scatter 하려면 범주를 수치화하기\n                              \ndef train_cat_rel_cxy(col1, col2):  # col1 : 범주, col2:범주\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col1 + \"의\" + col2 + \"범주별 SalePrice와의 관계 비교\"\n    plt.title(a)\n    plt.tight_layout()\n    cats = train_df[col2].value_counts().sort_values(ascending=False).index\n    \n    for i in range(len(cats)):\n        a = train_df[train_df[col2]==cats[i]][[col1,'SalePrice']]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x=col1, y='SalePrice', color=WxColourDB[n])  # 색 달라져야함\n        plt.show()\n\n각 지역별 확인\n\nWxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n\ncats = train_df['Neighborhood'].value_counts().sort_values(ascending=False).index\nfor i in range(len(cats)):\n        plt.clf()\n        plt.rcParams['font.family'] = 'Malgun Gothic'\n        plt.rcParams['axes.unicode_minus'] = False\n        a = \"Neighborhood '\" + cats[i] +\"' 지역의 MSSubClass과 SalePrice 관계\"\n        plt.title(a)\n        plt.ylim([0,800000])\n        plt.xlim([15,195])\n        plt.tight_layout()\n        a = train_df[train_df['Neighborhood']==cats[i]][['MSSubClass','SalePrice']]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x='MSSubClass', y='SalePrice', color=WxColourDB[n])  # 색 달라져야함\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n누적으로 확인\n\ntrain_cat_rel_cxy('MSSubClass', 'Neighborhood')  # col1 : 범주, col2:범주"
  },
  {
    "objectID": "project2.html",
    "href": "project2.html",
    "title": "project2_house price",
    "section": "",
    "text": "house price columns\n\n\n\n\n\n\n\n\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nhouse price columns\n\n\n\n\n\n\n\n\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nNorth_Ames\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRecent posts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "project2/columns/columns.html",
    "href": "project2/columns/columns.html",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/houseprice-with-lonlat.csv')\ntrain_df['Id'] = np.arange(len(train_df) )\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')"
  },
  {
    "objectID": "project2/columns/columns.html#데이터-불러오기",
    "href": "project2/columns/columns.html#데이터-불러오기",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/houseprice-with-lonlat.csv')\ntrain_df['Id'] = np.arange(len(train_df) )\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')"
  },
  {
    "objectID": "project2/columns/columns.html#모든-변수-결측치와-정보-확인",
    "href": "project2/columns/columns.html#모든-변수-결측치와-정보-확인",
    "title": "house price columns",
    "section": "0. 모든 변수 결측치와 정보 확인",
    "text": "0. 모든 변수 결측치와 정보 확인\n\npd.set_option('display.max_rows',None)\nnan_df = train_df.isna().sum()\nnan_df[nan_df&gt;0]\npd.reset_option('display.max_rows')\n\n\ntrain_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 2930 entries, 0 to 2929\nData columns (total 76 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Unnamed: 0          2930 non-null   int64  \n 1   MS_SubClass         2930 non-null   object \n 2   MS_Zoning           2930 non-null   object \n 3   Lot_Frontage        2930 non-null   int64  \n 4   Lot_Area            2930 non-null   int64  \n 5   Street              2930 non-null   object \n 6   Alley               2930 non-null   object \n 7   Lot_Shape           2930 non-null   object \n 8   Land_Contour        2930 non-null   object \n 9   Utilities           2930 non-null   object \n 10  Lot_Config          2930 non-null   object \n 11  Land_Slope          2930 non-null   object \n 12  Neighborhood        2930 non-null   object \n 13  Condition_1         2930 non-null   object \n 14  Condition_2         2930 non-null   object \n 15  Bldg_Type           2930 non-null   object \n 16  House_Style         2930 non-null   object \n 17  Overall_Cond        2930 non-null   object \n 18  Year_Built          2930 non-null   int64  \n 19  Year_Remod_Add      2930 non-null   int64  \n 20  Roof_Style          2930 non-null   object \n 21  Roof_Matl           2930 non-null   object \n 22  Exterior_1st        2930 non-null   object \n 23  Exterior_2nd        2930 non-null   object \n 24  Mas_Vnr_Type        1155 non-null   object \n 25  Mas_Vnr_Area        2930 non-null   int64  \n 26  Exter_Cond          2930 non-null   object \n 27  Foundation          2930 non-null   object \n 28  Bsmt_Cond           2930 non-null   object \n 29  Bsmt_Exposure       2930 non-null   object \n 30  BsmtFin_Type_1      2930 non-null   object \n 31  BsmtFin_SF_1        2930 non-null   int64  \n 32  BsmtFin_Type_2      2930 non-null   object \n 33  BsmtFin_SF_2        2930 non-null   int64  \n 34  Bsmt_Unf_SF         2930 non-null   int64  \n 35  Total_Bsmt_SF       2930 non-null   int64  \n 36  Heating             2930 non-null   object \n 37  Heating_QC          2930 non-null   object \n 38  Central_Air         2930 non-null   object \n 39  Electrical          2930 non-null   object \n 40  First_Flr_SF        2930 non-null   int64  \n 41  Second_Flr_SF       2930 non-null   int64  \n 42  Gr_Liv_Area         2930 non-null   int64  \n 43  Bsmt_Full_Bath      2930 non-null   int64  \n 44  Bsmt_Half_Bath      2930 non-null   int64  \n 45  Full_Bath           2930 non-null   int64  \n 46  Half_Bath           2930 non-null   int64  \n 47  Bedroom_AbvGr       2930 non-null   int64  \n 48  Kitchen_AbvGr       2930 non-null   int64  \n 49  TotRms_AbvGrd       2930 non-null   int64  \n 50  Functional          2930 non-null   object \n 51  Fireplaces          2930 non-null   int64  \n 52  Garage_Type         2930 non-null   object \n 53  Garage_Finish       2930 non-null   object \n 54  Garage_Cars         2930 non-null   int64  \n 55  Garage_Area         2930 non-null   int64  \n 56  Garage_Cond         2930 non-null   object \n 57  Paved_Drive         2930 non-null   object \n 58  Wood_Deck_SF        2930 non-null   int64  \n 59  Open_Porch_SF       2930 non-null   int64  \n 60  Enclosed_Porch      2930 non-null   int64  \n 61  Three_season_porch  2930 non-null   int64  \n 62  Screen_Porch        2930 non-null   int64  \n 63  Pool_Area           2930 non-null   int64  \n 64  Pool_QC             2930 non-null   object \n 65  Fence               2930 non-null   object \n 66  Misc_Feature        106 non-null    object \n 67  Misc_Val            2930 non-null   int64  \n 68  Mo_Sold             2930 non-null   int64  \n 69  Year_Sold           2930 non-null   int64  \n 70  Sale_Type           2930 non-null   object \n 71  Sale_Condition      2930 non-null   object \n 72  Sale_Price          2930 non-null   int64  \n 73  Longitude           2930 non-null   float64\n 74  Latitude            2930 non-null   float64\n 75  Id                  2930 non-null   int32  \ndtypes: float64(2), int32(1), int64(33), object(40)\nmemory usage: 1.7+ MB\n\n\n‘Id’ : 수치컬럼에서 제외해야 함.\n‘MS_SubClass’ : 수치컬럼으로 되어있는데, 범주컬럼임.\n‘Lot_Frontage’ : 259개 결측치는 집에 연결된 거리가 없어서 결측치인걸까? 그렇다면 0값으로 처리해주기.\n‘Alley’ : 1369개 결측치는 골목길이 없다는 것임."
  },
  {
    "objectID": "project2/columns/columns.html#saleprice-판매-가격",
    "href": "project2/columns/columns.html#saleprice-판매-가격",
    "title": "house price columns",
    "section": "1. ‘SalePrice’ : 판매 가격",
    "text": "1. ‘SalePrice’ : 판매 가격\n\ntrain_numeric_hist('SalePrice')\n\nprint(\"최소값 :\", train_df['SalePrice'].min())\nprint(\"최대값 :\", train_df['SalePrice'].max())\n\n\n\n\n\n\n\n\n최소값 : 34900\n최대값 : 755000\n\n\n이상치 있어보임. 100,000~200,000 달러가 제일 많아보임."
  },
  {
    "objectID": "project2/columns/columns.html#mssubclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "href": "project2/columns/columns.html#mssubclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "title": "house price columns",
    "section": "2. ‘MSSubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) <- 수치컬럼으로 되어 있지만 범주 컬럼임.",
    "text": "2. ‘MSSubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) &lt;- 수치컬럼으로 되어 있지만 범주 컬럼임.\n\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype(str)  # 범주 컬럼 처리\ntrain_cat_count('MSSubClass')\n\ntrain_cat_hist('MSSubClass')\n\nprint(train_df['MSSubClass'].value_counts().sort_index())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMSSubClass\n120     87\n160     63\n180     10\n190     30\n20     536\n30      69\n40       4\n45      12\n50     144\n60     299\n70      60\n75      16\n80      58\n85      20\n90      52\nName: count, dtype: int64\n\n\n    20  1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)\n    30  1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)\n    40  다락방이 있는 1층짜리 집 &lt;- 데이터 4개밖에 없음 (1926,1930,1949,1979)\n    45  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집\n    50  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집\n    60  1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)\n    70  1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)\n    75  3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집\n    80  각 층이 엇갈려있는 집\n    85  현관 앞에 계단으로 층이 엇갈려있는 집\n    90  다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)\n   120  1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음)\n   150  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)\n   160  1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)\n   180  연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집\n   190  한 집을 두 집으로 개조해서 쪼갠 집\n\ncols = train_df.columns\ntrain_df[train_df['MSSubClass'] == 20]['YearBuilt'].sort_values()  # 'MSSubClass'=20은 1938, 1946~2010에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 30]['YearBuilt'].sort_values()  # 'MSSubClass'=30은 1885, 1910~1945, 1948에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 60]['YearBuilt'].sort_values()  # 'MSSubClass'=60은 1946~2009에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 70]['YearBuilt'].sort_values()  # 'MSSubClass'=70은 1872~1945에 지어진 집임\n\nSeries([], Name: YearBuilt, dtype: int64)\n\n\n\ntrain_df[train_df['MSSubClass'] == 120]['YearBuilt'].sort_values()   # 1976~2009에 지어진 집임.\n\nSeries([], Name: YearBuilt, dtype: int64)"
  },
  {
    "objectID": "project2/columns/columns.html#mszoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "href": "project2/columns/columns.html#mszoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "title": "house price columns",
    "section": "3. ‘MSZoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)",
    "text": "3. ‘MSZoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)\n\ntrain_cat_count('MSZoning')\ntrain_cat_hist('MSZoning')\n\nprint(train_df['MSZoning'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMSZoning\nRL         1151\nRM          218\nFV           65\nRH           16\nC (all)      10\nName: count, dtype: int64\n\n\n   A    농업\n   C    상업\n   FV   수상 거주지\n   I    산업\n   RH   높은 밀도 거주지\n   RL   낮은 밀도 거주지\n   RP   Residential Low Density Park \n   RM  중간 밀도 거주지\n=&gt; 데이터상 RL, RM, RH, FV, C(all) 만 있음.\n빈도를 확인해보면, 제일 많은게 RL(낮은 밀도 거주지)임.\n범주별 분포를 보면, 범주마다 집값이 살짝 다른 것 같음. 보라색 분포에 이상치도 존재하는 것 같다."
  },
  {
    "objectID": "project2/columns/columns.html#lotfrontage-집과-연결된-거리의-직선-길이-feet",
    "href": "project2/columns/columns.html#lotfrontage-집과-연결된-거리의-직선-길이-feet",
    "title": "house price columns",
    "section": "4. ‘LotFrontage’ : 집과 연결된 거리의 직선 길이 (feet)",
    "text": "4. ‘LotFrontage’ : 집과 연결된 거리의 직선 길이 (feet)\n\ntrain_numeric_hist('LotFrontage')\n\ntrain_rel_xy('LotFrontage')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n결측치 259개 있음. &lt;- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기.\nLotFrontage의 분포를 보면 이상치 있어보임. LotFrontage과 SalePrice의 관계를 보면 많이 퍼져있기는한데 이상치를 제외하면 양의 관계가 있는 것 같기도 함.\n\ntrain_cat_rel_xy('LotFrontage', 'MSZoning') # 범주별로 y값과의 관계를 알아봄.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'LotFrontage', y='SalePrice', hue='MSZoning')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'LotFrontage', y='LotArea', size='SalePrice')\nplt.show()\n\n\n\n\n\n\n\n\n\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype(str)\nplt.clf()\nsns.scatterplot(data=train_df, x = 'MSSubClass', y='Neighborhood', size='SalePrice')\nplt.show()"
  },
  {
    "objectID": "project2/columns/columns.html#lotarea-부지-크기-square-feet",
    "href": "project2/columns/columns.html#lotarea-부지-크기-square-feet",
    "title": "house price columns",
    "section": "5. ‘LotArea’ : 부지 크기 (square feet)",
    "text": "5. ‘LotArea’ : 부지 크기 (square feet)\n\ntrain_numeric_hist('LotArea')\n\ntrain_rel_xy('LotArea')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLotArea의 분포를 보면 이상치 있어보임. LotArea과 SalePrice의 관계를 보면 일부의 집 때문에 굉장히 퍼지는 관계임.\n\ntrain_cat_rel_xy('LotArea', 'MSZoning') # 범주별로 y값과의 관계를 알아봄."
  },
  {
    "objectID": "project2/columns/columns.html#street-집에-접근-도로-유형-자갈길인지-포장길인지",
    "href": "project2/columns/columns.html#street-집에-접근-도로-유형-자갈길인지-포장길인지",
    "title": "house price columns",
    "section": "6. ‘Street’ : 집에 접근 도로 유형 (자갈길인지, 포장길인지)",
    "text": "6. ‘Street’ : 집에 접근 도로 유형 (자갈길인지, 포장길인지)\n\ntrain_cat_count('Street')\ntrain_cat_hist('Street')\n\nprint(train_df['Street'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStreet\nPave    2918\nGrvl      12\nName: count, dtype: int64\n\n\n   Grvl 자갈길 \n   Pave 포장길\n자갈길이 6개밖에 안됨. 범주별 분포를 보면, 포장길에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#alley-집에-접근-골목-유형-자갈-골목길인지-포장-골목길인지",
    "href": "project2/columns/columns.html#alley-집에-접근-골목-유형-자갈-골목길인지-포장-골목길인지",
    "title": "house price columns",
    "section": "7. ‘Alley’ : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)",
    "text": "7. ‘Alley’ : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)\n\ntrain_cat_count('Alley')\ntrain_cat_hist('Alley')\n\nprint(train_df['Alley'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlley\nNo_Alley_Access    2732\nGravel              120\nPaved                78\nName: count, dtype: int64\n\n\n   Grvl 자갈 골목길\n   Pave 포장된 골목길\n   NA   골목길 없음\n1369 결측치 있음. &lt;- 이게 다 골목길 없다는 것임. 범주별 분포가 많이 다름. &lt;- 범주별로 집 가격 차이가 있을 것임."
  },
  {
    "objectID": "project2/columns/columns.html#lotshape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "href": "project2/columns/columns.html#lotshape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "title": "house price columns",
    "section": "8. ‘LotShape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)",
    "text": "8. ‘LotShape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)\n\ntrain_cat_count('LotShape')\ntrain_cat_hist('LotShape')\n\nprint(train_df['LotShape'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLotShape\nReg    925\nIR1    484\nIR2     41\nIR3     10\nName: count, dtype: int64\n\n\n   Reg  보통\n   IR1  약간 보통이 아님\n   IR2  중간 정도 보통이 아님\n   IR3  보통이 아님\n일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도…?\n범주별 분포가 크게 다른 것 같진 않음. 근데 파란색분포는 살짝 다른 것 같음.\n주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#landcontour-집의-평탄-정도",
    "href": "project2/columns/columns.html#landcontour-집의-평탄-정도",
    "title": "house price columns",
    "section": "9. ‘LandContour’ : 집의 평탄 정도",
    "text": "9. ‘LandContour’ : 집의 평탄 정도\n\ntrain_cat_count('LandContour')\ntrain_cat_hist('LandContour')\n\n\nprint(train_df['LandContour'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLandContour\nLvl    1311\nBnk      63\nHLS      50\nLow      36\nName: count, dtype: int64\n\n\n   Lvl  평평한 것에 가까움  \n   Bnk  기움 - Quick and significant rise from street grade to building\n   HLS  비탈 - Significant slope from side to side\n   Low 움푹한 곳\n평평한 것에 가까운게 많음. 범주별 분포 차이가 없어 보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#utilities-전기-가스-수도-하수도-사용-가능-여부",
    "href": "project2/columns/columns.html#utilities-전기-가스-수도-하수도-사용-가능-여부",
    "title": "house price columns",
    "section": "10. ‘Utilities’ : 전기, 가스, 수도, 하수도 사용 가능 여부",
    "text": "10. ‘Utilities’ : 전기, 가스, 수도, 하수도 사용 가능 여부\n\ntrain_cat_count('Utilities')\n\nplt.clf()\nsns.histplot(train_df[train_df['Utilities']=='AllPub']['Sale_Price'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSewr']['Sale_Price'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSeWa']['Sale_Price'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='ELO']['Sale_Price'], stat='density')\nplt.title('Utilities 범주별, Sale_Price 분포')\nplt.tight_layout()\nplt.show()\n\nprint(train_df['Utilities'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUtilities\nAllPub    2927\nNoSewr       2\nNoSeWa       1\nName: count, dtype: int64\n\n\n   AllPub   전기, 가스, 물, 하수도  \n   NoSewr   전기, 가스, 물 (정화조)\n   NoSeWa   전기, 가스\n   ELO      전기\n전기, 가스만 사용가능한 집이 1개만 있고, 그 외에는 모두 사용 가능한 집임. 이상치 존재해 보임."
  },
  {
    "objectID": "project2/columns/columns.html#lotconfig-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "href": "project2/columns/columns.html#lotconfig-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "title": "house price columns",
    "section": "11. ‘LotConfig’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)",
    "text": "11. ‘LotConfig’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)\n\ntrain_cat_count('LotConfig')\n\ntrain_cat_hist('LotConfig')\n\nprint(train_df['LotConfig'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLotConfig\nInside     1052\nCorner      263\nCulDSac      94\nFR2          47\nFR3           4\nName: count, dtype: int64\n\n\n   Inside   안쪽 부지\n   Corner   코너 부지\n   CulDSac  출입하는 길이 하나인 곳\n   FR2      도로.강을 향한 면이 2곳\n   FR3      도로.강을 향한 면이 3곳\n범주별로 분포 차이가 없어보임. 초록색, 주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#landslope-집-토지-경사-경사가-약간인지-심각한지-등",
    "href": "project2/columns/columns.html#landslope-집-토지-경사-경사가-약간인지-심각한지-등",
    "title": "house price columns",
    "section": "12. ‘LandSlope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)",
    "text": "12. ‘LandSlope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)\n\ntrain_cat_count('LandSlope')\ntrain_cat_hist('LandSlope')\n\nprint(train_df['LandSlope'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLandSlope\nGtl    1382\nMod      65\nSev      13\nName: count, dtype: int64\n\n\n   Gtl  약간 경사\n   Mod  보통 경사\n   Sev  심한 경사\n경사가 심하면 건축비용이 많이 든다길래 집값에 차이가 있을 줄 알았는데, 범주별로 분포의 차이가 없어보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#neighborhood-physical-locations-within-ames-city-limits-집-위치",
    "href": "project2/columns/columns.html#neighborhood-physical-locations-within-ames-city-limits-집-위치",
    "title": "house price columns",
    "section": "13. ‘Neighborhood’ : Physical locations within Ames city limits (집 위치)",
    "text": "13. ‘Neighborhood’ : Physical locations within Ames city limits (집 위치)\n\ntrain_cat_count('Neighborhood')\ntrain_cat_hist('Neighborhood')\nplt.clf()\nsns.countplot(data=train_df, x='Neighborhood')\nplt.xticks(rotation = 50)\nplt.show()\n\n\nb = train_df['Neighborhood'].unique()\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[1]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[2]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[3]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[4]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[5]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[6]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[7]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[8]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[9]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[11]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[12]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[13]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[14]]['Sale_Price'], stat='density')\nplt.title('Neighborhood 범주별, Sale_Price 분포')\nplt.show()\n\nprint(train_df['Neighborhood'].value_counts().sort_index())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeighborhood\nBloomington_Heights                         28\nBlueste                                     10\nBriardale                                   30\nBrookside                                  108\nClear_Creek                                 44\nCollege_Creek                              267\nCrawford                                   103\nEdwards                                    194\nGilbert                                    165\nGreen_Hills                                  2\nGreens                                       8\nIowa_DOT_and_Rail_Road                      93\nLandmark                                     1\nMeadow_Village                              37\nMitchell                                   114\nNorth_Ames                                 443\nNorthpark_Villa                             23\nNorthridge                                  71\nNorthridge_Heights                         166\nNorthwest_Ames                             131\nOld_Town                                   239\nSawyer                                     151\nSawyer_West                                125\nSomerset                                   182\nSouth_and_West_of_Iowa_State_University     48\nStone_Brook                                 51\nTimberland                                  72\nVeenker                                     24\nName: count, dtype: int64\n\n\n   Blmngtn  Bloomington Heights\n   Blueste  Bluestem\n   BrDale   Briardale\n   BrkSide  Brookside\n   ClearCr  Clear Creek\n   CollgCr  College Creek\n   Crawfor  Crawford\n   Edwards  Edwards\n   Gilbert  Gilbert\n   IDOTRR   Iowa DOT and Rail Road\n   MeadowV  Meadow Village\n   Mitchel  Mitchell\n   Names    North Ames\n   NoRidge  Northridge\n   NPkVill  Northpark Villa\n   NridgHt  Northridge Heights\n   NWAmes   Northwest Ames\n   OldTown  Old Town\n   SWISU    South & West of Iowa State University\n   Sawyer   Sawyer\n   SawyerW  Sawyer West\n   Somerst  Somerset\n   StoneBr  Stone Brook\n   Timber   Timberland\n   Veenker  Veenker\n분포 차이가 있는 지역이 있는 것 같음. &lt;- 특정 지역은 집값의 차이가 있다고 볼 수 있음. 집값이 비슷한 지역끼리 묶어서 분석해볼 수도 있을 것 같음.\n빨간색, 파란색 분포에서 이상치가 있어보임.\n보라색, 하늘색, 주황색, 회색, 분홍색 지역은 특정 집값에 몰려있는 것 같음.\n집 데이터가 가장 많은 지역은 NridgHt임. 그 다음이 CollgCr임.\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['Sale_Price'], stat='density')\nplt.title('Neighborhood 범주별, Sale_Price 분포')\nplt.show()\n\n\n\n\n\n\n\n\n집 데이터가 가장 많은 두 지역을 보면 집값 차이가 큼"
  },
  {
    "objectID": "project1.html",
    "href": "project1.html",
    "title": "project1",
    "section": "",
    "text": "예전에는 전통시장을 가면 편의시설이 부족해서 접근성이 떨어졌는데, 요즘에는 편의시설을 개선하려는 노력을 기울이고 있다.\n\n와이파이 설치 2. 건강한 식재료 (백년초 국수 등 + 지역 특색) 3. 공산품이 아니라 정성이 들어간 음식들 4. 저렴한 가격 + 온누리 상품권 사용가능 5. 쇼핑 후 차 한 잔의 여유를 위한 여가 공간 구비 (카페 등) 6. 1인 가구를 위한 음식\n\n상품권 가맹점포 정보 https://www.sbiz.or.kr/sijangtong/nation/onnuri/onnuriMktList.do?menu_type_a=A&menu_cms=&menu_id=070400#shopPopBtn\n데이터 출처 소상공인시장진흥공단_전국 전통시장 현황_2010 : https://www.data.go.kr/data/15102810/fileData.do 소상공인시장진흥공단_전국 전통시장 현황_20151231 : https://www.data.go.kr/data/15052836/fileData.do 소상공인시장진흥공단_시장 시설_20210928 : https://www.data.go.kr/data/15090651/fileData.do 소상공인시장진흥공단_전국 전통시장 현황_20230725 : https://www.data.go.kr/data/15012894/fileData.do 소상공인시장진흥공단_전국 전통시장 현황_20240719 : https://www.data.go.kr/data/15052837/fileData.do?recommendDataYn=Y\n소상공인시장진흥공단_시장 서비스 정보_20210928 : https://www.data.go.kr/data/15090612/fileData.do #"
  },
  {
    "objectID": "project1.html#변수명-바꾸기",
    "href": "project1.html#변수명-바꾸기",
    "title": "project1",
    "section": "변수명 바꾸기",
    "text": "변수명 바꾸기\n\nmarket2 = market2.rename(columns={'시장명' : 'market_name',\n                              '시장유형' : 'type',\n                              '소재지도로명주소' : 'address_road',\n                              '시장개설주기' : 'open_period',\n                              '소재지지번주소' : 'address_old',\n                              '점포수' : 'store_count',\n                              '사용가능상품권' : 'certificate',\n                              '공중화장실 보유여부' : 'public_toilet',\n                              '주차장 보유여부' : 'parking_lot',\n                              '개설년도' : 'year' ,\n                              '데이터기준일자' : 'data_date'})\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\n\n\n\n\n\n\n\n잘 바뀐 것을 알 수 있다."
  },
  {
    "objectID": "project1.html#데이터-정보-알아보기",
    "href": "project1.html#데이터-정보-알아보기",
    "title": "project1",
    "section": "데이터 정보 알아보기",
    "text": "데이터 정보 알아보기\n\nmarket2.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1439 entries, 0 to 1438\nData columns (total 11 columns):\n #   Column         Non-Null Count  Dtype         \n---  ------         --------------  -----         \n 0   market_name    1439 non-null   object        \n 1   type           1439 non-null   object        \n 2   address_road   1439 non-null   object        \n 3   open_period    1439 non-null   object        \n 4   address_old    1439 non-null   object        \n 5   store_count    1439 non-null   int64         \n 6   certificate    1159 non-null   object        \n 7   public_toilet  1439 non-null   object        \n 8   parking_lot    1439 non-null   object        \n 9   year           1281 non-null   float64       \n 10  data_date      1439 non-null   datetime64[ns]\ndtypes: datetime64[ns](1), float64(1), int64(1), object(8)\nmemory usage: 123.8+ KB\n\n\n8개가 범주컬럼이고, 2개가 수치 컬럼, 1개가 날짜컬럼임을 알 수 있다. (수치컬럼중 1개는 연도컬럼이라서, 우리가 분석해 볼 수 있는 수치 컬럼은 1개뿐이다.) 그리고 사용가능상품권(certificate)와 개설연도(year)에만 null값이 있다는 것을 알 수 있다.\n각 컬럼의 범주 알아보기\n\nmarket2['market_name'].value_counts()\n\nmarket_name\n중앙시장      16\n동부시장       6\n역전시장       5\n현대시장       4\n강남시장       4\n          ..\n신광시장       1\n장성종합시장     1\n한라종합시장     1\n기계시장       1\n목행시장       1\nName: count, Length: 1367, dtype: int64\n\n\n이름이 동일한 서로 다른 시장이 존재함.\n\nmarket2['type'].value_counts()\n\ntype\n상설       1002\n상설+정기     259\n정기        178\nName: count, dtype: int64\n\n\n시장 유형은 3가지임.\n\nmarket2['address_road'].value_counts().head()\n\naddress_road\n대구광역시 북구 칠성시장로 5길 22    2\n경상북도 예천군 예천읍 시장로 109    2\n서울특별시 중구 청계천로 274       2\n인천광역시 서구 가정로 208        2\n대구광역시 남구 대명동 1157-10    2\nName: count, dtype: int64\n\n\n\nmarket2['address_old'].value_counts().head()\n\naddress_old\n서울 강서구 화곡 370        2\n서울 중구 을지로6가 17번지     2\n대구 수성구 수성동2가 39-4    2\n경기 김포시 양촌읍 414-3     2\n인천 동구 송림동 50         2\nName: count, dtype: int64\n\n\n주소가 동일한 시장이 있음\n\nmarket2['open_period'].value_counts()\n\nopen_period\n상설    1002\n5일     435\n2일       1\n6일       1\nName: count, dtype: int64\n\n\n정기 시장에 5일, 2일, 6일 있음.\n\nmarket2['certificate'].value_counts()\n\ncertificate\n온누리상품권    1159\nName: count, dtype: int64\n\n\n\nmarket2['public_toilet'].value_counts()\n\npublic_toilet\nY    1308\nN     131\nName: count, dtype: int64\n\n\n\nmarket2['parking_lot'].value_counts()\n\nparking_lot\nY    859\nN    580\nName: count, dtype: int64\n\n\n\nmarket2['year'].value_counts().head()\n\nyear\n2005.0    130\n2006.0    104\n2013.0     85\n2009.0     80\n2007.0     78\nName: count, dtype: int64\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nyear_group_count = market2.groupby('year').agg(year_count= ('year', 'count'))\n\nplt.clf()\nsns.lineplot(data=year_group_count, x='year', y='year_count')\nplt.show()\n\n\n\n\n\n\n\n\n\nmarket2['data_date'].value_counts()\n\ndata_date\n2015-12-31    1439\nName: count, dtype: int64"
  },
  {
    "objectID": "project1.html#점포수-요약-정보-알아보기-범주화",
    "href": "project1.html#점포수-요약-정보-알아보기-범주화",
    "title": "project1",
    "section": "점포수 요약 정보 알아보기 (범주화)",
    "text": "점포수 요약 정보 알아보기 (범주화)\n\nmarket2[['store_count']].describe()\n\n\n\n\n\n\n\n\nstore_count\n\n\n\n\ncount\n1439.000000\n\n\nmean\n143.907575\n\n\nstd\n298.989963\n\n\nmin\n0.000000\n\n\n25%\n50.000000\n\n\n50%\n80.000000\n\n\n75%\n134.000000\n\n\nmax\n5852.000000\n\n\n\n\n\n\n\n점포수 위주로 봤을 때, 25%, 75% 기준으로 점포 사이즈를 나누는 것이 합리적으로 보인다. samll : 50개 미만 medium : 50개 이상 134개 미만 large : 134개 이상 3가지의 범주로 나누고자 한다."
  },
  {
    "objectID": "project1.html#범주화-1-점포수로-범주화하기",
    "href": "project1.html#범주화-1-점포수로-범주화하기",
    "title": "project1",
    "section": "범주화 1 : 점포수로 범주화하기",
    "text": "범주화 1 : 점포수로 범주화하기\n\nmarket2 = market2.assign(market_scale = np.where(market2[\"store_count\"] &gt;= 134, \"large\", \n                                        np.where(market2[\"store_count\"] &gt;= 50, \"medium\", \"small\")))\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\n\n\n\n\n\n\n\n점포수대로 범주화가 잘 되어진 것으로 보인다.\n\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['market_scale'].value_counts().plot.bar(rot=0)\nplt.show()"
  },
  {
    "objectID": "project1.html#범주화-2-편의시절공중화장실-주차장-보유-여부에-따라-시장을-범주화하기.",
    "href": "project1.html#범주화-2-편의시절공중화장실-주차장-보유-여부에-따라-시장을-범주화하기.",
    "title": "project1",
    "section": "범주화 2 : 편의시절(공중화장실, 주차장) 보유 여부에 따라 시장을 범주화하기.",
    "text": "범주화 2 : 편의시절(공중화장실, 주차장) 보유 여부에 따라 시장을 범주화하기.\n\nmarket2['level'] = np.where((market2['public_toilet'] == 'Y') & (market2['parking_lot'] == 'Y'), 'high', \n                   np.where((market2['public_toilet'] == 'N') & (market2['public_toilet'] == 'N') , 'low', 'intermediate'))\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n\n\n\n\n\n\n\n편의시절(공중화장실, 주차장) 보유 여부에 따라 시장의 편의성이 얼마나 좋은지 범주화 해보고자 한다.\n(공중화장실 Y, 주차장 Y) -&gt; high (공중화장실 Y, 주차장 N) -&gt; intermediate (공중화장실 N, 주차장 Y) -&gt; intermediate (공중화장실 N, 주차장 N) -&gt; low\n\nimport matplotlib.pyplot as plt\nplt.clf()\nmarket2['level'].value_counts().plot.bar(rot=0)\nplt.show()\n\n\n\n\n\n\n\n\n대다수의 시장이 편의시설이 잘 구비되어 있음을 알 수 있다.\nY의 현황을 파악하기 위해서, N은 null값으로 만들기 -&gt; market3 데이터프레임으로 함. N 갯수 알아보기\n\nmarket2['public_toilet'].value_counts()\n\npublic_toilet\nY    1308\nN     131\nName: count, dtype: int64\n\n\n\nmarket2['parking_lot'].value_counts()\n\nparking_lot\nY    859\nN    580\nName: count, dtype: int64\n\n\n온누리 상품권은 사용안하는 곳은 null값이니까 그대로 count 쓰면 쓰는 곳만 세어짐 공중화장실, 주차장은 Y/N 이므로, Y만 세려면 Y만 세어줘야 함."
  },
  {
    "objectID": "project1.html#범주별-데이텨-현황-알아보기",
    "href": "project1.html#범주별-데이텨-현황-알아보기",
    "title": "project1",
    "section": "범주별 데이텨 현황 알아보기",
    "text": "범주별 데이텨 현황 알아보기\n\nmarket3 = market2.copy()\nimport numpy as np\nmarket3.loc[market3['public_toilet']=='N', 'public_toilet'] = np.nan\nmarket3['public_toilet'].isna().sum()\n\nmarket3.loc[market3['parking_lot']=='N', 'parking_lot'] = np.nan\nmarket3['parking_lot'].isna().sum()\n\n\npd.set_option('display.max_columns', None)\ngroup_df = market3.groupby(['type','market_scale']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df\n\n\n\n\n\n\n\n\n\nmarket_count\ncertificate_count\npublic_toilet_count\nparking_lot_count\n\n\ntype\nmarket_scale\n\n\n\n\n\n\n\n\n상설\nlarge\n281\n256\n259\n182\n\n\nmedium\n532\n459\n444\n247\n\n\nsmall\n189\n127\n180\n103\n\n\n상설+정기\nlarge\n66\n64\n63\n53\n\n\nmedium\n145\n132\n138\n101\n\n\nsmall\n48\n33\n48\n40\n\n\n정기\nlarge\n15\n14\n15\n13\n\n\nmedium\n46\n32\n46\n36\n\n\nsmall\n117\n42\n115\n84\n\n\n\n\n\n\n\n5일장 중에서 점포수가 많은 시장은 15곳 밖에 안 됨. 대부분 small에 해당함. 따라서 5일장만 열리는 곳은 소규모로 진행되는 시장임. 즉 외부 관광객이 간다기 보다는 지역 현지인들이 이용할 것으로 보임. 라고 생각을 했지, 5일장 블로그 봐보니까 관광지라면 관광객도 갈 법한 점포들도 있었음."
  },
  {
    "objectID": "project1.html#범주별-데이텨-현황-알아보기-1",
    "href": "project1.html#범주별-데이텨-현황-알아보기-1",
    "title": "project1",
    "section": "범주별 데이텨 현황 알아보기",
    "text": "범주별 데이텨 현황 알아보기\n\ngroup_df = market3.groupby(['type','market_scale','level']).agg(market_count= ('market_name','count')\n                                                       , certificate_count = ('certificate', 'count')\n                                                       , public_toilet_count = ('public_toilet', 'count')\n                                                       , parking_lot_count = ('parking_lot', 'count'))\ngroup_df['certificate_pct']= round(group_df['certificate_count']/group_df['market_count']*100,1)\ngroup_df['public_toilet_pct']=round(group_df['public_toilet_count']/group_df['market_count']*100,1)\ngroup_df['parking_lot_pct']=round(group_df['parking_lot_count']/group_df['market_count']*100,1)\ngroup_df\n\n\n\n\n\n\n\n\n\n\nmarket_count\ncertificate_count\npublic_toilet_count\nparking_lot_count\ncertificate_pct\npublic_toilet_pct\nparking_lot_pct\n\n\ntype\nmarket_scale\nlevel\n\n\n\n\n\n\n\n\n\n\n\n상설\nlarge\nhigh\n175\n159\n175\n175\n90.9\n100.0\n100.0\n\n\nintermediate\n84\n76\n84\n0\n90.5\n100.0\n0.0\n\n\nlow\n22\n21\n0\n7\n95.5\n0.0\n31.8\n\n\nmedium\nhigh\n231\n205\n231\n231\n88.7\n100.0\n100.0\n\n\nintermediate\n213\n180\n213\n0\n84.5\n100.0\n0.0\n\n\nlow\n88\n74\n0\n16\n84.1\n0.0\n18.2\n\n\nsmall\nhigh\n100\n68\n100\n100\n68.0\n100.0\n100.0\n\n\nintermediate\n80\n51\n80\n0\n63.7\n100.0\n0.0\n\n\nlow\n9\n8\n0\n3\n88.9\n0.0\n33.3\n\n\n상설+정기\nlarge\nhigh\n53\n51\n53\n53\n96.2\n100.0\n100.0\n\n\nintermediate\n10\n10\n10\n0\n100.0\n100.0\n0.0\n\n\nlow\n3\n3\n0\n0\n100.0\n0.0\n0.0\n\n\nmedium\nhigh\n99\n92\n99\n99\n92.9\n100.0\n100.0\n\n\nintermediate\n39\n33\n39\n0\n84.6\n100.0\n0.0\n\n\nlow\n7\n7\n0\n2\n100.0\n0.0\n28.6\n\n\nsmall\nhigh\n40\n28\n40\n40\n70.0\n100.0\n100.0\n\n\nintermediate\n8\n5\n8\n0\n62.5\n100.0\n0.0\n\n\n정기\nlarge\nhigh\n13\n12\n13\n13\n92.3\n100.0\n100.0\n\n\nintermediate\n2\n2\n2\n0\n100.0\n100.0\n0.0\n\n\nmedium\nhigh\n36\n28\n36\n36\n77.8\n100.0\n100.0\n\n\nintermediate\n10\n4\n10\n0\n40.0\n100.0\n0.0\n\n\nsmall\nhigh\n83\n34\n83\n83\n41.0\n100.0\n100.0\n\n\nintermediate\n32\n8\n32\n0\n25.0\n100.0\n0.0\n\n\nlow\n2\n0\n0\n1\n0.0\n0.0\n50.0"
  },
  {
    "objectID": "project1.html#상설정기-시장의-지역-봐보기",
    "href": "project1.html#상설정기-시장의-지역-봐보기",
    "title": "project1",
    "section": "상설+정기 시장의 지역 봐보기",
    "text": "상설+정기 시장의 지역 봐보기\n\nmarket2.query('type == \"상설+정기\"').head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\n\n\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n\n\n7\n간성시장\n상설+정기\n강원도 고성군 간성시장 2길 11-1\n5일\n강원 고성군 간성읍 신안리 262번지\n89\n온누리상품권\nY\nY\n2003.0\n2015-12-31\nmedium\nhigh\n\n\n8\n거진시장\n상설+정기\n강원도 고성군 거진읍 거진시장길 15\n5일\n강원 고성군 거진읍 거진리 272번지\n51\n온누리상품권\nY\nY\n2010.0\n2015-12-31\nmedium\nhigh\n\n\n9\n북평민속시장\n상설+정기\n강원도 동해시 북평 오일장길 32\n5일\n강원 동해시 구미동 497-11번지 일원\n130\n온누리상품권\nY\nY\n2013.0\n2015-12-31\nmedium\nhigh\n\n\n15\n삼척중앙시장\n상설+정기\n강원도 삼척시 진주로 12-21\n5일\n강원 삼척시 남양동 55-4\n299\n온누리상품권\nY\nY\n2014.0\n2015-12-31\nlarge\nhigh"
  },
  {
    "objectID": "project1.html#지역별로-시장-수-알아보기-삭제할지-보기",
    "href": "project1.html#지역별로-시장-수-알아보기-삭제할지-보기",
    "title": "project1",
    "section": "지역별로 시장 수 알아보기 (삭제할지 보기)",
    "text": "지역별로 시장 수 알아보기 (삭제할지 보기)\n\n# pd.set_option('display.max_rows', None)\n# market2['town_city'].value_counts().head()"
  },
  {
    "objectID": "project1.html#관광형-상설정기-시장이-있는-지역-알아보기-삭제할지-보기",
    "href": "project1.html#관광형-상설정기-시장이-있는-지역-알아보기-삭제할지-보기",
    "title": "project1",
    "section": "관광형 상설+정기 시장이 있는 지역 알아보기 (삭제할지 보기)",
    "text": "관광형 상설+정기 시장이 있는 지역 알아보기 (삭제할지 보기)\n\n# market4 = market2.query('type == \"상설+정기\"')\n# market4['town_city'].value_counts().head()\n\nhttps://www.bigdata-culture.kr/bigdata/user/data_market/detail.do?id=359f0000-4129-11ec-a107-3b8bd6a15b10 관심있는 지역"
  },
  {
    "objectID": "project1.html#점포수-크기에-따른-연령층-확인하기",
    "href": "project1.html#점포수-크기에-따른-연령층-확인하기",
    "title": "project1",
    "section": "점포수 크기에 따른 연령층 확인하기",
    "text": "점포수 크기에 따른 연령층 확인하기\n\n0~19세 = 유소년\n\n\n20~59세 = 성인\n\n\n60~100세 이상 = 노인"
  },
  {
    "objectID": "project1.html#년-12월-기준-인구조사-파일-불러오기",
    "href": "project1.html#년-12월-기준-인구조사-파일-불러오기",
    "title": "project1",
    "section": "2015년 12월 기준 인구조사 파일 불러오기",
    "text": "2015년 12월 기준 인구조사 파일 불러오기\n\npop = pd.read_excel('pop_2015.xlsx')\npop.head()\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n연령구간인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n남 인구수\n연령구간인구수.1\n0~9세.1\n10~19세.1\n20~29세.1\n30~39세.1\n40~49세.1\n50~59세.1\n60~69세.1\n70~79세.1\n80~89세.1\n90~99세.1\n100세 이상.1\n여 인구수\n연령구간인구수.2\n0~9세.2\n10~19세.2\n20~29세.2\n30~39세.2\n40~49세.2\n50~59세.2\n60~69세.2\n70~79세.2\n80~89세.2\n90~99세.2\n100세 이상.2\n\n\n\n\n0\n전국\n51,529,338\n51,529,338\n4,601,688\n5,717,089\n6,699,048\n7,670,966\n8,858,993\n8,324,791\n5,073,279\n3,176,437\n1,225,210\n165,628\n16,209\n25,758,186\n25,758,186\n2,365,981\n2,980,812\n3,527,813\n3,919,396\n4,505,612\n4,196,330\n2,462,313\n1,366,101\n391,673\n38,373\n3,782\n25,771,152\n25,771,152\n2,235,707\n2,736,277\n3,171,235\n3,751,570\n4,353,381\n4,128,461\n2,610,966\n1,810,336\n833,537\n127,255\n12,427\n\n\n1\n서울특별시\n10,022,181\n10,022,181\n783,299\n985,790\n1,447,221\n1,668,253\n1,701,609\n1,588,333\n1,037,752\n582,367\n192,801\n29,719\n5,037\n4,930,943\n4,930,943\n401,797\n510,041\n723,200\n837,657\n849,573\n773,917\n492,879\n266,597\n66,262\n7,727\n1,293\n5,091,238\n5,091,238\n381,502\n475,749\n724,021\n830,596\n852,036\n814,416\n544,873\n315,770\n126,539\n21,992\n3,744\n\n\n2\n부산광역시\n3,513,777\n3,513,777\n267,227\n345,503\n456,514\n493,958\n568,218\n619,703\n432,899\n239,641\n79,128\n9,497\n1,489\n1,735,570\n1,735,570\n137,437\n181,499\n240,807\n252,411\n282,846\n299,943\n207,555\n105,634\n25,040\n2,078\n320\n1,778,207\n1,778,207\n129,790\n164,004\n215,707\n241,547\n285,372\n319,760\n225,344\n134,007\n54,088\n7,419\n1,169\n\n\n3\n대구광역시\n2,487,829\n2,487,829\n208,115\n289,590\n326,755\n342,633\n438,674\n419,653\n253,693\n148,884\n53,282\n6,007\n543\n1,237,291\n1,237,291\n107,230\n153,618\n179,517\n172,408\n216,253\n206,822\n120,190\n62,625\n17,216\n1,292\n120\n1,250,538\n1,250,538\n100,885\n135,972\n147,238\n170,225\n222,421\n212,831\n133,503\n86,259\n36,066\n4,715\n423\n\n\n4\n인천광역시\n2,925,815\n2,925,815\n271,758\n324,530\n402,113\n455,898\n516,105\n494,119\n255,834\n142,147\n54,650\n7,960\n701\n1,469,869\n1,469,869\n139,490\n167,985\n209,317\n234,355\n260,769\n251,005\n126,517\n61,342\n16,942\n1,959\n188\n1,455,946\n1,455,946\n132,268\n156,545\n192,796\n221,543\n255,336\n243,114\n129,317\n80,805\n37,708\n6,001\n513\n\n\n\n\n\n\n\n\nsubset = pop.iloc[1:18,[0,1,3,4,5,6,7,8,9,10,11,12,13]]\nsubset = subset.reset_index().iloc[:,1:]\nsubset\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n0\n서울특별시\n10,022,181\n783,299\n985,790\n1,447,221\n1,668,253\n1,701,609\n1,588,333\n1,037,752\n582,367\n192,801\n29,719\n5,037\n\n\n1\n부산광역시\n3,513,777\n267,227\n345,503\n456,514\n493,958\n568,218\n619,703\n432,899\n239,641\n79,128\n9,497\n1,489\n\n\n2\n대구광역시\n2,487,829\n208,115\n289,590\n326,755\n342,633\n438,674\n419,653\n253,693\n148,884\n53,282\n6,007\n543\n\n\n3\n인천광역시\n2,925,815\n271,758\n324,530\n402,113\n455,898\n516,105\n494,119\n255,834\n142,147\n54,650\n7,960\n701\n\n\n4\n광주광역시\n1,472,199\n143,700\n197,005\n198,686\n221,036\n258,049\n217,366\n127,348\n76,489\n28,346\n3,860\n314\n\n\n5\n대전광역시\n1,518,775\n145,049\n184,964\n210,749\n228,720\n267,008\n238,664\n134,281\n76,136\n29,005\n3,918\n281\n\n\n6\n울산광역시\n1,173,534\n116,241\n139,958\n158,615\n180,833\n211,988\n201,390\n100,468\n45,817\n16,011\n2,074\n139\n\n\n7\n세종특별자치시\n210,884\n29,825\n23,398\n23,043\n40,025\n37,370\n25,872\n15,614\n10,351\n4,718\n634\n34\n\n\n8\n경기도\n12,522,606\n1,251,234\n1,479,739\n1,644,870\n1,969,170\n2,302,937\n1,962,003\n1,027,712\n616,198\n232,931\n32,804\n3,008\n\n\n9\n강원도\n1,549,507\n123,275\n171,073\n184,802\n189,754\n250,407\n269,286\n171,452\n131,730\n49,542\n7,578\n608\n\n\n10\n충청북도\n1,583,952\n142,319\n179,628\n196,456\n216,258\n262,133\n260,270\n158,194\n114,586\n47,691\n5,977\n440\n\n\n11\n충청남도\n2,077,649\n197,236\n229,214\n244,233\n296,909\n333,108\n318,857\n212,781\n160,439\n74,759\n9,433\n680\n\n\n12\n전라북도\n1,869,711\n159,824\n217,813\n218,698\n232,517\n299,535\n295,583\n210,933\n155,007\n70,437\n8,725\n639\n\n\n13\n전라남도\n1,908,996\n158,142\n209,957\n206,551\n224,820\n291,730\n308,904\n224,235\n190,822\n82,190\n10,892\n753\n\n\n14\n경상북도\n2,702,826\n223,394\n277,327\n311,383\n347,557\n428,513\n456,781\n314,821\n229,763\n99,895\n12,658\n734\n\n\n15\n경상남도\n3,364,702\n317,867\n384,287\n394,794\n476,814\n580,967\n551,878\n337,382\n216,802\n92,498\n10,817\n596\n\n\n16\n제주특별자치도\n624,395\n63,183\n77,313\n73,565\n85,811\n110,642\n96,129\n57,880\n39,258\n17,326\n3,075\n213"
  },
  {
    "objectID": "project1.html#원본-숫자-안에-를-없애기-문자열을-숫자열로-바꾸기",
    "href": "project1.html#원본-숫자-안에-를-없애기-문자열을-숫자열로-바꾸기",
    "title": "project1",
    "section": "원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)",
    "text": "원본 숫자 안에 , 를 없애기 (문자열을 숫자열로 바꾸기)\n\ncolumns = subset.columns[1:]\n\nfor col in columns:\n    subset[col] = subset[col].str.replace(',', '')\n    subset[col] = pd.to_numeric(subset[col])\n\nsubset\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\n\n\n\n\n0\n서울특별시\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n\n\n1\n부산광역시\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n\n\n2\n대구광역시\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n\n\n3\n인천광역시\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n\n\n4\n광주광역시\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n\n\n5\n대전광역시\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n\n\n6\n울산광역시\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n\n\n7\n세종특별자치시\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n\n\n8\n경기도\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n\n\n9\n강원도\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n\n\n10\n충청북도\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n\n\n11\n충청남도\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n\n\n12\n전라북도\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n\n\n13\n전라남도\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n\n\n14\n경상북도\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n\n\n15\n경상남도\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n\n\n16\n제주특별자치도\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213"
  },
  {
    "objectID": "project1.html#각-지역마다-연령층-비율-계산하기",
    "href": "project1.html#각-지역마다-연령층-비율-계산하기",
    "title": "project1",
    "section": "각 지역마다 연령층 비율 계산하기",
    "text": "각 지역마다 연령층 비율 계산하기\n\nsubset['minor_ratio'] = round((subset.iloc[:,2]+subset.iloc[:,3])/subset.iloc[:,1]*100,2)\nsubset['youth_ratio'] = round((subset.iloc[:,4]+subset.iloc[:,5]+subset.iloc[:,6]+subset.iloc[:,7])/subset.iloc[:,1]*100,2)\nsubset['old_ratio'] = round((subset.iloc[:,8]+subset.iloc[:,9]+subset.iloc[:,10]+subset.iloc[:,11]+subset.iloc[:,12])/subset.iloc[:,1]*100,2)\nsubset\n\n\n\n\n\n\n\n\n행정기관\n총 인구수\n0~9세\n10~19세\n20~29세\n30~39세\n40~49세\n50~59세\n60~69세\n70~79세\n80~89세\n90~99세\n100세 이상\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n서울특별시\n10022181\n783299\n985790\n1447221\n1668253\n1701609\n1588333\n1037752\n582367\n192801\n29719\n5037\n17.65\n63.91\n18.44\n\n\n1\n부산광역시\n3513777\n267227\n345503\n456514\n493958\n568218\n619703\n432899\n239641\n79128\n9497\n1489\n17.44\n60.86\n21.70\n\n\n2\n대구광역시\n2487829\n208115\n289590\n326755\n342633\n438674\n419653\n253693\n148884\n53282\n6007\n543\n20.01\n61.41\n18.59\n\n\n3\n인천광역시\n2925815\n271758\n324530\n402113\n455898\n516105\n494119\n255834\n142147\n54650\n7960\n701\n20.38\n63.85\n15.77\n\n\n4\n광주광역시\n1472199\n143700\n197005\n198686\n221036\n258049\n217366\n127348\n76489\n28346\n3860\n314\n23.14\n60.80\n16.05\n\n\n5\n대전광역시\n1518775\n145049\n184964\n210749\n228720\n267008\n238664\n134281\n76136\n29005\n3918\n281\n21.73\n62.23\n16.04\n\n\n6\n울산광역시\n1173534\n116241\n139958\n158615\n180833\n211988\n201390\n100468\n45817\n16011\n2074\n139\n21.83\n64.15\n14.02\n\n\n7\n세종특별자치시\n210884\n29825\n23398\n23043\n40025\n37370\n25872\n15614\n10351\n4718\n634\n34\n25.24\n59.90\n14.87\n\n\n8\n경기도\n12522606\n1251234\n1479739\n1644870\n1969170\n2302937\n1962003\n1027712\n616198\n232931\n32804\n3008\n21.81\n62.92\n15.27\n\n\n9\n강원도\n1549507\n123275\n171073\n184802\n189754\n250407\n269286\n171452\n131730\n49542\n7578\n608\n19.00\n57.71\n23.29\n\n\n10\n충청북도\n1583952\n142319\n179628\n196456\n216258\n262133\n260270\n158194\n114586\n47691\n5977\n440\n20.33\n59.04\n20.64\n\n\n11\n충청남도\n2077649\n197236\n229214\n244233\n296909\n333108\n318857\n212781\n160439\n74759\n9433\n680\n20.53\n57.43\n22.05\n\n\n12\n전라북도\n1869711\n159824\n217813\n218698\n232517\n299535\n295583\n210933\n155007\n70437\n8725\n639\n20.20\n55.96\n23.84\n\n\n13\n전라남도\n1908996\n158142\n209957\n206551\n224820\n291730\n308904\n224235\n190822\n82190\n10892\n753\n19.28\n54.06\n26.66\n\n\n14\n경상북도\n2702826\n223394\n277327\n311383\n347557\n428513\n456781\n314821\n229763\n99895\n12658\n734\n18.53\n57.13\n24.34\n\n\n15\n경상남도\n3364702\n317867\n384287\n394794\n476814\n580967\n551878\n337382\n216802\n92498\n10817\n596\n20.87\n59.57\n19.56\n\n\n16\n제주특별자치도\n624395\n63183\n77313\n73565\n85811\n110642\n96129\n57880\n39258\n17326\n3075\n213\n22.50\n58.64\n18.86"
  },
  {
    "objectID": "project1.html#subset에서-필요한-변수만-남기기",
    "href": "project1.html#subset에서-필요한-변수만-남기기",
    "title": "project1",
    "section": "subset에서 필요한 변수만 남기기",
    "text": "subset에서 필요한 변수만 남기기\n\nsubset2 = subset.iloc[:, [0,1,13,14,15]]\nsubset2 = subset2.rename(columns = {'행정기관' : 'region' , '총 인구수' : 'total_pop'})\nsubset2.head()\n\n\n\n\n\n\n\n\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n서울특별시\n10022181\n17.65\n63.91\n18.44\n\n\n1\n부산광역시\n3513777\n17.44\n60.86\n21.70\n\n\n2\n대구광역시\n2487829\n20.01\n61.41\n18.59\n\n\n3\n인천광역시\n2925815\n20.38\n63.85\n15.77\n\n\n4\n광주광역시\n1472199\n23.14\n60.80\n16.05\n\n\n\n\n\n\n\n\nsubset2['region'] == '서울특별시  '\n\n0      True\n1     False\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\n14    False\n15    False\n16    False\nName: region, dtype: bool\n\n\nregion 컬럼의 값이 ’ ’ 공백이 포함되어 있음을 알 수 있다. 이 상태에서 merge하면 merge가 안됨.\n\nsubset2['region'] = subset2['region'].str.replace('세종특별자치시','세종특별시') \nsubset2['region'] = subset2['region'].str.replace('제주특별자치도','제주도')\nsubset2['region'] = subset2['region'].str.replace('  ','')\nsubset2\n\n\n\n\n\n\n\n\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n서울특별시\n10022181\n17.65\n63.91\n18.44\n\n\n1\n부산광역시\n3513777\n17.44\n60.86\n21.70\n\n\n2\n대구광역시\n2487829\n20.01\n61.41\n18.59\n\n\n3\n인천광역시\n2925815\n20.38\n63.85\n15.77\n\n\n4\n광주광역시\n1472199\n23.14\n60.80\n16.05\n\n\n5\n대전광역시\n1518775\n21.73\n62.23\n16.04\n\n\n6\n울산광역시\n1173534\n21.83\n64.15\n14.02\n\n\n7\n세종특별시\n210884\n25.24\n59.90\n14.87\n\n\n8\n경기도\n12522606\n21.81\n62.92\n15.27\n\n\n9\n강원도\n1549507\n19.00\n57.71\n23.29\n\n\n10\n충청북도\n1583952\n20.33\n59.04\n20.64\n\n\n11\n충청남도\n2077649\n20.53\n57.43\n22.05\n\n\n12\n전라북도\n1869711\n20.20\n55.96\n23.84\n\n\n13\n전라남도\n1908996\n19.28\n54.06\n26.66\n\n\n14\n경상북도\n2702826\n18.53\n57.13\n24.34\n\n\n15\n경상남도\n3364702\n20.87\n59.57\n19.56\n\n\n16\n제주도\n624395\n22.50\n58.64\n18.86"
  },
  {
    "objectID": "project1.html#market2와-subset-데이터-조인을-위해서-market2의-address_new에서-시도-값-분리해서-region-변수-만들기",
    "href": "project1.html#market2와-subset-데이터-조인을-위해서-market2의-address_new에서-시도-값-분리해서-region-변수-만들기",
    "title": "project1",
    "section": "market2와 subset 데이터 조인을 위해서 market2의 address_new에서 시/도 값 분리해서 ‘region’ 변수 만들기",
    "text": "market2와 subset 데이터 조인을 위해서 market2의 address_new에서 시/도 값 분리해서 ‘region’ 변수 만들기\n\nfirst_tokens=[]\n\nfor address in market2['address_road']:\n    first_token = address.split()[0]\n    first_tokens.append(first_token)\n    \nmarket2['region'] = first_tokens\nmarket2.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도"
  },
  {
    "objectID": "project1.html#market2-subset2-두-데이터셋-조인-비율에-대한-새로운-데이터-프레임-만들기",
    "href": "project1.html#market2-subset2-두-데이터셋-조인-비율에-대한-새로운-데이터-프레임-만들기",
    "title": "project1",
    "section": "market2, subset2 두 데이터셋 조인 (비율에 대한 새로운 데이터 프레임 만들기)",
    "text": "market2, subset2 두 데이터셋 조인 (비율에 대한 새로운 데이터 프레임 만들기)\n\nmarket_pop = pd.merge(market2, subset2, how='left', on='region')\nmarket_pop.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29"
  },
  {
    "objectID": "project1.html#market2와-subset2-조인한-데이터셋-저장하기-market_pop",
    "href": "project1.html#market2와-subset2-조인한-데이터셋-저장하기-market_pop",
    "title": "project1",
    "section": "market2와 subset2 조인한 데이터셋 저장하기 (market_pop)",
    "text": "market2와 subset2 조인한 데이터셋 저장하기 (market_pop)\n\nmarket_pop.to_excel(excel_writer='market_pop.xlsx', index=False)"
  },
  {
    "objectID": "project1.html#대-이상인-인구가-많으면-시장-갯수가-많이-형성되었을-것이다.-마켓-카운터-갯수-데이터-지역별-ratio-데이터-병합",
    "href": "project1.html#대-이상인-인구가-많으면-시장-갯수가-많이-형성되었을-것이다.-마켓-카운터-갯수-데이터-지역별-ratio-데이터-병합",
    "title": "project1",
    "section": "60대 이상인 인구가 많으면 시장 갯수가 많이 형성되었을 것이다. (마켓 카운터 갯수 데이터, 지역별 ratio 데이터 병합)",
    "text": "60대 이상인 인구가 많으면 시장 갯수가 많이 형성되었을 것이다. (마켓 카운터 갯수 데이터, 지역별 ratio 데이터 병합)\n\nmarket_pop['old_up'] = np.where(market_pop['old_ratio'] &gt;= market_pop['old_ratio'].mean(), '1' ,'0')\nmarket_pop['youth_up'] = np.where(market_pop['youth_ratio'] &gt;= market_pop['youth_ratio'].mean(), '1' ,'0')\nmarket_pop['minor_up'] = np.where(market_pop['minor_ratio'] &gt;= market_pop['minor_ratio'].mean(), '1' ,'0')\nmarket_pop.head()\n\n\n\n\n\n\n\n\nmarket_name\ntype\naddress_road\nopen_period\naddress_old\nstore_count\ncertificate\npublic_toilet\nparking_lot\nyear\ndata_date\nmarket_scale\nlevel\nregion\ntotal_pop\nminor_ratio\nyouth_ratio\nold_ratio\nold_up\nyouth_up\nminor_up\n\n\n\n\n0\n중앙시장\n상설\n강원도 강릉시 금성로 21\n상설\n강원 강릉시 성남동 50번지\n229\n온누리상품권\nY\nY\n1980.0\n2015-12-31\nlarge\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n1\n강릉동부시장\n상설\n강원도 강릉시 옥천로 48\n상설\n강원 강릉시 옥천동 223번지\n91\nNaN\nY\nN\n2014.0\n2015-12-31\nmedium\nintermediate\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n2\n강릉서부시장\n상설\n강원도 강릉시 임영로 155번길 6\n상설\n강원 강릉시 용강동 29번지\n109\n온누리상품권\nY\nY\n1977.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n3\n주문진종합시장\n상설+정기\n강원도 강릉시 주문진읍 구 시장길\n5일\n강원 강릉시 주문진읍 주문리 321-52번지\n77\n온누리상품권\nY\nY\n2006.0\n2015-12-31\nmedium\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n4\n주문진수산시장\n상설\n강원도 강릉시 주문진읍 시장1길 4-1\n상설\n강원 강릉시 주문진읍 주문리 312-91번지\n42\n온누리상품권\nY\nY\n2007.0\n2015-12-31\nsmall\nhigh\n강원도\n1549507\n19.0\n57.71\n23.29\n1\n0\n0\n\n\n\n\n\n\n\n\n각 지역마다 60대 이상인 인구가 평균보다 큰지 작은지를 알아보고, 시장의 갯수가 얼마나 되는지 알아보기. (X)\n\nmarket_pop.groupby(['region','old_up']).agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\n\nold_market_count\n\n\nregion\nold_up\n\n\n\n\n\n강원도\n1\n58\n\n\n경기도\n0\n130\n\n\n경상남도\n0\n155\n\n\n경상북도\n1\n149\n\n\n광주광역시\n0\n26\n\n\n대구광역시\n0\n109\n\n\n대전광역시\n0\n27\n\n\n부산광역시\n1\n169\n\n\n서울특별시\n0\n216\n\n\n세종특별시\n0\n4\n\n\n울산광역시\n0\n40\n\n\n인천광역시\n0\n46\n\n\n전라남도\n1\n108\n\n\n전라북도\n1\n60\n\n\n제주도\n0\n25\n\n\n충청남도\n1\n58\n\n\n충청북도\n1\n59\n\n\n\n\n\n\n\n1인 것과 0인 것끼리 합쳐서 알아보기\n\nmarket_pop.groupby('old_up').agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\nold_market_count\n\n\nold_up\n\n\n\n\n\n0\n778\n\n\n1\n661\n\n\n\n\n\n\n\n0 : 60대 이상인 인구가 평균보다 작은 곳의 시장 수는 778개 (경기도, 경상남도, 광주광역시, 대구광역시, 대전광역시, 서울특별시, 세종특별시, 울산광역시, 인천광역시, 제주도) 1 : 60대 이상인 인구가 평균보다 큰 곳의 시장 수는 661개 (강원도, 경상북도, 부산광역시, 전라남도, 전라븍도, 충청남도, 충청북도) 60대 이상인 인구가 평균보다 큰 곳의 시장 수가 아닌 곳보다 적다. 딱히 60대 이상인 인구가 많은 지역이 시장 수가 많다고는 볼 수 없다. 그럼에도 불구하고 60대 이상 인구가 전통시장에서 다른 연령대에 비해 돈을 많이 쓴다면, 해당 지역에서 시장 수가 많이는 없어도 돈을 많이 쓴다고 볼 수 있다. (해당 지역에서 대형마트 등 경쟁사가 적다면 당연히 전통시장에 몰릴 수도 있음.)\n※ 지역별 점포수, 지역별 마켓수 따로 데이터 프레임 만들기, 인구 비율 데이터 프레임\n\nmarket_pop.groupby(['region','youth_up']).agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\n\nold_market_count\n\n\nregion\nyouth_up\n\n\n\n\n\n강원도\n0\n58\n\n\n경기도\n1\n130\n\n\n경상남도\n0\n155\n\n\n경상북도\n0\n149\n\n\n광주광역시\n1\n26\n\n\n대구광역시\n1\n109\n\n\n대전광역시\n1\n27\n\n\n부산광역시\n1\n169\n\n\n서울특별시\n1\n216\n\n\n세종특별시\n0\n4\n\n\n울산광역시\n1\n40\n\n\n인천광역시\n1\n46\n\n\n전라남도\n0\n108\n\n\n전라북도\n0\n60\n\n\n제주도\n0\n25\n\n\n충청남도\n0\n58\n\n\n충청북도\n0\n59\n\n\n\n\n\n\n\n\nmarket_pop.groupby('youth_up').agg(old_market_count = ('market_name', 'count'))\n\n\n\n\n\n\n\n\nold_market_count\n\n\nyouth_up\n\n\n\n\n\n0\n676\n\n\n1\n763\n\n\n\n\n\n\n\n0 : 20~50세 인구가 평균보다 작은 곳의 시장 수는 676개 (강원도, 경상남도, 경상북도, 세종특별시, 전라남도, 전라북도, 제주도, 충청남도, 충청북도) 1 : 20~50세 인구가 평균보다 큰 곳의 시장 수는 763개 (경기도, 광주광역시, 대구광역시, 대전광역시, 부산광역시, 서울특별시, 울산광역시, 인천광역시) 20~50세 인구가 평균보다 큰 곳의 시장 수가 아닌 곳보다 크다.\n\n\n\n\nlevel_group = market_pop.groupby(['old_up','level'],as_index=False).agg(market_count = ('market_name', 'count'))\nlevel_group\n\n\n\n\n\n\n\n\nold_up\nlevel\nmarket_count\n\n\n\n\n0\n0\nhigh\n395\n\n\n1\n0\nintermediate\n300\n\n\n2\n0\nlow\n83\n\n\n3\n1\nhigh\n435\n\n\n4\n1\nintermediate\n178\n\n\n5\n1\nlow\n48\n\n\n\n\n\n\n\n60대 이상 인구가 평균보다 적은 지역에서의 level별 시장 수 : 395 / 300 / 83 60대 이상 인구가 평균보다 많은 지역에서의 level별 시장 수 : 435 / 178 / 48\n\nlevel_group2 = market_pop.groupby(['youth_up','level'],as_index=False).agg(market_count = ('market_name', 'count'))\nlevel_group2\n\n\n\n\n\n\n\n\nyouth_up\nlevel\nmarket_count\n\n\n\n\n0\n0\nhigh\n501\n\n\n1\n0\nintermediate\n145\n\n\n2\n0\nlow\n30\n\n\n3\n1\nhigh\n329\n\n\n4\n1\nintermediate\n333\n\n\n5\n1\nlow\n101\n\n\n\n\n\n\n\n20~50세 인구가 평균보다 적은 지역에서의 level별 시장 수 : 501 / 145 / 30 20~50세 인구가 평균보다 많은 지역에서의 level별 시장 수 : 329 / 333 / 101\n젊은 인구가 많은 지역에서 low인 시장이 많다. -&gt; 개선해야 젊은 인구가 많이 간다라고 가도 되나?"
  },
  {
    "objectID": "project1.html#편의시설이-high-인데-인구-많은데야-인구-많으면-편의시설-좋아",
    "href": "project1.html#편의시설이-high-인데-인구-많은데야-인구-많으면-편의시설-좋아",
    "title": "project1",
    "section": "편의시설이 high 인데 인구 많은데야? 인구 많으면 편의시설 좋아?",
    "text": "편의시설이 high 인데 인구 많은데야? 인구 많으면 편의시설 좋아?\n\nmarket_pop.query('level == \"high\"').groupby('region', as_index=False).agg(market_count=('market_name', 'count'),pop = ('total_pop', 'min')).sort_values('pop',ascending=False)\n\n\n\n\n\n\n\n\nregion\nmarket_count\npop\n\n\n\n\n1\n경기도\n74\n12522606\n\n\n8\n서울특별시\n83\n10022181\n\n\n7\n부산광역시\n68\n3513777\n\n\n2\n경상남도\n110\n3364702\n\n\n11\n인천광역시\n21\n2925815\n\n\n3\n경상북도\n100\n2702826\n\n\n5\n대구광역시\n36\n2487829\n\n\n15\n충청남도\n44\n2077649\n\n\n12\n전라남도\n93\n1908996\n\n\n13\n전라북도\n53\n1869711\n\n\n16\n충청북도\n31\n1583952\n\n\n0\n강원도\n46\n1549507\n\n\n6\n대전광역시\n12\n1518775\n\n\n4\n광주광역시\n20\n1472199\n\n\n10\n울산광역시\n15\n1173534\n\n\n14\n제주도\n20\n624395\n\n\n9\n세종특별시\n4\n210884\n\n\n\n\n\n\n\n편의시설이 잘 되어있는 시장이 많은 주변으로 인구 수가 많이 형성되어있다고 보기 어려움."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "만두만두",
    "section": "",
    "text": "안녕하세요, 데이터 분석 만두만두입니다."
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Recent posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nhw9\n\n\n로지스틱 회귀분석 개념\n\n\n\n정은서\n\n\n\n\n\n\n\n\n\n\n\n\nhw8\n\n\nADP 표본점수, covid 19, 카이제곱분포와 표본분산\n\n\n\n정은서\n\n\nSep 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw7\n\n\nt검정 연습문제\n\n\n\n정은서\n\n\nAug 5, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw6\n\n\n모평균에 대한 신뢰구간\n\n\n\n정은서\n\n\nJul 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw5\n\n\n표본분산 - n, n-1 비교\n\n\n\n정은서\n\n\nJul 29, 2024\n\n\n\n\n\n\n\n\n\n\n\n\ngraph\n\n\n그래프 종류와 코드\n\n\n\n정은서\n\n\nJul 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw4\n\n\n산점도와 막대그래프로 자료 표현\n\n\n\n정은서\n\n\nJul 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw3\n\n\n분포와 확률\n\n\n\n정은서\n\n\nJul 18, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw2\n\n\n데이터 파악하기\n\n\n\n정은서\n\n\nJul 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nhw1\n\n\n데이터 파악하기\n\n\n\n정은서\n\n\nJul 15, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw6/index.html",
    "href": "posts/hw6/index.html",
    "title": "hw6",
    "section": "",
    "text": "import pandas as pd\nwelfare = pd.read_spss('../../../Doit_Python/Data/Koweps_hpwc14_2019_beta2.sav')\nwelfare.head()\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n5 rows × 830 columns\n\n\n\n\n\n\n\nimport numpy as np\ndf = welfare[['h14_g3','p1402_8aq1']]\ndf = df.rename(columns = {'h14_g3' : 'sex',\n                           'p1402_8aq1' : 'income' })\ndf = df.dropna(subset='income')\ndf['sex'] = np.where(df['sex'] == 1, 'male', 'female')\ndf.head()\n\n\n\n\n\n\n\n\nsex\nincome\n\n\n\n\n2\nmale\n107.0\n\n\n3\nmale\n192.0\n\n\n7\nfemale\n27.0\n\n\n8\nfemale\n27.0\n\n\n14\nmale\n338.0\n\n\n\n\n\n\n\n\n\n\n\nmale_income = df.loc[df['sex']=='male', 'income']\nfemale_income = df.loc[df['sex'] == 'female', 'income']\nmale_bar = male_income.mean()\nfemale_bar = female_income.mean()\nmale_scale = np.sqrt(male_income.var(ddof=1))\nfemale_scale = np.sqrt(female_income.var(ddof=1))\nmale_n = len(male_income)\nfemale_n = len(female_income)\n\nfrom scipy.stats import norm\n\nz0025 = norm.ppf(0.975, loc=0 , scale=1)\nmale_a = male_bar + z0025*male_scale/np.sqrt(male_n)\nmale_b = male_bar - z0025*male_scale/np.sqrt(male_n)\nprint(\"male의 오른쪽 신뢰구간 위치 :\", male_a)\nprint(\"male의 왼쪽 신뢰구간 위치 :\", male_b)\n\nfemale_a = female_bar + z0025*female_scale/np.sqrt(female_n)\nfemale_b = female_bar - z0025*female_scale/np.sqrt(female_n)\nprint(\"female의 오른쪽 신뢰구간 위치 :\", female_a)\nprint(\"female의 왼쪽 신뢰구간 위치 :\", female_b)\n\nmale의 오른쪽 신뢰구간 위치 : 357.96254968365116\nmale의 왼쪽 신뢰구간 위치 : 340.11259229974775\nfemale의 오른쪽 신뢰구간 위치 : 191.75573685327993\nfemale의 왼쪽 신뢰구간 위치 : 180.83045468346842\n\n\n\n\n\n\nsex_income = df.groupby('sex', as_index=False).agg(mean_income = ('income','mean'))\nsex_income\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571\n\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.barplot(data=sex_income , x='sex', y='mean_income')\nplt.plot([0,0], [female_a,female_b], color='red')\nplt.plot([1,1], [male_a, male_b], color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw6/index.html#데이터-불러오기",
    "href": "posts/hw6/index.html#데이터-불러오기",
    "title": "hw6",
    "section": "",
    "text": "import pandas as pd\nwelfare = pd.read_spss('../../../Doit_Python/Data/Koweps_hpwc14_2019_beta2.sav')\nwelfare.head()\n\n\n\n\n\n\n\n\nh14_id\nh14_ind\nh14_sn\nh14_merkey\nh_new\nh14_cobf\np14_wsc\np14_wsl\np14_wgc\np14_wgl\n...\nwc14_64\nwc14_65\nwc14_5aq4\nwc14_5aq5\nwc14_5aq6\nh14_pers_income1\nh14_pers_income2\nh14_pers_income3\nh14_pers_income4\nh14_pers_income5\n\n\n\n\n0\n2.0\n1.0\n1.0\n20101.0\n0.0\nNaN\n0.291589\n0.291589\n1307.764781\n1307.764781\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n1\n3.0\n1.0\n1.0\n30101.0\n0.0\nNaN\n0.419753\n0.419753\n1882.570960\n1882.570960\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n2\n4.0\n1.0\n1.0\n40101.0\n0.0\nNaN\n0.265263\n0.265980\n1189.691668\n1192.908537\n...\nNaN\n\nNaN\nNaN\nNaN\nNaN\n1284.0\nNaN\n0.0\nNaN\n\n\n3\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n0.494906\n0.495941\n2219.630833\n2224.273816\n...\n1.0\n.\n2.0\n4.0\n4.0\n2304.0\nNaN\n1800.0\n0.0\nNaN\n\n\n4\n6.0\n1.0\n1.0\n60101.0\n0.0\nNaN\n1.017935\n1.017935\n4565.389177\n4565.389177\n...\n1.0\n.\n1.0\n5.0\n2.0\nNaN\nNaN\nNaN\n0.0\nNaN\n\n\n\n\n5 rows × 830 columns"
  },
  {
    "objectID": "posts/hw6/index.html#필요한-데이터만-가져오기",
    "href": "posts/hw6/index.html#필요한-데이터만-가져오기",
    "title": "hw6",
    "section": "",
    "text": "import numpy as np\ndf = welfare[['h14_g3','p1402_8aq1']]\ndf = df.rename(columns = {'h14_g3' : 'sex',\n                           'p1402_8aq1' : 'income' })\ndf = df.dropna(subset='income')\ndf['sex'] = np.where(df['sex'] == 1, 'male', 'female')\ndf.head()\n\n\n\n\n\n\n\n\nsex\nincome\n\n\n\n\n2\nmale\n107.0\n\n\n3\nmale\n192.0\n\n\n7\nfemale\n27.0\n\n\n8\nfemale\n27.0\n\n\n14\nmale\n338.0"
  },
  {
    "objectID": "posts/hw6/index.html#신뢰구간-구하기",
    "href": "posts/hw6/index.html#신뢰구간-구하기",
    "title": "hw6",
    "section": "",
    "text": "male_income = df.loc[df['sex']=='male', 'income']\nfemale_income = df.loc[df['sex'] == 'female', 'income']\nmale_bar = male_income.mean()\nfemale_bar = female_income.mean()\nmale_scale = np.sqrt(male_income.var(ddof=1))\nfemale_scale = np.sqrt(female_income.var(ddof=1))\nmale_n = len(male_income)\nfemale_n = len(female_income)\n\nfrom scipy.stats import norm\n\nz0025 = norm.ppf(0.975, loc=0 , scale=1)\nmale_a = male_bar + z0025*male_scale/np.sqrt(male_n)\nmale_b = male_bar - z0025*male_scale/np.sqrt(male_n)\nprint(\"male의 오른쪽 신뢰구간 위치 :\", male_a)\nprint(\"male의 왼쪽 신뢰구간 위치 :\", male_b)\n\nfemale_a = female_bar + z0025*female_scale/np.sqrt(female_n)\nfemale_b = female_bar - z0025*female_scale/np.sqrt(female_n)\nprint(\"female의 오른쪽 신뢰구간 위치 :\", female_a)\nprint(\"female의 왼쪽 신뢰구간 위치 :\", female_b)\n\nmale의 오른쪽 신뢰구간 위치 : 357.96254968365116\nmale의 왼쪽 신뢰구간 위치 : 340.11259229974775\nfemale의 오른쪽 신뢰구간 위치 : 191.75573685327993\nfemale의 왼쪽 신뢰구간 위치 : 180.83045468346842"
  },
  {
    "objectID": "posts/hw6/index.html#groupby로-성별별-평균-income-데이터-만들기",
    "href": "posts/hw6/index.html#groupby로-성별별-평균-income-데이터-만들기",
    "title": "hw6",
    "section": "",
    "text": "sex_income = df.groupby('sex', as_index=False).agg(mean_income = ('income','mean'))\nsex_income\n\n\n\n\n\n\n\n\nsex\nmean_income\n\n\n\n\n0\nfemale\n186.293096\n\n\n1\nmale\n349.037571"
  },
  {
    "objectID": "posts/hw6/index.html#성별별-평균-income-데이터로-막대그래프-그리고-신뢰구간-그리기",
    "href": "posts/hw6/index.html#성별별-평균-income-데이터로-막대그래프-그리고-신뢰구간-그리기",
    "title": "hw6",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.barplot(data=sex_income , x='sex', y='mean_income')\nplt.plot([0,0], [female_a,female_b], color='red')\nplt.plot([1,1], [male_a, male_b], color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html",
    "href": "posts/hw4/index.html",
    "title": "hw4",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.scatterplot(data = mpg, x='cty', y='hwy')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#mpg-데이터의-cty도시연비와-hwy고속도로-연비-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-cty-y축은-hwy로-된-산점도를-만들어보세요.",
    "href": "posts/hw4/index.html#mpg-데이터의-cty도시연비와-hwy고속도로-연비-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-cty-y축은-hwy로-된-산점도를-만들어보세요.",
    "title": "hw4",
    "section": "",
    "text": "import pandas as pd\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.clf()\nsns.scatterplot(data = mpg, x='cty', y='hwy')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#미국의-지역별-인구통계-정보를-담은-midwest.csv를-이용해-전체-인구와-아시아인-인구-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-poptotal전체-인구-y축은-popasian아시아인-인구으로-된-산점도를-만들어-보세요.-전체-인구는-50만-명-이하-아시아인-인구는-1만-명-이하인-지역만-산점도에-표시되게-설정하세요.",
    "href": "posts/hw4/index.html#미국의-지역별-인구통계-정보를-담은-midwest.csv를-이용해-전체-인구와-아시아인-인구-간에-어떤-관계가-있는지-알아보려고-합니다.-x축은-poptotal전체-인구-y축은-popasian아시아인-인구으로-된-산점도를-만들어-보세요.-전체-인구는-50만-명-이하-아시아인-인구는-1만-명-이하인-지역만-산점도에-표시되게-설정하세요.",
    "title": "hw4",
    "section": "미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.",
    "text": "미국의 지역별 인구통계 정보를 담은 midwest.csv를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.\n\nmidwest = pd.read_csv('../../midwest.csv')\n\nplt.clf()\nsns.scatterplot(data=midwest , x= 'poptotal' , y='popasian').set(xlim = [0,500000], ylim=[0,10000])\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#어떤-회사에서-생산한-suv-차종의-도시-연비가-높은지-알아보려고-합니다.-suv-차종을-대상으로-cty도시-연비-평균이-가장-높은-회사-다섯-곳을-막대-그래프로-표현해-보세요.-막대는-연비가-높은-순으로-정렬하세요.",
    "href": "posts/hw4/index.html#어떤-회사에서-생산한-suv-차종의-도시-연비가-높은지-알아보려고-합니다.-suv-차종을-대상으로-cty도시-연비-평균이-가장-높은-회사-다섯-곳을-막대-그래프로-표현해-보세요.-막대는-연비가-높은-순으로-정렬하세요.",
    "title": "hw4",
    "section": "어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.",
    "text": "어떤 회사에서 생산한 ‘suv’ 차종의 도시 연비가 높은지 알아보려고 합니다. ‘suv’ 차종을 대상으로 cty(도시 연비) 평균이 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.\n\nmpg_group = mpg.query(\"category == 'suv'\").groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).sort_values('cty_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group , x='manufacturer', y='cty_mean')\nplt.show()"
  },
  {
    "objectID": "posts/hw4/index.html#자동차-중에-어떤-category자동차-종류가-많은지-알아보려고-합니다.-sns.barplot을-이용해-자동차-종류별-빈도를-표현한-막대-그래프를-만들어-보세요.-막대는-빈도가-높은-순으로-정렬하세요.",
    "href": "posts/hw4/index.html#자동차-중에-어떤-category자동차-종류가-많은지-알아보려고-합니다.-sns.barplot을-이용해-자동차-종류별-빈도를-표현한-막대-그래프를-만들어-보세요.-막대는-빈도가-높은-순으로-정렬하세요.",
    "title": "hw4",
    "section": "자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.",
    "text": "자동차 중에 어떤 category(자동차 종류)가 많은지 알아보려고 합니다. sns.barplot()을 이용해 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요. 막대는 빈도가 높은 순으로 정렬하세요.\n\nmpg_group2 = mpg.groupby('category',as_index=False).agg(category_count = ('category', 'count') ).sort_values('category_count' , ascending = False)\nplt.clf()\nsns.barplot(data=mpg_group2, x='category', y='category_count')\nplt.show()"
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\ndf = pd.read_csv('../../mpg.csv')\npd.set_option('display.max_columns', None)\n\ndf.assign(type = np.where(df['displ']&lt;=4, '4이하', np.where(df['displ']&gt;=5, '5이상', '기타'))).groupby('type').agg(type_mean = ('hwy','mean'))\n\n\n\n\n\n\n\n\ntype_mean\n\n\ntype\n\n\n\n\n\n4이하\n25.963190\n\n\n5이상\n18.078947\n\n\n기타\n17.151515\n\n\n\n\n\n\n\n4이하 가 5이상보다 평균이 높다는 것을 알 수 있다.\n\n\n\nprint(\"4이하인 경우 평균 :\",df.query('displ &lt;= 4')['hwy'].mean())\nprint(\"5이상인 경우 평균 :\",df.query('displ &gt;=5')['hwy'].mean())\n\n4이하인 경우 평균 : 25.96319018404908\n5이상인 경우 평균 : 18.07894736842105"
  },
  {
    "objectID": "posts/hw2/index.html#자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw2/index.html#자동차-배기량에-따라-고속도로-연비가-다른지-알아보려고-합니다.-displ배기량이-4-이하인-자동차와-5-이상인-자동차-중-어떤-자동차의-hwy고속도로-연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\ndf = pd.read_csv('../../mpg.csv')\npd.set_option('display.max_columns', None)\n\ndf.assign(type = np.where(df['displ']&lt;=4, '4이하', np.where(df['displ']&gt;=5, '5이상', '기타'))).groupby('type').agg(type_mean = ('hwy','mean'))\n\n\n\n\n\n\n\n\ntype_mean\n\n\ntype\n\n\n\n\n\n4이하\n25.963190\n\n\n5이상\n18.078947\n\n\n기타\n17.151515\n\n\n\n\n\n\n\n4이하 가 5이상보다 평균이 높다는 것을 알 수 있다.\n\n\n\nprint(\"4이하인 경우 평균 :\",df.query('displ &lt;= 4')['hwy'].mean())\nprint(\"5이상인 경우 평균 :\",df.query('displ &gt;=5')['hwy'].mean())\n\n4이하인 경우 평균 : 25.96319018404908\n5이상인 경우 평균 : 18.07894736842105"
  },
  {
    "objectID": "posts/hw2/index.html#자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota-중-어느-manufacturer자동차-제조-회사의-cty도시연비-평균이-더-높은지-알아보세요.",
    "href": "posts/hw2/index.html#자동차-제조-회사에-따라-도시-연비가-어떻게-다른지-알아보려고-합니다.-audi와-toyota-중-어느-manufacturer자동차-제조-회사의-cty도시연비-평균이-더-높은지-알아보세요.",
    "title": "hw2",
    "section": "자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시연비) 평균이 더 높은지 알아보세요.",
    "text": "자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. ‘audi’와 ’toyota’ 중 어느 manufacturer(자동차 제조 회사)의 cty(도시연비) 평균이 더 높은지 알아보세요.\n\ndf.groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).query(\"manufacturer == 'audi' | manufacturer=='toyota'\")\n\n\n\n\n\n\n\n\nmanufacturer\ncty_mean\n\n\n\n\n0\naudi\n17.611111\n\n\n13\ntoyota\n18.529412\n\n\n\n\n\n\n\ntoyota 제조회사가 도시연비 평균이 더 높다.\n\n다른 방법\n\ndf.groupby('manufacturer', as_index=False).agg(cty_mean = ('cty', 'mean')).query(\"manufacturer in ['audi','toyota']\")\n\n\n\n\n\n\n\n\nmanufacturer\ncty_mean\n\n\n\n\n0\naudi\n17.611111\n\n\n13\ntoyota\n18.529412"
  },
  {
    "objectID": "posts/hw2/index.html#chevrolet-ford-honda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "href": "posts/hw2/index.html#chevrolet-ford-honda-자동차의-고속도로-연비-평균을-알아보려고-합니다.-세-회사의-데이터를-추출한-다음-hwy-전체-평균을-구해-보세요.",
    "title": "hw2",
    "section": "‘chevrolet’, ‘ford’, ‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.",
    "text": "‘chevrolet’, ‘ford’, ‘honda’ 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.\n\nprint(\"세 회사 데이터에 대한 hwy 전체 평균 :\",df.query(\"manufacturer in ['chevrolet','ford','honda']\")['hwy'].mean())\n\n세 회사 데이터에 대한 hwy 전체 평균 : 22.50943396226415"
  },
  {
    "objectID": "posts/hw2/index.html#audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "href": "posts/hw2/index.html#audi에서-생산한-자동차-중에-어떤-자동차-모델의-hwy고속도로-연비가-높은지-알아보려고-합니다.-audi에서-생산한-자동차-중-hwy가-15위에-해당하는-자동차의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.",
    "text": "’audi’에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. ’audi’에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차의 데이터를 출력하세요.\n\nprint(\"=\"*70, \"\\n 1. audi 중 hwy가 높은 순의 자동차 모델 \\n\")\ndf.query('manufacturer == \"audi\"').groupby('model').agg(hwy_mean = ('hwy' , 'mean'))\n\n====================================================================== \n 1. audi 중 hwy가 높은 순의 자동차 모델 \n\n\n\n\n\n\n\n\n\n\nhwy_mean\n\n\nmodel\n\n\n\n\n\na4\n28.285714\n\n\na4 quattro\n25.750000\n\n\na6 quattro\n24.000000\n\n\n\n\n\n\n\n\nprint(\"\\n\",\"=\"*70, \"\\n 2. audi 중 hwy가 1~5위인 자동차 데이터 \\n\")\ndf.query('manufacturer == \"audi\"').sort_values('hwy', ascending=False).head(5)\n\n\n ====================================================================== \n 2. audi 중 hwy가 1~5위인 자동차 데이터 \n\n\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n9\naudi\na4 quattro\n2.0\n2008\n4\nmanual(m6)\n4\n20\n28\np\ncompact"
  },
  {
    "objectID": "posts/hw2/index.html#mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "href": "posts/hw2/index.html#mpg-데이터-복사본을-만들고-cty와-hwy를-더한-합산-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.",
    "text": "mpg 데이터 복사본을 만들고, cty와 hwy를 더한 ’합산 연비 변수’를 추가하세요.\n\nmpg = df.copy()\nmpg= mpg.assign(sum_cty_hwy = mpg['cty']+mpg['hwy'])\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42"
  },
  {
    "objectID": "posts/hw2/index.html#앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "href": "posts/hw2/index.html#앞에서-만든-합산-연비-변수를-2로-나눠-평균-연비-변수를-추가하세요.",
    "title": "hw2",
    "section": "앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.",
    "text": "앞에서 만든 ’합산 연비 변수’를 2로 나눠 ’평균 연비 변수’를 추가하세요.\n\nmpg = mpg.assign(avg_cty_hwy = mpg['sum_cty_hwy']/2)\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\navg_cty_hwy\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n47\n23.5\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n50\n25.0\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n51\n25.5\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n51\n25.5\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n42\n21.0"
  },
  {
    "objectID": "posts/hw2/index.html#평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "href": "posts/hw2/index.html#평균-연비-변수가-가장-높은-자동차-3종의-데이터를-출력하세요.",
    "title": "hw2",
    "section": "’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.",
    "text": "’평균 연비 변수’가 가장 높은 자동차 3종의 데이터를 출력하세요.\n\nmpg.sort_values('avg_cty_hwy', ascending=False).head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\navg_cty_hwy\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/hw2/index.html#번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "href": "posts/hw2/index.html#번-문제를-해결할-수-있는-하나로-연결된-pandas-구문을-만들어-실행해-보세요.-데이터는-복사본-대신-mpg-원본을-이용하세요.",
    "title": "hw2",
    "section": "1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.",
    "text": "1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.\n\ndf.assign(sum_cty_hwy = df['cty']+df['hwy']\n          , avg_cty_hwy = lambda x: x['sum_cty_hwy']/2) \\\n    .sort_values('avg_cty_hwy', ascending=False) \\\n    .head(3)\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\nsum_cty_hwy\navg_cty_hwy\n\n\n\n\n221\nvolkswagen\nnew beetle\n1.9\n1999\n4\nmanual(m5)\nf\n35\n44\nd\nsubcompact\n79\n39.5\n\n\n212\nvolkswagen\njetta\n1.9\n1999\n4\nmanual(m5)\nf\n33\n44\nd\ncompact\n77\n38.5\n\n\n222\nvolkswagen\nnew beetle\n1.9\n1999\n4\nauto(l4)\nf\n29\n41\nd\nsubcompact\n70\n35.0"
  },
  {
    "objectID": "posts/graph/index.html",
    "href": "posts/graph/index.html",
    "title": "graph",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=mpg, x='displ', y='hwy', hue='drv').set(xlim=[3,6], ylim=[10,30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\npx.scatter(data_frame = mpg, x = \"displ\" , y=\"hwy\", color = \"drv\")\n\n                                                \n\n\n\n\n\n\nmpg_group = mpg.groupby('drv', as_index=False).agg(hwy_mean = ('hwy', 'mean')).sort_values('hwy_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group, x='drv', y='hwy_mean', hue='drv')\nplt.show()\n\n\n\n\n\n\n\n\n\nmpg_group3 = mpg.groupby('drv').agg(drv_count = ('drv','count')).sort_values('drv_count', ascending=False)\nplt.clf()\nsns.barplot(data= mpg_group3, x='drv', y='drv_count', hue='drv')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#그래프-그리기",
    "href": "posts/graph/index.html#그래프-그리기",
    "title": "graph",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nmpg = pd.read_csv('../../mpg.csv')\nmpg.shape\n\n(234, 11)\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=mpg, x='displ', y='hwy', hue='drv').set(xlim=[3,6], ylim=[10,30])\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\npx.scatter(data_frame = mpg, x = \"displ\" , y=\"hwy\", color = \"drv\")\n\n                                                \n\n\n\n\n\n\nmpg_group = mpg.groupby('drv', as_index=False).agg(hwy_mean = ('hwy', 'mean')).sort_values('hwy_mean', ascending=False)\nplt.clf()\nsns.barplot(data=mpg_group, x='drv', y='hwy_mean', hue='drv')\nplt.show()\n\n\n\n\n\n\n\n\n\nmpg_group3 = mpg.groupby('drv').agg(drv_count = ('drv','count')).sort_values('drv_count', ascending=False)\nplt.clf()\nsns.barplot(data= mpg_group3, x='drv', y='drv_count', hue='drv')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-countplot-사용한-막대-그래프",
    "href": "posts/graph/index.html#sns의-countplot-사용한-막대-그래프",
    "title": "graph",
    "section": "sns의 countplot 사용한 막대 그래프",
    "text": "sns의 countplot 사용한 막대 그래프\n\nplt.clf()\nsns.countplot(data=mpg, x='drv', hue='drv')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.countplot(data=mpg, x='drv', hue='drv', order=mpg['drv'].value_counts().index)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.countplot(data=mpg, x='drv', hue='drv', order=['r','4','f'])\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프",
    "href": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프",
    "title": "graph",
    "section": "sns의 lineplot() 사용한 선 그래프",
    "text": "sns의 lineplot() 사용한 선 그래프\n\neconomics = pd.read_csv('../../economics.csv')\n\nplt.clf()\nsns.lineplot(data=economics , x='date', y='unemploy')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프---x축-주의",
    "href": "posts/graph/index.html#sns의-lineplot-사용한-선-그래프---x축-주의",
    "title": "graph",
    "section": "sns의 lineplot() 사용한 선 그래프 - x축 주의",
    "text": "sns의 lineplot() 사용한 선 그래프 - x축 주의\n\neconomics['date'] = pd.to_datetime(economics['date'])\neconomics['year'] = economics['date'].dt.year\nplt.clf()\nsns.lineplot(data=economics, x='year', y='unemploy')\nplt.show()"
  },
  {
    "objectID": "posts/graph/index.html#sns의-boxplot-사용한-상자-그림",
    "href": "posts/graph/index.html#sns의-boxplot-사용한-상자-그림",
    "title": "graph",
    "section": "sns의 boxplot() 사용한 상자 그림",
    "text": "sns의 boxplot() 사용한 상자 그림\n\nplt.clf()\nsns.boxplot(data= mpg, x='drv', y='hwy', hue='drv')\nplt.show()"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "about.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "about.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "about.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "href": "about.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "title": "hw1",
    "section": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.",
    "text": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nimport numpy as np\n\n# 가격 평균\nprint(\"가격 평균 : \",np.mean(df['가격']))\n\n#판매량 평균\nprint(\"판매량 평균 : \",np.mean(df['판매량']))\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0"
  },
  {
    "objectID": "about.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "about.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('mpg.csv')\n\ndf_copy = df.copy()\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "about.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "about.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_copy=df_copy.rename(columns={'cty' : 'city', 'hwy' : 'highway'})\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "about.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "href": "about.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "title": "hw1",
    "section": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.",
    "text": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\ndf_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "about.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "about.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('midwest.csv')\nmidwest.head()\n\n#pd.set_option('display.max_columns', None)\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns\n\n\n\n\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n결측치가 하나도 없는 데이터이다. 범주 컬럼은 3개이고, 그 외에는 다 수치컬럼이다."
  },
  {
    "objectID": "about.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "href": "about.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "title": "hw1",
    "section": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정",
    "text": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns"
  },
  {
    "objectID": "about.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "about.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['pct'] = (midwest['asian']/midwest['total'])*100\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\nmidwest['pct'].plot.hist()\nplt.show()"
  },
  {
    "objectID": "about.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "href": "about.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "title": "hw1",
    "section": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.",
    "text": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n\nprint( \"아시아 인구 백분율 전체 평균 :\",np.mean(midwest['pct']) )\n\n아시아 인구 백분율 전체 평균 : 0.4872461834357345\n\n\n\nmidwest['size'] = np.where(midwest['pct'] &gt; np.mean(midwest['pct']) , 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "about.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "href": "about.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "title": "hw1",
    "section": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.",
    "text": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nplt.clf()\nmidwest['size'].value_counts().plot.bar(rot=0)\nplt.show()"
  },
  {
    "objectID": "posts/hw1/index.html",
    "href": "posts/hw1/index.html",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "href": "posts/hw1/index.html#다음-표의-내용을-데이터-프레임으로-만들어-출력해-보세요.",
    "title": "hw1",
    "section": "",
    "text": "import pandas as pd\n\ndf = pd.DataFrame({'제품' : ['사과', '딸기', '수박'],\n                   '가격' : [1800, 1500, 3000],\n                   '판매량' : [24,38,13]})\ndf\n\n\n\n\n\n\n\n\n제품\n가격\n판매량\n\n\n\n\n0\n사과\n1800\n24\n\n\n1\n딸기\n1500\n38\n\n\n2\n수박\n3000\n13"
  },
  {
    "objectID": "posts/hw1/index.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "href": "posts/hw1/index.html#앞에서-만든-데이터-프레임을-이용해-과일의-가격-평균과-판매량-평균을-구해-보세요.",
    "title": "hw1",
    "section": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.",
    "text": "앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해 보세요.\n\nimport numpy as np\n\n# 가격 평균\nprint(\"가격 평균 : \",np.mean(df['가격']))\n\n#판매량 평균\nprint(\"판매량 평균 : \",np.mean(df['판매량']))\n\n가격 평균 :  2100.0\n판매량 평균 :  25.0"
  },
  {
    "objectID": "posts/hw1/index.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "href": "posts/hw1/index.html#mpg-데이터를-불러와-복사본을-만드세요.",
    "title": "hw1",
    "section": "mpg 데이터를 불러와 복사본을 만드세요.",
    "text": "mpg 데이터를 불러와 복사본을 만드세요.\n\nimport pandas as pd\n\ndf = pd.read_csv('../../mpg.csv')\n\ndf_copy = df.copy()\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "posts/hw1/index.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "href": "posts/hw1/index.html#복사본-데이터를-이용해-cty는-city로-hwy는-highway로-수정하세요.",
    "title": "hw1",
    "section": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.",
    "text": "복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.\n\ndf_copy=df_copy.rename(columns={'cty' : 'city', 'hwy' : 'highway'})\ndf_copy\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n229\nvolkswagen\npassat\n2.0\n2008\n4\nauto(s6)\nf\n19\n28\np\nmidsize\n\n\n230\nvolkswagen\npassat\n2.0\n2008\n4\nmanual(m6)\nf\n21\n29\np\nmidsize\n\n\n231\nvolkswagen\npassat\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\nmidsize\n\n\n232\nvolkswagen\npassat\n2.8\n1999\n6\nmanual(m5)\nf\n18\n26\np\nmidsize\n\n\n233\nvolkswagen\npassat\n3.6\n2008\n6\nauto(s6)\nf\n17\n26\np\nmidsize\n\n\n\n\n234 rows × 11 columns"
  },
  {
    "objectID": "posts/hw1/index.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "href": "posts/hw1/index.html#데이터-일부를-출력해-변수명이-바뀌었는지-확인해-보세요.-다음과-같은-결과물이-출력되어야-합니다.",
    "title": "hw1",
    "section": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.",
    "text": "데이터 일부를 출력해 변수명이 바뀌었는지 확인해 보세요. 다음과 같은 결과물이 출력되어야 합니다.\n\ndf_copy.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncity\nhighway\nfl\ncategory\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact"
  },
  {
    "objectID": "posts/hw1/index.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "href": "posts/hw1/index.html#midwest.csv를-불러와-데이터의-특징을-파악하세요.",
    "title": "hw1",
    "section": "midwest.csv를 불러와 데이터의 특징을 파악하세요.",
    "text": "midwest.csv를 불러와 데이터의 특징을 파악하세요.\n\nimport pandas as pd\n\nmidwest = pd.read_csv('../../midwest.csv')\nmidwest.head()\n\n#pd.set_option('display.max_columns', None)\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\npoptotal\npopdensity\npopwhite\npopblack\npopamerindian\npopasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns\n\n\n\n\nmidwest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 437 entries, 0 to 436\nData columns (total 28 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   PID                   437 non-null    int64  \n 1   county                437 non-null    object \n 2   state                 437 non-null    object \n 3   area                  437 non-null    float64\n 4   poptotal              437 non-null    int64  \n 5   popdensity            437 non-null    float64\n 6   popwhite              437 non-null    int64  \n 7   popblack              437 non-null    int64  \n 8   popamerindian         437 non-null    int64  \n 9   popasian              437 non-null    int64  \n 10  popother              437 non-null    int64  \n 11  percwhite             437 non-null    float64\n 12  percblack             437 non-null    float64\n 13  percamerindan         437 non-null    float64\n 14  percasian             437 non-null    float64\n 15  percother             437 non-null    float64\n 16  popadults             437 non-null    int64  \n 17  perchsd               437 non-null    float64\n 18  percollege            437 non-null    float64\n 19  percprof              437 non-null    float64\n 20  poppovertyknown       437 non-null    int64  \n 21  percpovertyknown      437 non-null    float64\n 22  percbelowpoverty      437 non-null    float64\n 23  percchildbelowpovert  437 non-null    float64\n 24  percadultpoverty      437 non-null    float64\n 25  percelderlypoverty    437 non-null    float64\n 26  inmetro               437 non-null    int64  \n 27  category              437 non-null    object \ndtypes: float64(15), int64(10), object(3)\nmemory usage: 95.7+ KB\n\n\n결측치가 하나도 없는 데이터이다. 범주 컬럼은 3개이고, 그 외에는 다 수치컬럼이다."
  },
  {
    "objectID": "posts/hw1/index.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "href": "posts/hw1/index.html#poptotal전체인구-변수를-total로-popasian아시아-인구-변수를-asian으로-수정",
    "title": "hw1",
    "section": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정",
    "text": "poptotal(전체인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정\n\nmidwest = midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercollege\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n19.631392\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n11.243308\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n17.033819\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n17.278954\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n14.475999\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n\n\n\n\n5 rows × 28 columns"
  },
  {
    "objectID": "posts/hw1/index.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "href": "posts/hw1/index.html#total-asian-변수를-이용해-전체-인구-대비-아시아-인구-백분율-파생변수를-추가하고-히스토그램을-만들어-분포를-살펴보세요.",
    "title": "hw1",
    "section": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.",
    "text": "total, asian 변수를 이용해 ‘전체 인구 대비 아시아 인구 백분율’ 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.\n\nmidwest['pct'] = (midwest['asian']/midwest['total'])*100\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npercprof\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n4.355859\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n2.870315\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n4.488572\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n4.197800\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n3.367680\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\n\n\n\n\n5 rows × 29 columns\n\n\n\n\nimport matplotlib.pyplot as plt\n\nplt.clf()\nmidwest['pct'].plot.hist()\nplt.show()"
  },
  {
    "objectID": "posts/hw1/index.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "href": "posts/hw1/index.html#아시아-인구-백분율-전체-평균을-구하고-평균을-초과하면-large-그-외에는-small을-부여한-파생변수를-만들어-보세요.",
    "title": "hw1",
    "section": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.",
    "text": "아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 ‘large’, 그 외에는 ’small’을 부여한 파생변수를 만들어 보세요.\n\nimport numpy as np\n\nprint( \"아시아 인구 백분율 전체 평균 :\",np.mean(midwest['pct']) )\n\n아시아 인구 백분율 전체 평균 : 0.4872461834357345\n\n\n\nmidwest['size'] = np.where(midwest['pct'] &gt; np.mean(midwest['pct']) , 'large', 'small')\nmidwest.head()\n\n\n\n\n\n\n\n\nPID\ncounty\nstate\narea\ntotal\npopdensity\npopwhite\npopblack\npopamerindian\nasian\n...\npoppovertyknown\npercpovertyknown\npercbelowpoverty\npercchildbelowpovert\npercadultpoverty\npercelderlypoverty\ninmetro\ncategory\npct\nsize\n\n\n\n\n0\n561\nADAMS\nIL\n0.052\n66090\n1270.961540\n63917\n1702\n98\n249\n...\n63628\n96.274777\n13.151443\n18.011717\n11.009776\n12.443812\n0\nAAR\n0.376759\nsmall\n\n\n1\n562\nALEXANDER\nIL\n0.014\n10626\n759.000000\n7054\n3496\n19\n48\n...\n10529\n99.087145\n32.244278\n45.826514\n27.385647\n25.228976\n0\nLHR\n0.451722\nsmall\n\n\n2\n563\nBOND\nIL\n0.022\n14991\n681.409091\n14477\n429\n35\n16\n...\n14235\n94.956974\n12.068844\n14.036061\n10.852090\n12.697410\n0\nAAR\n0.106731\nsmall\n\n\n3\n564\nBOONE\nIL\n0.017\n30806\n1812.117650\n29344\n127\n46\n150\n...\n30337\n98.477569\n7.209019\n11.179536\n5.536013\n6.217047\n1\nALU\n0.486918\nsmall\n\n\n4\n565\nBROWN\nIL\n0.018\n5836\n324.222222\n5264\n547\n14\n5\n...\n4815\n82.505140\n13.520249\n13.022889\n11.143211\n19.200000\n0\nAAR\n0.085675\nsmall\n\n\n\n\n5 rows × 30 columns"
  },
  {
    "objectID": "posts/hw1/index.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "href": "posts/hw1/index.html#large와-small에-해당하는-지역이-얼마나-많은지-빈도표와-빈도-막대-그래프를-만들어-확인해-보세요.",
    "title": "hw1",
    "section": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.",
    "text": "’large’와 ’small’에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보세요.\n\nplt.clf()\nmidwest['size'].value_counts().plot.bar(rot=0)\nplt.show()"
  },
  {
    "objectID": "posts/hw3/index.html",
    "href": "posts/hw3/index.html",
    "title": "hw3",
    "section": "",
    "text": "1. 정규분포 pdf 값을 계산하는 자신만의 파이썬 함수를 정의하고, 정규분포 mu = 3, sigma = 2의 pdf를 그릴 것.\n\ndef norm(x, mu, sigma):\n    import numpy as np\n    a = 1/(sigma* np.sqrt(2*np.pi))\n    b = np.exp( -(x-mu)**2 / (2*sigma**2))\n    return a*b\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx=np.linspace(-20,20,1000)\ny= norm(x, mu=3, sigma=2)\n\nplt.clf()\nplt.plot(x, y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n—\n\n\n2. 파이썬 scipy 패키지 사용해서 다음과 같은 확률을 구하시오.\n\nX ~ N(2, 3^2)\n\n\n1) P(X&lt;3)\n\n\n2) P(2&lt;X&lt;5)\n\n\n3) P(X&lt;3 or X&gt;7)\n\nfrom scipy.stats import norm\n\nprint(\"1) P(X&lt;3) :\",norm.cdf(3, loc=2, scale=3))\nprint(\"2) P(2&lt;X&lt;5) :\", norm.cdf(5, loc=2, scale=3) - norm.cdf(2, loc=2, scale=3))\nprint(\"3) P(X&lt;3 or X&gt;7) :\", norm.cdf(3, loc=2, scale=3) + (1-norm.cdf(7,loc=2,scale=3)))\n\n1) P(X&lt;3) : 0.6305586598182363\n2) P(2&lt;X&lt;5) : 0.3413447460685429\n3) P(X&lt;3 or X&gt;7) : 0.678349012091051\n\n\n\n\n\n—\n\n\n3. LS 빅데이터 스쿨 학생들의 중간고사 점수는 평균이 30이고, 분산이 4인 정규분포를 따른다.\n\n\n상위 5%에 해당하는 학생의 점수는?\n\nprint(\"상위 5%에 해당하는 학생의 점수는? \",norm.ppf(0.95, loc=30, scale=2))\n\n상위 5%에 해당하는 학생의 점수는?  33.28970725390295"
  },
  {
    "objectID": "posts/hw5/index.html",
    "href": "posts/hw5/index.html",
    "title": "hw5",
    "section": "",
    "text": "from scipy.stats import uniform\nimport numpy as np\nx = uniform.rvs(loc=3, scale=4, size=20)\nx_bar = np.mean(x)\ns_2_1 = sum((x-x_bar)**2)/(len(x)-1)  # n-1로 표본 분산 구하는 방법1\ns_2_2 = x.var(ddof=1)  # n-1로 표본 분산 구하는 방법2\ns_2_3 = np.var(x, ddof=1)  # n-1로 표본 분산 구하는 방법3\n\nprint(\"s_2_1 : \",s_2_1)\nprint(\"s_2_2 : \",s_2_2)\nprint(\"s_2_3 : \",s_2_3)\n\nk_2_1 = sum((x-x_bar)**2)/len(x)  # n로 표본 분산 구하는 방법1\nk_2_2 = x.var()  # n로 표본 분산 구하는 방법2\nk_2_3 = np.var(x)  # n로 표본 분산 구하는 방법3\n\nprint(\"k_2_1 : \",k_2_1)\nprint(\"k_2_2 : \",k_2_2)\nprint(\"k_2_3 : \",k_2_3)\n\ns_2_1 :  1.3945327089718962\ns_2_2 :  1.3945327089718962\ns_2_3 :  1.3945327089718962\nk_2_1 :  1.3248060735233014\nk_2_2 :  1.3248060735233014\nk_2_3 :  1.3248060735233014\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20) )**2).sum(axis=1)/(20 -1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw5/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.-n으로-구하는-방법-n-1로-구하는-방법",
    "href": "posts/hw5/index.html#균일분포-3-7에서-20개의-표본을-뽑아서-분산을-2가지-방법으로-추정해보세요.-n으로-구하는-방법-n-1로-구하는-방법",
    "title": "hw5",
    "section": "",
    "text": "from scipy.stats import uniform\nimport numpy as np\nx = uniform.rvs(loc=3, scale=4, size=20)\nx_bar = np.mean(x)\ns_2_1 = sum((x-x_bar)**2)/(len(x)-1)  # n-1로 표본 분산 구하는 방법1\ns_2_2 = x.var(ddof=1)  # n-1로 표본 분산 구하는 방법2\ns_2_3 = np.var(x, ddof=1)  # n-1로 표본 분산 구하는 방법3\n\nprint(\"s_2_1 : \",s_2_1)\nprint(\"s_2_2 : \",s_2_2)\nprint(\"s_2_3 : \",s_2_3)\n\nk_2_1 = sum((x-x_bar)**2)/len(x)  # n로 표본 분산 구하는 방법1\nk_2_2 = x.var()  # n로 표본 분산 구하는 방법2\nk_2_3 = np.var(x)  # n로 표본 분산 구하는 방법3\n\nprint(\"k_2_1 : \",k_2_1)\nprint(\"k_2_2 : \",k_2_2)\nprint(\"k_2_3 : \",k_2_3)\n\ns_2_1 :  1.3945327089718962\ns_2_2 :  1.3945327089718962\ns_2_3 :  1.3945327089718962\nk_2_1 :  1.3248060735233014\nk_2_2 :  1.3248060735233014\nk_2_3 :  1.3248060735233014\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20) )**2).sum(axis=1)/(20 -1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=1)\npopulation_variance = uniform.var(loc=3, scale=4)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()"
  },
  {
    "objectID": "posts/hw7/index.html",
    "href": "posts/hw7/index.html",
    "title": "hw7",
    "section": "",
    "text": "슬통 자동자는 매해 출시되는 신형 자동차의 에너지 소비효율 등급을 1등급으로 유지하고 있다. 22 년 개발된 신형 모델이 한국 자동차 평가원에서 설정한 에너지 소비 효율등급 1등급을 받을 수 있을지 검정하려한다. 평가원에 따르면 1등급의 기준은 평균 복합 에너지 소비효율이 16.0 이상인 경우 부여 한다고 한다. 다음은 신형 자동차 15대의 복합 에너지소비효율 측정한 결과이다. 15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927, 15.382, 16.709, 16.804\n표본에 의하여 판단해볼때, 현대자동차의 신형 모델은 에너지 효율 1등급으로 판단할 수 있을지 판단해보시오. (유의수준 1%로 설정)"
  },
  {
    "objectID": "posts/hw7/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "href": "posts/hw7/index.html#검정을-위한-가설을-명확하게-서술하시오.",
    "title": "hw7",
    "section": "2. 검정을 위한 가설을 명확하게 서술하시오.",
    "text": "2. 검정을 위한 가설을 명확하게 서술하시오.\n\n\nH0 : mu(신형 자동차의 평균 복합 에너지 소비효율 평균) &gt;= 16.0 (mu0)\nH1 : mu(신형 자동차의 평균 복합 에너지 소비효율 평균) &lt; 16.0 (mu0)"
  },
  {
    "objectID": "posts/hw7/index.html#검정통계량-계산하시오.",
    "href": "posts/hw7/index.html#검정통계량-계산하시오.",
    "title": "hw7",
    "section": "3. 검정통계량 계산하시오.",
    "text": "3. 검정통계량 계산하시오.\n\nimport numpy as np\nx = np.array([15.078, 15.752, 15.549, 15.56, 16.098, 13.277, 15.462, 16.116, 15.214, 16.93, 14.118, 14.927,\n15.382, 16.709, 16.804])\nx_bar = x.mean()\nsample_std = x.std(ddof=1)\n\nz = (x_bar - 16)/ (sample_std/np.sqrt(len(x)))\nprint(\"검정통계량 :\",z)\n\n검정통계량 : -1.8500447456376756"
  },
  {
    "objectID": "posts/hw7/index.html#pvalue을-구하세요.",
    "href": "posts/hw7/index.html#pvalue을-구하세요.",
    "title": "hw7",
    "section": "4. p‑value을 구하세요.",
    "text": "4. p‑value을 구하세요.\n\nfrom scipy.stats import t\nprint(\"p-value :\",t.cdf(z, df=len(x) -1))\n\np-value : 0.042762417664207845"
  },
  {
    "objectID": "posts/hw7/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "href": "posts/hw7/index.html#현대자동차의-신형-모델의-평균-복합-에너지-소비효율에-대하여-95-신뢰구간을-구해보세요.",
    "title": "hw7",
    "section": "6. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.",
    "text": "6. 현대자동차의 신형 모델의 평균 복합 에너지 소비효율에 대하여 95% 신뢰구간을 구해보세요.\n\nt0025 = t.ppf(0.975, df=15-1)\nprint(\"95% 신뢰구간 : (\",x_bar - t0025*sample_std/np.sqrt(len(x)) , \",\", x_bar + t0025*sample_std/np.sqrt(len(x)), \")\")\n\n95% 신뢰구간 : ( 14.988864240339733 , 16.074602426326933 )"
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "KB데이터",
    "section": "",
    "text": "60대 이상 소비자를 타켓으로 어느 지역을 활성화하는게 효과적일까?"
  },
  {
    "objectID": "presentation.html#연령-구간별-인구-비율-계산",
    "href": "presentation.html#연령-구간별-인구-비율-계산",
    "title": "KB데이터",
    "section": "(연령 구간별 인구 비율 계산)",
    "text": "(연령 구간별 인구 비율 계산)\n\nmarket_pop['pct_under20'] = round(market_pop['under20'] / market_pop['total_pop'] * 100, 1) #미성년자 비율 추가 + 소숫점 정리\nmarket_pop['pct_2050'] = round(market_pop['2050'] / market_pop['total_pop'] * 100, 1)\nmarket_pop['pct_over60'] = round(market_pop['over60'] / market_pop['total_pop'] * 100, 1)"
  },
  {
    "objectID": "presentation.html#시장.점포-1개-당-60대-이상-인구-비율-계산",
    "href": "presentation.html#시장.점포-1개-당-60대-이상-인구-비율-계산",
    "title": "KB데이터",
    "section": "(시장.점포 1개 당 60대 이상 인구 비율 계산)",
    "text": "(시장.점포 1개 당 60대 이상 인구 비율 계산)\n\nmarket_pop['old_per_market'] = round(market_pop['over60'] / market_pop['market_count'], 1)\nmarket_pop['old_per_store'] = round(market_pop['over60'] / market_pop['store_sum'], 1)"
  },
  {
    "objectID": "presentation.html#대-이상-인구-비율이-평균보다-큰-지역-작은-지역-구분",
    "href": "presentation.html#대-이상-인구-비율이-평균보다-큰-지역-작은-지역-구분",
    "title": "KB데이터",
    "section": "(60대 이상 인구 비율이 평균보다 큰 지역, 작은 지역 구분)",
    "text": "(60대 이상 인구 비율이 평균보다 큰 지역, 작은 지역 구분)\n\n# 60대 이상 비율의 평균을 구한 뒤 그것보다 높거나 낮다는것 표시.\nmarket_pop['over60_mean_updown'] = \\\n  np.where(market_pop['pct_over60'] &gt;= market_pop['pct_over60'].mean(), 'UP', 'DOWN')"
  },
  {
    "objectID": "presentation.html#평균-기준으로-한-근거-60대-이상-박스플롯",
    "href": "presentation.html#평균-기준으로-한-근거-60대-이상-박스플롯",
    "title": "KB데이터",
    "section": "평균 기준으로 한 근거 : 60대 이상 박스플롯",
    "text": "평균 기준으로 한 근거 : 60대 이상 박스플롯\n\npx.box(data_frame = market_pop, y = 'pct_over60')"
  },
  {
    "objectID": "presentation.html#온누리-상품권을-사용하는-시장-수",
    "href": "presentation.html#온누리-상품권을-사용하는-시장-수",
    "title": "KB데이터",
    "section": "(온누리 상품권을 사용하는 시장 수)",
    "text": "(온누리 상품권을 사용하는 시장 수)\n\nmarket_pop['pct_certificate'] = \\\n round(market_pop['certificate_count'] / market_pop['market_count'] *100, 1)\n\n\nmarket_pop.head()\n\n\n\n\n\n\n\n\nregion\nmarket_count\nstore_sum\ncertificate_count\ntotal_pop\nunder20\n2050\nover60\npct_under20\npct_2050\npct_over60\nold_per_market\nold_per_store\nover60_mean_updown\npct_certificate\n\n\n\n\n0\n강원도\n58\n6811\n54\n1549507\n294348\n894249\n360910\n19.0\n57.7\n23.3\n6222.6\n53.0\nUP\n93.1\n\n\n1\n경기도\n130\n18977\n121\n12522606\n2730973\n7878980\n1912653\n21.8\n62.9\n15.3\n14712.7\n100.8\nDOWN\n93.1\n\n\n2\n경상남도\n155\n18156\n102\n3364702\n702154\n2004453\n658095\n20.9\n59.6\n19.6\n4245.8\n36.2\nUP\n65.8\n\n\n3\n경상북도\n149\n16582\n106\n2702826\n500721\n1544234\n657871\n18.5\n57.1\n24.3\n4415.2\n39.7\nUP\n71.1\n\n\n4\n광주광역시\n26\n3411\n25\n1472199\n340705\n895137\n236357\n23.1\n60.8\n16.1\n9090.7\n69.3\nDOWN\n96.2"
  },
  {
    "objectID": "project2/columns/columns.html#condition1-다양한-조건에-근접한지-중요-도로에-근접한지-공원에-근접한지-평범한지-등",
    "href": "project2/columns/columns.html#condition1-다양한-조건에-근접한지-중요-도로에-근접한지-공원에-근접한지-평범한지-등",
    "title": "house price columns",
    "section": "14. ‘Condition1’ : 다양한 조건에 근접한지 (중요 도로에 근접한지, 공원에 근접한지, 평범한지 등)",
    "text": "14. ‘Condition1’ : 다양한 조건에 근접한지 (중요 도로에 근접한지, 공원에 근접한지, 평범한지 등)\n\ntrain_cat_count('Condition1')\ntrain_cat_hist('Condition1')\n\ntrain_df['Condition1'].value_counts()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCondition1\nNorm      1260\nFeedr       81\nArtery      48\nRRAn        26\nPosN        19\nRRAe        11\nPosA         8\nRRNn         5\nRRNe         2\nName: count, dtype: int64\n\n\n   Artery       간선도로(도시의 주요지점 연결 도로 - 고속도로, 대로 등)에 인접\n   Feedr        2차 도로(고속도로에 들어가기 전 도로 - 보조 도로)에 인접\n   Norm         보통\n   RRNn         North-South Railroad에서 200' 내에 있다.\n   RRAn         North-South Railroad에 인접 \n   PosN         공원, 그린벨트, 등등 off-site인 곳\n   PosA         공원, 그린벨트, 등등 off-site에 인접\n   RRNe         East-West Railroad에서 200' 내에 있다.\n   RRAe         East-West Railroad에 인접\nNorm이 압도적으로 많음. Feedr와 Artery가 다른 조건들보다는 많음.\n\npd.set_option('display.max_rows',None)\ntrain_df.groupby(['Neighborhood','Condition1']).agg(id_count=('Id','count'))\n\n\n\n\n\n\n\n\n\nid_count\n\n\nNeighborhood\nCondition1\n\n\n\n\n\nBlmngtn\nNorm\n17\n\n\nBlueste\nNorm\n2\n\n\nBrDale\nNorm\n16\n\n\nBrkSide\nArtery\n1\n\n\nFeedr\n6\n\n\nNorm\n42\n\n\nPosN\n1\n\n\nRRAn\n7\n\n\nRRNn\n1\n\n\nClearCr\nFeedr\n3\n\n\nNorm\n25\n\n\nCollgCr\nNorm\n148\n\n\nPosN\n2\n\n\nCrawfor\nFeedr\n1\n\n\nNorm\n48\n\n\nPosA\n1\n\n\nPosN\n1\n\n\nEdwards\nArtery\n6\n\n\nFeedr\n7\n\n\nNorm\n86\n\n\nPosN\n1\n\n\nGilbert\nFeedr\n1\n\n\nNorm\n69\n\n\nRRAn\n8\n\n\nRRNn\n1\n\n\nIDOTRR\nArtery\n2\n\n\nFeedr\n2\n\n\nNorm\n31\n\n\nRRAe\n1\n\n\nRRNn\n1\n\n\nMeadowV\nNorm\n17\n\n\nMitchel\nArtery\n1\n\n\nFeedr\n1\n\n\nNorm\n47\n\n\nNAmes\nArtery\n15\n\n\nFeedr\n15\n\n\nNorm\n186\n\n\nPosA\n3\n\n\nPosN\n6\n\n\nNPkVill\nNorm\n9\n\n\nNWAmes\nFeedr\n6\n\n\nNorm\n51\n\n\nPosA\n4\n\n\nPosN\n6\n\n\nRRAn\n6\n\n\nNoRidge\nNorm\n41\n\n\nNridgHt\nNorm\n76\n\n\nPosN\n1\n\n\nOldTown\nArtery\n23\n\n\nFeedr\n8\n\n\nNorm\n81\n\n\nRRAn\n1\n\n\nSWISU\nFeedr\n5\n\n\nNorm\n20\n\n\nSawyer\nFeedr\n14\n\n\nNorm\n53\n\n\nPosN\n1\n\n\nRRAe\n6\n\n\nSawyerW\nFeedr\n6\n\n\nNorm\n47\n\n\nRRAe\n4\n\n\nRRNe\n2\n\n\nSomerst\nFeedr\n3\n\n\nNorm\n77\n\n\nRRAn\n4\n\n\nRRNn\n2\n\n\nStoneBr\nNorm\n25\n\n\nTimber\nNorm\n38\n\n\nVeenker\nFeedr\n3\n\n\nNorm\n8\n\n\n\n\n\n\n\n\npd.set_option('display.max_rows',None)\ntrain_df.groupby(['Neighborhood','BedroomAbvGr']).agg(id_count=('Id','count'))\n\n\n\n\n\n\n\n\n\nid_count\n\n\nNeighborhood\nBedroomAbvGr\n\n\n\n\n\nBlmngtn\n1\n3\n\n\n2\n14\n\n\nBlueste\n2\n1\n\n\n3\n1\n\n\nBrDale\n2\n8\n\n\n3\n8\n\n\nBrkSide\n1\n4\n\n\n2\n21\n\n\n3\n28\n\n\n4\n4\n\n\n5\n1\n\n\nClearCr\n0\n1\n\n\n1\n3\n\n\n2\n7\n\n\n3\n7\n\n\n4\n7\n\n\n5\n3\n\n\nCollgCr\n1\n10\n\n\n2\n14\n\n\n3\n119\n\n\n4\n7\n\n\nCrawfor\n1\n1\n\n\n2\n11\n\n\n3\n27\n\n\n4\n12\n\n\nEdwards\n1\n2\n\n\n2\n30\n\n\n3\n47\n\n\n4\n20\n\n\n5\n1\n\n\nGilbert\n2\n3\n\n\n3\n65\n\n\n4\n11\n\n\nIDOTRR\n1\n1\n\n\n2\n18\n\n\n3\n16\n\n\n4\n2\n\n\nMeadowV\n1\n6\n\n\n2\n1\n\n\n3\n8\n\n\n4\n1\n\n\n5\n1\n\n\nMitchel\n1\n3\n\n\n2\n15\n\n\n3\n23\n\n\n4\n7\n\n\n5\n1\n\n\nNAmes\n1\n2\n\n\n2\n57\n\n\n3\n131\n\n\n4\n28\n\n\n5\n3\n\n\n6\n4\n\n\nNPkVill\n2\n4\n\n\n3\n5\n\n\nNWAmes\n2\n2\n\n\n3\n49\n\n\n4\n21\n\n\n5\n1\n\n\nNoRidge\n2\n4\n\n\n3\n13\n\n\n4\n23\n\n\n5\n1\n\n\nNridgHt\n1\n3\n\n\n2\n28\n\n\n3\n35\n\n\n4\n11\n\n\nOldTown\n0\n1\n\n\n1\n1\n\n\n2\n47\n\n\n3\n38\n\n\n4\n21\n\n\n5\n5\n\n\nSWISU\n1\n1\n\n\n2\n2\n\n\n3\n8\n\n\n4\n9\n\n\n5\n3\n\n\n6\n1\n\n\n8\n1\n\n\nSawyer\n0\n2\n\n\n2\n8\n\n\n3\n57\n\n\n4\n6\n\n\n6\n1\n\n\nSawyerW\n1\n1\n\n\n2\n15\n\n\n3\n33\n\n\n4\n8\n\n\n5\n1\n\n\n6\n1\n\n\nSomerst\n1\n3\n\n\n2\n26\n\n\n3\n53\n\n\n4\n4\n\n\nStoneBr\n0\n1\n\n\n1\n4\n\n\n2\n10\n\n\n3\n6\n\n\n4\n4\n\n\nTimber\n2\n10\n\n\n3\n21\n\n\n4\n7\n\n\nVeenker\n0\n1\n\n\n1\n2\n\n\n2\n2\n\n\n3\n6"
  },
  {
    "objectID": "project2/columns/columns.html#sale_price-판매-가격",
    "href": "project2/columns/columns.html#sale_price-판매-가격",
    "title": "house price columns",
    "section": "1. ‘Sale_Price’ : 판매 가격",
    "text": "1. ‘Sale_Price’ : 판매 가격\n\ntrain_numeric_hist('Sale_Price')\n\nprint(\"최소값 :\", train_df['Sale_Price'].min())\nprint(\"최대값 :\", train_df['Sale_Price'].max())\n\n\n\n\n\n\n\n\n최소값 : 12789\n최대값 : 755000\n\n\n이상치 있어보임. 100,000~200,000 달러가 제일 많아보임."
  },
  {
    "objectID": "project2/columns/columns.html#ms_subclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "href": "project2/columns/columns.html#ms_subclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "title": "house price columns",
    "section": "2. ‘MS_SubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) <- 수치컬럼으로 되어 있지만 범주 컬럼임.",
    "text": "2. ‘MS_SubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) &lt;- 수치컬럼으로 되어 있지만 범주 컬럼임.\n\ntrain_df['MS_SubClass'] = train_df['MS_SubClass'].astype(str)  # 범주 컬럼 처리\ntrain_cat_count('MS_SubClass')\n\ntrain_cat_hist('MS_SubClass')\n\nprint(train_df['MS_SubClass'].value_counts().sort_index())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMS_SubClass\nDuplex_All_Styles_and_Ages                    109\nOne_Story_1945_and_Older                      139\nOne_Story_1946_and_Newer_All_Styles          1079\nOne_Story_PUD_1946_and_Newer                  192\nOne_Story_with_Finished_Attic_All_Ages          6\nOne_and_Half_Story_Finished_All_Ages          287\nOne_and_Half_Story_PUD_All_Ages                 1\nOne_and_Half_Story_Unfinished_All_Ages         18\nPUD_Multilevel_Split_Level_Foyer               17\nSplit_Foyer                                    48\nSplit_or_Multilevel                           118\nTwo_Family_conversion_All_Styles_and_Ages      61\nTwo_Story_1945_and_Older                      128\nTwo_Story_1946_and_Newer                      575\nTwo_Story_PUD_1946_and_Newer                  129\nTwo_and_Half_Story_All_Ages                    23\nName: count, dtype: int64\n\n\n    20  1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)\n    30  1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)\n    40  다락방이 있는 1층짜리 집 &lt;- 데이터 4개밖에 없음 (1926,1930,1949,1979)\n    45  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집\n    50  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집\n    60  1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)\n    70  1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)\n    75  3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집\n    80  각 층이 엇갈려있는 집\n    85  현관 앞에 계단으로 층이 엇갈려있는 집\n    90  다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)\n   120  1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음)\n   150  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)\n   160  1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)\n   180  연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집\n   190  한 집을 두 집으로 개조해서 쪼갠 집\n\ncols = train_df.columns\ntrain_df[train_df['MS_SubClass'] == 20]['Year_Built'].sort_values()  # 'MS_SubClass'=20은 1938, 1946~2010에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 30]['Year_Built'].sort_values()  # 'MS_SubClass'=30은 1885, 1910~1945, 1948에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 60]['Year_Built'].sort_values()  # 'MS_SubClass'=60은 1946~2009에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 70]['Year_Built'].sort_values()  # 'MS_SubClass'=70은 1872~1945에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 120]['Year_Built'].sort_values()   # 1976~2009에 지어진 집임.\n\nSeries([], Name: Year_Built, dtype: int64)"
  },
  {
    "objectID": "project2/columns/columns.html#ms_zoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "href": "project2/columns/columns.html#ms_zoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "title": "house price columns",
    "section": "3. ‘MS_Zoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)",
    "text": "3. ‘MS_Zoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)\n\ntrain_cat_count('MS_Zoning')\ntrain_cat_hist('MS_Zoning')\n\nprint(train_df['MS_Zoning'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMS_Zoning\nResidential_Low_Density         2273\nResidential_Medium_Density       462\nFloating_Village_Residential     139\nResidential_High_Density          27\nC_all                             25\nI_all                              2\nA_agr                              2\nName: count, dtype: int64\n\n\n   A    농업\n   C    상업\n   FV   수상 거주지\n   I    산업\n   RH   높은 밀도 거주지\n   RL   낮은 밀도 거주지\n   RP   Residential Low Density Park \n   RM  중간 밀도 거주지\n=&gt; 데이터상 RL, RM, RH, FV, C(all) 만 있음.\n빈도를 확인해보면, 제일 많은게 RL(낮은 밀도 거주지)임.\n범주별 분포를 보면, 범주마다 집값이 살짝 다른 것 같음. 보라색 분포에 이상치도 존재하는 것 같다."
  },
  {
    "objectID": "project2/columns/columns.html#lot_frontage-집과-연결된-거리의-직선-길이-feet",
    "href": "project2/columns/columns.html#lot_frontage-집과-연결된-거리의-직선-길이-feet",
    "title": "house price columns",
    "section": "4. ‘Lot_Frontage’ : 집과 연결된 거리의 직선 길이 (feet)",
    "text": "4. ‘Lot_Frontage’ : 집과 연결된 거리의 직선 길이 (feet)\n\ntrain_numeric_hist('Lot_Frontage')\n\ntrain_rel_xy('Lot_Frontage')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n결측치 259개 있음. &lt;- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기.\nLot_Frontage의 분포를 보면 이상치 있어보임. Lot_Frontage과 Sale_Price의 관계를 보면 많이 퍼져있기는한데 이상치를 제외하면 양의 관계가 있는 것 같기도 함.\n\ntrain_cat_rel_xy('Lot_Frontage', 'MS_Zoning') # 범주별로 y값과의 관계를 알아봄.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'Lot_Frontage', y='Sale_Price', hue='MS_Zoning')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'Lot_Frontage', y='Lot_Area', size='Sale_Price')\nplt.show()\n\n\n\n\n\n\n\n\n\ntrain_df['MS_SubClass'] = train_df['MS_SubClass'].astype(str)\nplt.clf()\nsns.scatterplot(data=train_df, x = 'MS_SubClass', y='Neighborhood', size='Sale_Price')\nplt.show()"
  },
  {
    "objectID": "project2/columns/columns.html#lot_area-부지-크기-square-feet",
    "href": "project2/columns/columns.html#lot_area-부지-크기-square-feet",
    "title": "house price columns",
    "section": "5. ‘Lot_Area’ : 부지 크기 (square feet)",
    "text": "5. ‘Lot_Area’ : 부지 크기 (square feet)\n\ntrain_numeric_hist('Lot_Area')\n\ntrain_rel_xy('Lot_Area')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLot_Area의 분포를 보면 이상치 있어보임. Lot_Area과 Sale_Price의 관계를 보면 일부의 집 때문에 굉장히 퍼지는 관계임.\n\ntrain_cat_rel_xy('Lot_Area', 'MS_Zoning') # 범주별로 y값과의 관계를 알아봄."
  },
  {
    "objectID": "project2/columns/columns.html#lot_shape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "href": "project2/columns/columns.html#lot_shape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "title": "house price columns",
    "section": "8. ‘Lot_Shape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)",
    "text": "8. ‘Lot_Shape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)\n\ntrain_cat_count('Lot_Shape')\ntrain_cat_hist('Lot_Shape')\n\nprint(train_df['Lot_Shape'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLot_Shape\nRegular                 1859\nSlightly_Irregular       979\nModerately_Irregular      76\nIrregular                 16\nName: count, dtype: int64\n\n\n   Reg  보통\n   IR1  약간 보통이 아님\n   IR2  중간 정도 보통이 아님\n   IR3  보통이 아님\n일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도…?\n범주별 분포가 크게 다른 것 같진 않음. 근데 파란색분포는 살짝 다른 것 같음.\n주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#land_contour-집의-평탄-정도",
    "href": "project2/columns/columns.html#land_contour-집의-평탄-정도",
    "title": "house price columns",
    "section": "9. ‘Land_Contour’ : 집의 평탄 정도",
    "text": "9. ‘Land_Contour’ : 집의 평탄 정도\n\ntrain_cat_count('Land_Contour')\ntrain_cat_hist('Land_Contour')\n\n\nprint(train_df['Land_Contour'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLand_Contour\nLvl    2633\nHLS     120\nBnk     117\nLow      60\nName: count, dtype: int64\n\n\n   Lvl  평평한 것에 가까움  \n   Bnk  기움 - Quick and significant rise from street grade to building\n   HLS  비탈 - Significant slope from side to side\n   Low 움푹한 곳\n평평한 것에 가까운게 많음. 범주별 분포 차이가 없어 보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#lot_config-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "href": "project2/columns/columns.html#lot_config-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "title": "house price columns",
    "section": "11. ‘Lot_Config’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)",
    "text": "11. ‘Lot_Config’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)\n\ntrain_cat_count('Lot_Config')\n\ntrain_cat_hist('Lot_Config')\n\nprint(train_df['Lot_Config'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLot_Config\nInside     2140\nCorner      511\nCulDSac     180\nFR2          85\nFR3          14\nName: count, dtype: int64\n\n\n   Inside   안쪽 부지\n   Corner   코너 부지\n   CulDSac  출입하는 길이 하나인 곳\n   FR2      도로.강을 향한 면이 2곳\n   FR3      도로.강을 향한 면이 3곳\n범주별로 분포 차이가 없어보임. 초록색, 주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#land_slope-집-토지-경사-경사가-약간인지-심각한지-등",
    "href": "project2/columns/columns.html#land_slope-집-토지-경사-경사가-약간인지-심각한지-등",
    "title": "house price columns",
    "section": "12. ‘Land_Slope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)",
    "text": "12. ‘Land_Slope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)\n\ntrain_cat_count('Land_Slope')\ntrain_cat_hist('Land_Slope')\n\nprint(train_df['Land_Slope'].value_counts())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLand_Slope\nGtl    2789\nMod     125\nSev      16\nName: count, dtype: int64\n\n\n   Gtl  약간 경사\n   Mod  보통 경사\n   Sev  심한 경사\n경사가 심하면 건축비용이 많이 든다길래 집값에 차이가 있을 줄 알았는데, 범주별로 분포의 차이가 없어보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/columns.html#condition_1-다양한-조건에-근접한지-중요-도로에-근접한지-공원에-근접한지-평범한지-등",
    "href": "project2/columns/columns.html#condition_1-다양한-조건에-근접한지-중요-도로에-근접한지-공원에-근접한지-평범한지-등",
    "title": "house price columns",
    "section": "14. ‘Condition_1’ : 다양한 조건에 근접한지 (중요 도로에 근접한지, 공원에 근접한지, 평범한지 등)",
    "text": "14. ‘Condition_1’ : 다양한 조건에 근접한지 (중요 도로에 근접한지, 공원에 근접한지, 평범한지 등)\n\ntrain_cat_count('Condition_1')\ntrain_cat_hist('Condition_1')\n\ntrain_df['Condition_1'].value_counts()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCondition_1\nNorm      2522\nFeedr      164\nArtery      92\nRRAn        50\nPosN        39\nRRAe        28\nPosA        20\nRRNn         9\nRRNe         6\nName: count, dtype: int64\n\n\n   Artery       간선도로(도시의 주요지점 연결 도로 - 고속도로, 대로 등)에 인접\n   Feedr        2차 도로(고속도로에 들어가기 전 도로 - 보조 도로)에 인접\n   Norm         보통\n   RRNn         North-South Railroad에서 200' 내에 있다.\n   RRAn         North-South Railroad에 인접 \n   PosN         공원, 그린벨트, 등등 off-site인 곳\n   PosA         공원, 그린벨트, 등등 off-site에 인접\n   RRNe         East-West Railroad에서 200' 내에 있다.\n   RRAe         East-West Railroad에 인접\nNorm이 압도적으로 많음. Feedr와 Artery가 다른 조건들보다는 많음.\n\npd.set_option('display.max_rows',None)\ntrain_df.groupby(['Neighborhood','Condition_1']).agg(id_count=('Id','count'))\n\n\n\n\n\n\n\n\n\nid_count\n\n\nNeighborhood\nCondition_1\n\n\n\n\n\nBloomington_Heights\nNorm\n28\n\n\nBlueste\nNorm\n10\n\n\nBriardale\nNorm\n30\n\n\nBrookside\nArtery\n1\n\n\nFeedr\n14\n\n\nNorm\n78\n\n\nPosN\n1\n\n\nRRAn\n12\n\n\nRRNn\n2\n\n\nClear_Creek\nFeedr\n4\n\n\nNorm\n40\n\n\nCollege_Creek\nFeedr\n2\n\n\nNorm\n259\n\n\nPosN\n6\n\n\nCrawford\nArtery\n1\n\n\nFeedr\n4\n\n\nNorm\n95\n\n\nPosA\n2\n\n\nPosN\n1\n\n\nEdwards\nArtery\n7\n\n\nFeedr\n12\n\n\nNorm\n174\n\n\nPosN\n1\n\n\nGilbert\nFeedr\n2\n\n\nNorm\n144\n\n\nRRAn\n17\n\n\nRRNn\n2\n\n\nGreen_Hills\nNorm\n2\n\n\nGreens\nNorm\n8\n\n\nIowa_DOT_and_Rail_Road\nArtery\n7\n\n\nFeedr\n6\n\n\nNorm\n76\n\n\nRRAe\n1\n\n\nRRNe\n2\n\n\nRRNn\n1\n\n\nLandmark\nNorm\n1\n\n\nMeadow_Village\nNorm\n37\n\n\nMitchell\nArtery\n3\n\n\nFeedr\n2\n\n\nNorm\n109\n\n\nNorth_Ames\nArtery\n29\n\n\nFeedr\n31\n\n\nNorm\n369\n\n\nPosA\n5\n\n\nPosN\n8\n\n\nRRAn\n1\n\n\nNorthpark_Villa\nNorm\n23\n\n\nNorthridge\nNorm\n71\n\n\nNorthridge_Heights\nNorm\n161\n\n\nPosA\n1\n\n\nPosN\n4\n\n\nNorthwest_Ames\nFeedr\n8\n\n\nNorm\n92\n\n\nPosA\n8\n\n\nPosN\n12\n\n\nRRAn\n10\n\n\nRRNn\n1\n\n\nOld_Town\nArtery\n42\n\n\nFeedr\n11\n\n\nNorm\n184\n\n\nRRAn\n2\n\n\nSawyer\nFeedr\n32\n\n\nNorm\n99\n\n\nPosA\n2\n\n\nPosN\n1\n\n\nRRAe\n15\n\n\nRRNe\n2\n\n\nSawyer_West\nFeedr\n14\n\n\nNorm\n97\n\n\nRRAe\n12\n\n\nRRNe\n2\n\n\nSomerset\nFeedr\n9\n\n\nNorm\n159\n\n\nPosN\n3\n\n\nRRAn\n8\n\n\nRRNn\n3\n\n\nSouth_and_West_of_Iowa_State_University\nArtery\n2\n\n\nFeedr\n9\n\n\nNorm\n37\n\n\nStone_Brook\nNorm\n48\n\n\nPosA\n1\n\n\nPosN\n2\n\n\nTimberland\nNorm\n71\n\n\nPosA\n1\n\n\nVeenker\nFeedr\n4\n\n\nNorm\n20\n\n\n\n\n\n\n\n\npd.set_option('display.max_rows',None)\ntrain_df.groupby(['Neighborhood','Bedroom_AbvGr']).agg(id_count=('Id','count'))\n\n\n\n\n\n\n\n\n\nid_count\n\n\nNeighborhood\nBedroom_AbvGr\n\n\n\n\n\nBloomington_Heights\n1\n3\n\n\n2\n25\n\n\nBlueste\n1\n2\n\n\n2\n7\n\n\n3\n1\n\n\nBriardale\n2\n14\n\n\n3\n15\n\n\n4\n1\n\n\nBrookside\n1\n6\n\n\n2\n39\n\n\n3\n53\n\n\n4\n9\n\n\n5\n1\n\n\nClear_Creek\n0\n2\n\n\n1\n5\n\n\n2\n10\n\n\n3\n14\n\n\n4\n10\n\n\n5\n3\n\n\nCollege_Creek\n1\n16\n\n\n2\n26\n\n\n3\n211\n\n\n4\n14\n\n\nCrawford\n1\n1\n\n\n2\n28\n\n\n3\n50\n\n\n4\n22\n\n\n5\n2\n\n\nEdwards\n1\n4\n\n\n2\n61\n\n\n3\n93\n\n\n4\n30\n\n\n5\n5\n\n\n6\n1\n\n\nGilbert\n2\n5\n\n\n3\n138\n\n\n4\n21\n\n\n5\n1\n\n\nGreen_Hills\n1\n1\n\n\n2\n1\n\n\nGreens\n1\n8\n\n\nIowa_DOT_and_Rail_Road\n1\n7\n\n\n2\n37\n\n\n3\n35\n\n\n4\n12\n\n\n5\n2\n\n\nLandmark\n3\n1\n\n\nMeadow_Village\n1\n8\n\n\n2\n4\n\n\n3\n22\n\n\n4\n2\n\n\n5\n1\n\n\nMitchell\n0\n1\n\n\n1\n5\n\n\n2\n33\n\n\n3\n59\n\n\n4\n13\n\n\n5\n3\n\n\nNorth_Ames\n1\n3\n\n\n2\n117\n\n\n3\n260\n\n\n4\n50\n\n\n5\n5\n\n\n6\n8\n\n\nNorthpark_Villa\n2\n11\n\n\n3\n11\n\n\n4\n1\n\n\nNorthridge\n2\n5\n\n\n3\n22\n\n\n4\n43\n\n\n5\n1\n\n\nNorthridge_Heights\n1\n8\n\n\n2\n60\n\n\n3\n69\n\n\n4\n27\n\n\n5\n2\n\n\nNorthwest_Ames\n2\n10\n\n\n3\n80\n\n\n4\n39\n\n\n5\n2\n\n\nOld_Town\n0\n1\n\n\n1\n9\n\n\n2\n85\n\n\n3\n90\n\n\n4\n40\n\n\n5\n13\n\n\n6\n1\n\n\nSawyer\n0\n2\n\n\n1\n1\n\n\n2\n27\n\n\n3\n105\n\n\n4\n13\n\n\n6\n3\n\n\nSawyer_West\n1\n3\n\n\n2\n24\n\n\n3\n75\n\n\n4\n17\n\n\n5\n1\n\n\n6\n5\n\n\nSomerset\n1\n9\n\n\n2\n59\n\n\n3\n109\n\n\n4\n5\n\n\nSouth_and_West_of_Iowa_State_University\n1\n1\n\n\n2\n9\n\n\n3\n19\n\n\n4\n12\n\n\n5\n3\n\n\n6\n3\n\n\n8\n1\n\n\nStone_Brook\n0\n1\n\n\n1\n8\n\n\n2\n21\n\n\n3\n9\n\n\n4\n10\n\n\n5\n2\n\n\nTimberland\n2\n19\n\n\n3\n44\n\n\n4\n8\n\n\n5\n1\n\n\nVeenker\n0\n1\n\n\n1\n4\n\n\n2\n6\n\n\n3\n12\n\n\n4\n1"
  },
  {
    "objectID": "project2/columns3/index.html",
    "href": "project2/columns3/index.html",
    "title": "North_Ames",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport math\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/houseprice-with-lonlat.csv')\ntrain_df = train_df.rename(columns = {'Unnamed: 0' : 'Id'})\ntrain_df['Id'] = train_df['Id']-1\n\nloc = train_df.copy()\n# Overall_Cond을 수치화한 Overall_Score 만들기\n# 품질 순위 : 'Very_Poor','Poor','Fair','Below_Average','Average','Above_Average','Good','Very_Good','Excellent','Very_Excellent'\nrank=['Very_Poor','Poor','Fair','Below_Average','Average','Above_Average','Good','Very_Good','Excellent','Very_Excellent']\nfor i in range(len(rank)):\n    loc.loc[loc['Overall_Cond']==rank[i],'Overall_Score']=math.floor((i+1)*2)\n\n# Bedroom_AbvGr을 수치화한 Bedroom_Score 만들기   (오류 메시지가 뜨긴 하지만, 문제 없음)\nroom=loc['Bedroom_AbvGr'].unique()\nfor i in range(len(room)):\n    if room[i] == 8:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=20\n    elif room[i] == 7:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=18\n    elif room[i] == 6:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=16\n    elif room[i] == 5:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=14\n    elif room[i] == 4:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=12\n    elif room[i] == 3:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=10\n    elif room[i] == 2:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=7\n    elif room[i] == 1:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=4\n    else:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=1\n\n# Gr_Liv_Area를 수치화한 Live_Score 만들기\nbins=[0, round(146.5,0), round(146.5*2,0), round(146.5*3,0), round(146.5*4,0),round(146.5*5,0),round(146.5*6,0),round(146.5*7,0),round(146.5*8,0),round(146.5*9,0),round(146.5*10,0),round(146.5*11,0),round(146.5*12,0),round(146.5*13,0),round(146.5*14,0),round(146.5*15,0),round(146.5*16,0),round(146.5*17,0),round(146.5*18,0),round(146.5*19,0)]\nbins = list(map(int,bins))\nloc = loc.sort_values('Gr_Liv_Area').reset_index(drop=True)\nfor i in range(len(bins)):\n    if i != 19:\n        loc.loc[bins[i]:bins[i+1]-1 , 'Live_Score'] = i+1\n    if i == 19 :\n        loc.loc[bins[i]: , 'Live_Score'] = i+1\n\nloc = loc.sort_values('Id').reset_index(drop=True)\n\n\n# Total_Bsmt_SF를 수치화한 Base_Score 만들기\nloc = loc.sort_values('Total_Bsmt_SF').reset_index(drop=True)\nfor i in range(len(bins)):\n    if i != 19:\n        loc.loc[bins[i]:bins[i+1]-1 , 'Base_Score'] = i+1\n    if i == 19 :\n        loc.loc[bins[i]: , 'Base_Score'] = i+1\nloc = loc.sort_values('Id').reset_index(drop=True)\n\n        \n# Garage_Area를 수치화한 Garage_Score 만들기\nloc = loc.sort_values('Garage_Area').reset_index(drop=True)\nfor i in range(len(bins)):\n    if i != 19:\n        loc.loc[bins[i]:bins[i+1]-1 , 'Garage_Score'] = i+1\n    if i == 19 :\n        loc.loc[bins[i]: , 'Garage_Score'] = i+1\n\nloc = loc.sort_values('Id').reset_index(drop=True)\n\n\n# 타입 int로 바꾸기\nloc['Overall_Score'] = loc['Overall_Score'].astype(int)\nloc['Bedroom_Score'] = loc['Bedroom_Score'].astype(int)\nloc['Live_Score'] = loc['Live_Score'].astype(int)\nloc['Base_Score'] = loc['Base_Score'].astype(int)\nloc['Garage_Score'] = loc['Garage_Score'].astype(int)\n\n# 총합 Total_Sum 변수 만들기\nloc['Total_Sum'] = loc['Overall_Score']+loc['Bedroom_Score']+loc['Live_Score']+loc['Base_Score']+loc['Garage_Score']\n\n# 지역1 : Northpark_Villa에 해당하는 데이터만 뽑아와서 loc1 데이터프레임 만들기 \nloc1 = loc[loc['Neighborhood']=='Northpark_Villa']\n# 지역2 : North_Ames에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc2 = loc[loc['Neighborhood']=='North_Ames']\n# 지역3 : Briardale에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc3 = loc[loc['Neighborhood']=='Briardale']\n# 지역4 : Edwards에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc4 = loc[loc['Neighborhood']=='Edwards']\n# 지역5 : College_Creek에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc5 = loc[loc['Neighborhood']=='College_Creek']\n\n\nloc.iloc[:,-6:]\nlen(loc[loc['Live_Score']==3])\nlen(loc)\nlen(loc1)\ntrain_df['Neighborhood'].value_counts()\n\nNeighborhood\nNorth_Ames                                 443\nCollege_Creek                              267\nOld_Town                                   239\nEdwards                                    194\nSomerset                                   182\nNorthridge_Heights                         166\nGilbert                                    165\nSawyer                                     151\nNorthwest_Ames                             131\nSawyer_West                                125\nMitchell                                   114\nBrookside                                  108\nCrawford                                   103\nIowa_DOT_and_Rail_Road                      93\nTimberland                                  72\nNorthridge                                  71\nStone_Brook                                 51\nSouth_and_West_of_Iowa_State_University     48\nClear_Creek                                 44\nMeadow_Village                              37\nBriardale                                   30\nBloomington_Heights                         28\nVeenker                                     24\nNorthpark_Villa                             23\nBlueste                                     10\nGreens                                       8\nGreen_Hills                                  2\nLandmark                                     1\nName: count, dtype: int64\n\n\n\nprint(\"생활면적 데이터 개수 :\",len(train_df[['Gr_Liv_Area']]))\n\nprint(\"최소 생활면적 :\",train_df['Gr_Liv_Area'].min())\nprint(\"최소 생활면적 :\",train_df['Gr_Liv_Area'].max())\n(5642-334)/20\nstart = [334 , 334+265.4 , 334+265.4*2, 334+265.4*3, 334+265.4*4, 334+265.4*5, 334+265.4*6, 334+265.4*7, 334+265.4*8, 334+265.4*9, 334+265.4*10, 334+265.4*11, 334+265.4*12, 334+265.4*13, 334+265.4*14, 334+265.4*15, 334+265.4*16, 334+265.4*17, 334+265.4*18, 334+265.4*19]\nprint(\"시작점 :\",start)\n\nprint(\"지하실면적 데이터 개수 :\",len(train_df['Total_Bsmt_SF']))\nprint(\"최소 지하실면적 :\",train_df['Total_Bsmt_SF'].min())\nprint(\"최소 지하실면적 :\",train_df['Total_Bsmt_SF'].max())\n(6110-0)/20\nstart = [0 , 305.5 , 305.5*2, 305.5*3, 305.5*4, 305.5*5, 305.5*6, 305.5*7, 305.5*8, 305.5*9, 305.5*10, 305.5*11, 305.5*12, 305.5*13, 305.5*14, 305.5*15, 305.5*16, 305.5*17, 305.5*18, 305.5*19]\nprint(\"시작점 :\",start)\n\nprint(\"차고면적 데이터 개수 :\",len(train_df['Garage_Area']))\nprint(\"최소 차고면적 :\",train_df['Garage_Area'].min())\nprint(\"최소 차고면적 :\",train_df['Garage_Area'].max())\n(1488-0)/20\nstart = [0 , 74.4 , 74.4*2, 74.4*3, 74.4*4, 74.4*5, 74.4*6, 74.4*7, 74.4*8, 74.4*9, 74.4*10, 74.4*11, 74.4*12, 74.4*13, 74.4*14, 74.4*15, 74.4*16, 74.4*17, 74.4*18, 74.4*19]\nprint(\"시작점 :\",start)\n\n\n2930/20\nbins=[0, 146.5, 146.5*2, 146.5*3, 146.5*4, 146.5*5, 146.5*6, 146.5*7, 146.5*8, 146.5*9, 146.5*10, 146.5*11, 146.5*12, 146.5*13, 146.5*14, 146.5*15, 146.5*16, 146.5*17, 146.5*18, 146.5*19]\n\n생활면적 데이터 개수 : 2930\n최소 생활면적 : 334\n최소 생활면적 : 5642\n시작점 : [334, 599.4, 864.8, 1130.1999999999998, 1395.6, 1661.0, 1926.3999999999999, 2191.7999999999997, 2457.2, 2722.6, 2988.0, 3253.3999999999996, 3518.7999999999997, 3784.2, 4049.5999999999995, 4315.0, 4580.4, 4845.799999999999, 5111.2, 5376.599999999999]\n지하실면적 데이터 개수 : 2930\n최소 지하실면적 : 0\n최소 지하실면적 : 6110\n시작점 : [0, 305.5, 611.0, 916.5, 1222.0, 1527.5, 1833.0, 2138.5, 2444.0, 2749.5, 3055.0, 3360.5, 3666.0, 3971.5, 4277.0, 4582.5, 4888.0, 5193.5, 5499.0, 5804.5]\n차고면적 데이터 개수 : 2930\n최소 차고면적 : 0\n최소 차고면적 : 1488\n시작점 : [0, 74.4, 148.8, 223.20000000000002, 297.6, 372.0, 446.40000000000003, 520.8000000000001, 595.2, 669.6, 744.0, 818.4000000000001, 892.8000000000001, 967.2, 1041.6000000000001, 1116.0, 1190.4, 1264.8000000000002, 1339.2, 1413.6000000000001]\n\n\n\n\n\n# 1. 수치컬럼의 분포 확인 함수\ndef hist(df, numeric_col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = numeric_col + \"의 분포\"\n    plt.title(a)\n    sns.histplot(df[numeric_col], stat='density')\n    plt.tight_layout()\n    plt.show()\n    \n# 2. 수치컬럼과 y컬럼의 관계 확인 함수\ndef rel_nx_ny(df, numeric_col, y):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = numeric_col + \"과 \"+ y+\"컬럼의 관계\"\n    plt.title(a)\n    sns.scatterplot(data=df, x=numeric_col, y=y)\n    plt.tight_layout()\n    plt.show()\n    \n# 3. 범주컬럼의 빈도 확인 함수 ( 수치변수 넣으면 이상하게 나옴, 범주변수로 변환한 뒤 넣어주기)\ndef cat_count(df, category_col, order):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 빈도\"   \n    plt.title(a)\n    fig, ax = plt.subplots()\n    if order == 'value':\n        sns.countplot(df[category_col], order=df[category_col].value_counts().sort_values().index)\n    elif order == 'index':\n        sns.countplot(df[category_col], order=df[category_col].value_counts().sort_index().index)\n    for p in ax.patches:\n        plt.text(p.get_width(), p.get_y()+p.get_height()/2, int(p.get_width()))\n    plt.tight_layout()\n    #plt.figure(figsize=(5,5))\n    plt.show()\n    \ndef cat_count_x(df, category_col, order):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 빈도\"   \n    plt.title(a)\n    fig, ax = plt.subplots()\n    if order == 'value':\n        sns.countplot(x=df[category_col], order=df[category_col].value_counts().sort_values().index)\n    elif order == 'index':\n        sns.countplot(x=df[category_col], order=df[category_col].value_counts().sort_index().index)\n    for p in ax.patches:\n        plt.text(p.get_x() + p.get_width()/2, p.get_height(), int(p.get_height()), ha='center', va='bottom')\n    plt.tight_layout()\n    #plt.figure(figsize=(5,5))\n    plt.show()\n    \n# 4. 코호트별 범주 컬럼의 빈도 확인 함수\ndef cats_count(df, category_col2 , category_col1):  # category_col1 : x축, category_col2 : 코호트\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col1 + \"의 범주별 \" + category_col2 +\"별 빈도\"    \n    plt.title(a)\n    fig, ax = plt.subplots()\n    sns.countplot(data=df, y=category_col1, hue=category_col2, order=df[category_col1].value_counts().sort_values().index)\n    for p in ax.patches:\n        plt.text(p.get_width()+10, p.get_y()+p.get_height()/2, int(p.get_width()), size=7)\n    plt.tight_layout()\n    plt.show()\n    \n# 5. 범주컬럼과 y컬럼 관계 비교 함수\ndef rel_cx_ny(df, category_col, y):  # 여기서 category_col은 새로운 범주컬럼2 임.\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    df2 = df.copy()\n    for i in range(len(cats)):\n        df2.loc[df2[category_col] == cats[i], 'category_col2'] = i\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"과 y컬럼의 관계\"\n    plt.title(a)\n    plt.xticks(np.arange(len(cats)) , cats, rotation=90)\n    plt.xlabel(category_col)\n    sns.scatterplot(data=df2, x='category_col2', y=y)\n    plt.tight_layout()\n    #plt.figure(figsize=(100,3))\n    plt.show()\n    \n# 6. 코호트별로 범주컬럼과 y컬럼 관계 비교 함수\ndef rel_cat_cx_ny(df, category_col1, category_col2, y):  # category_col1 : 코호트, category_col2 : x축 범주\n    cats = df[category_col2].value_counts().sort_values(ascending=False).index\n    df2 = df.copy()\n    for i in range(len(cats)):\n        df2.loc[df2[category_col2] == cats[i], 'category_col2'] = i\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a =  category_col1 + \"별로 \" + category_col2 + \"과 y컬럼의 관계\"\n    plt.title(a)\n    plt.xticks(np.arange(len(cats)) , cats, rotation=90)\n    plt.xlabel(category_col2)\n    sns.scatterplot(data=df2, x='category_col2', y=y, hue= category_col1)\n    plt.tight_layout()\n    #plt.figure(figsize=(100,3))\n    plt.show()\n    \n# 7. 범주컬럼의 범주별 y컬럼 분포 비교 함수\ndef cat_hist(df, category_col, y):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 분포 비교\"\n    plt.title(a)\n    b = df[category_col].value_counts().sort_values()\n    cats = b[b&gt;1].index\n    for i in range(len(cats)):\n        sns.histplot(df[df[category_col]==cats[i]][y], stat='density', label=cats[i])\n        plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n# 8. 코호트별로 x컬럼과 y컬럼의 관계 확인 함수 (겹치기)  \ndef rel_cat_nx_ny1(df, category_col, numeric_col, y):  \n    WxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = category_col + \" 범주별로 \" + numeric_col + \"와 Sale_Price 관계 비교\"\n    plt.title(a)\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    for i in range(len(cats)):\n        a = df[df[category_col]==cats[i]][[numeric_col,y]]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x=numeric_col, y=y, color=WxColourDB[n], label=cats[i])  # 색 달라져야함\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n# 9. 코호트별로 x컬럼과 y컬럼의 관계 확인 함수 (각자)\ndef rel_cat_nx_ny2(df, category_col, numeric_col, y):  \n    WxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','khaki','darkkhaki','orange']\n    plt.clf()\n    plt.figure(figsize=(4,12))\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = category_col + \" 범주별로 \" + numeric_col + \"와 Sale_Price 관계 비교\"\n    plt.title(a, pad=20)\n    plt.axis('off')\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    ax=[]\n    \n    for i in range(len(cats)):\n        a = df[df[category_col]==cats[i]][[numeric_col,y]]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        ax.append(plt.subplot(int(round(len(cats)/2,0)), 2, i+1))\n        plt.xticks(visible=False)\n        plt.yticks(visible=False)\n        plt.subplot(int(round(len(cats)/2,0)), 2, i+1, sharex=ax[0], sharey=ax[0])\n        plt.scatter(a[numeric_col], a[y], color=WxColourDB[n], label=cats[i], s=2)  # 색 달라져야함\n        #plt.legend()\n        plt.subplots_adjust(hspace=1, wspace=0.5)\n        plt.title(cats[i])\n    \n    plt.ylabel(y)\n    plt.xlabel(numeric_col)\n    #plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "project2/columns3/index.html#데이터-불러오기",
    "href": "project2/columns3/index.html#데이터-불러오기",
    "title": "North_Ames",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport math\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/houseprice-with-lonlat.csv')\ntrain_df = train_df.rename(columns = {'Unnamed: 0' : 'Id'})\ntrain_df['Id'] = train_df['Id']-1\n\nloc = train_df.copy()\n# Overall_Cond을 수치화한 Overall_Score 만들기\n# 품질 순위 : 'Very_Poor','Poor','Fair','Below_Average','Average','Above_Average','Good','Very_Good','Excellent','Very_Excellent'\nrank=['Very_Poor','Poor','Fair','Below_Average','Average','Above_Average','Good','Very_Good','Excellent','Very_Excellent']\nfor i in range(len(rank)):\n    loc.loc[loc['Overall_Cond']==rank[i],'Overall_Score']=math.floor((i+1)*2)\n\n# Bedroom_AbvGr을 수치화한 Bedroom_Score 만들기   (오류 메시지가 뜨긴 하지만, 문제 없음)\nroom=loc['Bedroom_AbvGr'].unique()\nfor i in range(len(room)):\n    if room[i] == 8:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=20\n    elif room[i] == 7:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=18\n    elif room[i] == 6:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=16\n    elif room[i] == 5:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=14\n    elif room[i] == 4:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=12\n    elif room[i] == 3:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=10\n    elif room[i] == 2:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=7\n    elif room[i] == 1:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=4\n    else:\n        loc.loc[loc['Bedroom_AbvGr']==room[i],'Bedroom_Score']=1\n\n# Gr_Liv_Area를 수치화한 Live_Score 만들기\nbins=[0, round(146.5,0), round(146.5*2,0), round(146.5*3,0), round(146.5*4,0),round(146.5*5,0),round(146.5*6,0),round(146.5*7,0),round(146.5*8,0),round(146.5*9,0),round(146.5*10,0),round(146.5*11,0),round(146.5*12,0),round(146.5*13,0),round(146.5*14,0),round(146.5*15,0),round(146.5*16,0),round(146.5*17,0),round(146.5*18,0),round(146.5*19,0)]\nbins = list(map(int,bins))\nloc = loc.sort_values('Gr_Liv_Area').reset_index(drop=True)\nfor i in range(len(bins)):\n    if i != 19:\n        loc.loc[bins[i]:bins[i+1]-1 , 'Live_Score'] = i+1\n    if i == 19 :\n        loc.loc[bins[i]: , 'Live_Score'] = i+1\n\nloc = loc.sort_values('Id').reset_index(drop=True)\n\n\n# Total_Bsmt_SF를 수치화한 Base_Score 만들기\nloc = loc.sort_values('Total_Bsmt_SF').reset_index(drop=True)\nfor i in range(len(bins)):\n    if i != 19:\n        loc.loc[bins[i]:bins[i+1]-1 , 'Base_Score'] = i+1\n    if i == 19 :\n        loc.loc[bins[i]: , 'Base_Score'] = i+1\nloc = loc.sort_values('Id').reset_index(drop=True)\n\n        \n# Garage_Area를 수치화한 Garage_Score 만들기\nloc = loc.sort_values('Garage_Area').reset_index(drop=True)\nfor i in range(len(bins)):\n    if i != 19:\n        loc.loc[bins[i]:bins[i+1]-1 , 'Garage_Score'] = i+1\n    if i == 19 :\n        loc.loc[bins[i]: , 'Garage_Score'] = i+1\n\nloc = loc.sort_values('Id').reset_index(drop=True)\n\n\n# 타입 int로 바꾸기\nloc['Overall_Score'] = loc['Overall_Score'].astype(int)\nloc['Bedroom_Score'] = loc['Bedroom_Score'].astype(int)\nloc['Live_Score'] = loc['Live_Score'].astype(int)\nloc['Base_Score'] = loc['Base_Score'].astype(int)\nloc['Garage_Score'] = loc['Garage_Score'].astype(int)\n\n# 총합 Total_Sum 변수 만들기\nloc['Total_Sum'] = loc['Overall_Score']+loc['Bedroom_Score']+loc['Live_Score']+loc['Base_Score']+loc['Garage_Score']\n\n# 지역1 : Northpark_Villa에 해당하는 데이터만 뽑아와서 loc1 데이터프레임 만들기 \nloc1 = loc[loc['Neighborhood']=='Northpark_Villa']\n# 지역2 : North_Ames에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc2 = loc[loc['Neighborhood']=='North_Ames']\n# 지역3 : Briardale에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc3 = loc[loc['Neighborhood']=='Briardale']\n# 지역4 : Edwards에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc4 = loc[loc['Neighborhood']=='Edwards']\n# 지역5 : College_Creek에 해당하는 데이터만 뽑아와서 loc2 데이터프레임 만들기\nloc5 = loc[loc['Neighborhood']=='College_Creek']\n\n\nloc.iloc[:,-6:]\nlen(loc[loc['Live_Score']==3])\nlen(loc)\nlen(loc1)\ntrain_df['Neighborhood'].value_counts()\n\nNeighborhood\nNorth_Ames                                 443\nCollege_Creek                              267\nOld_Town                                   239\nEdwards                                    194\nSomerset                                   182\nNorthridge_Heights                         166\nGilbert                                    165\nSawyer                                     151\nNorthwest_Ames                             131\nSawyer_West                                125\nMitchell                                   114\nBrookside                                  108\nCrawford                                   103\nIowa_DOT_and_Rail_Road                      93\nTimberland                                  72\nNorthridge                                  71\nStone_Brook                                 51\nSouth_and_West_of_Iowa_State_University     48\nClear_Creek                                 44\nMeadow_Village                              37\nBriardale                                   30\nBloomington_Heights                         28\nVeenker                                     24\nNorthpark_Villa                             23\nBlueste                                     10\nGreens                                       8\nGreen_Hills                                  2\nLandmark                                     1\nName: count, dtype: int64\n\n\n\nprint(\"생활면적 데이터 개수 :\",len(train_df[['Gr_Liv_Area']]))\n\nprint(\"최소 생활면적 :\",train_df['Gr_Liv_Area'].min())\nprint(\"최소 생활면적 :\",train_df['Gr_Liv_Area'].max())\n(5642-334)/20\nstart = [334 , 334+265.4 , 334+265.4*2, 334+265.4*3, 334+265.4*4, 334+265.4*5, 334+265.4*6, 334+265.4*7, 334+265.4*8, 334+265.4*9, 334+265.4*10, 334+265.4*11, 334+265.4*12, 334+265.4*13, 334+265.4*14, 334+265.4*15, 334+265.4*16, 334+265.4*17, 334+265.4*18, 334+265.4*19]\nprint(\"시작점 :\",start)\n\nprint(\"지하실면적 데이터 개수 :\",len(train_df['Total_Bsmt_SF']))\nprint(\"최소 지하실면적 :\",train_df['Total_Bsmt_SF'].min())\nprint(\"최소 지하실면적 :\",train_df['Total_Bsmt_SF'].max())\n(6110-0)/20\nstart = [0 , 305.5 , 305.5*2, 305.5*3, 305.5*4, 305.5*5, 305.5*6, 305.5*7, 305.5*8, 305.5*9, 305.5*10, 305.5*11, 305.5*12, 305.5*13, 305.5*14, 305.5*15, 305.5*16, 305.5*17, 305.5*18, 305.5*19]\nprint(\"시작점 :\",start)\n\nprint(\"차고면적 데이터 개수 :\",len(train_df['Garage_Area']))\nprint(\"최소 차고면적 :\",train_df['Garage_Area'].min())\nprint(\"최소 차고면적 :\",train_df['Garage_Area'].max())\n(1488-0)/20\nstart = [0 , 74.4 , 74.4*2, 74.4*3, 74.4*4, 74.4*5, 74.4*6, 74.4*7, 74.4*8, 74.4*9, 74.4*10, 74.4*11, 74.4*12, 74.4*13, 74.4*14, 74.4*15, 74.4*16, 74.4*17, 74.4*18, 74.4*19]\nprint(\"시작점 :\",start)\n\n\n2930/20\nbins=[0, 146.5, 146.5*2, 146.5*3, 146.5*4, 146.5*5, 146.5*6, 146.5*7, 146.5*8, 146.5*9, 146.5*10, 146.5*11, 146.5*12, 146.5*13, 146.5*14, 146.5*15, 146.5*16, 146.5*17, 146.5*18, 146.5*19]\n\n생활면적 데이터 개수 : 2930\n최소 생활면적 : 334\n최소 생활면적 : 5642\n시작점 : [334, 599.4, 864.8, 1130.1999999999998, 1395.6, 1661.0, 1926.3999999999999, 2191.7999999999997, 2457.2, 2722.6, 2988.0, 3253.3999999999996, 3518.7999999999997, 3784.2, 4049.5999999999995, 4315.0, 4580.4, 4845.799999999999, 5111.2, 5376.599999999999]\n지하실면적 데이터 개수 : 2930\n최소 지하실면적 : 0\n최소 지하실면적 : 6110\n시작점 : [0, 305.5, 611.0, 916.5, 1222.0, 1527.5, 1833.0, 2138.5, 2444.0, 2749.5, 3055.0, 3360.5, 3666.0, 3971.5, 4277.0, 4582.5, 4888.0, 5193.5, 5499.0, 5804.5]\n차고면적 데이터 개수 : 2930\n최소 차고면적 : 0\n최소 차고면적 : 1488\n시작점 : [0, 74.4, 148.8, 223.20000000000002, 297.6, 372.0, 446.40000000000003, 520.8000000000001, 595.2, 669.6, 744.0, 818.4000000000001, 892.8000000000001, 967.2, 1041.6000000000001, 1116.0, 1190.4, 1264.8000000000002, 1339.2, 1413.6000000000001]\n\n\n\n\n\n# 1. 수치컬럼의 분포 확인 함수\ndef hist(df, numeric_col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = numeric_col + \"의 분포\"\n    plt.title(a)\n    sns.histplot(df[numeric_col], stat='density')\n    plt.tight_layout()\n    plt.show()\n    \n# 2. 수치컬럼과 y컬럼의 관계 확인 함수\ndef rel_nx_ny(df, numeric_col, y):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = numeric_col + \"과 \"+ y+\"컬럼의 관계\"\n    plt.title(a)\n    sns.scatterplot(data=df, x=numeric_col, y=y)\n    plt.tight_layout()\n    plt.show()\n    \n# 3. 범주컬럼의 빈도 확인 함수 ( 수치변수 넣으면 이상하게 나옴, 범주변수로 변환한 뒤 넣어주기)\ndef cat_count(df, category_col, order):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 빈도\"   \n    plt.title(a)\n    fig, ax = plt.subplots()\n    if order == 'value':\n        sns.countplot(df[category_col], order=df[category_col].value_counts().sort_values().index)\n    elif order == 'index':\n        sns.countplot(df[category_col], order=df[category_col].value_counts().sort_index().index)\n    for p in ax.patches:\n        plt.text(p.get_width(), p.get_y()+p.get_height()/2, int(p.get_width()))\n    plt.tight_layout()\n    #plt.figure(figsize=(5,5))\n    plt.show()\n    \ndef cat_count_x(df, category_col, order):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 빈도\"   \n    plt.title(a)\n    fig, ax = plt.subplots()\n    if order == 'value':\n        sns.countplot(x=df[category_col], order=df[category_col].value_counts().sort_values().index)\n    elif order == 'index':\n        sns.countplot(x=df[category_col], order=df[category_col].value_counts().sort_index().index)\n    for p in ax.patches:\n        plt.text(p.get_x() + p.get_width()/2, p.get_height(), int(p.get_height()), ha='center', va='bottom')\n    plt.tight_layout()\n    #plt.figure(figsize=(5,5))\n    plt.show()\n    \n# 4. 코호트별 범주 컬럼의 빈도 확인 함수\ndef cats_count(df, category_col2 , category_col1):  # category_col1 : x축, category_col2 : 코호트\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col1 + \"의 범주별 \" + category_col2 +\"별 빈도\"    \n    plt.title(a)\n    fig, ax = plt.subplots()\n    sns.countplot(data=df, y=category_col1, hue=category_col2, order=df[category_col1].value_counts().sort_values().index)\n    for p in ax.patches:\n        plt.text(p.get_width()+10, p.get_y()+p.get_height()/2, int(p.get_width()), size=7)\n    plt.tight_layout()\n    plt.show()\n    \n# 5. 범주컬럼과 y컬럼 관계 비교 함수\ndef rel_cx_ny(df, category_col, y):  # 여기서 category_col은 새로운 범주컬럼2 임.\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    df2 = df.copy()\n    for i in range(len(cats)):\n        df2.loc[df2[category_col] == cats[i], 'category_col2'] = i\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"과 y컬럼의 관계\"\n    plt.title(a)\n    plt.xticks(np.arange(len(cats)) , cats, rotation=90)\n    plt.xlabel(category_col)\n    sns.scatterplot(data=df2, x='category_col2', y=y)\n    plt.tight_layout()\n    #plt.figure(figsize=(100,3))\n    plt.show()\n    \n# 6. 코호트별로 범주컬럼과 y컬럼 관계 비교 함수\ndef rel_cat_cx_ny(df, category_col1, category_col2, y):  # category_col1 : 코호트, category_col2 : x축 범주\n    cats = df[category_col2].value_counts().sort_values(ascending=False).index\n    df2 = df.copy()\n    for i in range(len(cats)):\n        df2.loc[df2[category_col2] == cats[i], 'category_col2'] = i\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a =  category_col1 + \"별로 \" + category_col2 + \"과 y컬럼의 관계\"\n    plt.title(a)\n    plt.xticks(np.arange(len(cats)) , cats, rotation=90)\n    plt.xlabel(category_col2)\n    sns.scatterplot(data=df2, x='category_col2', y=y, hue= category_col1)\n    plt.tight_layout()\n    #plt.figure(figsize=(100,3))\n    plt.show()\n    \n# 7. 범주컬럼의 범주별 y컬럼 분포 비교 함수\ndef cat_hist(df, category_col, y):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 분포 비교\"\n    plt.title(a)\n    b = df[category_col].value_counts().sort_values()\n    cats = b[b&gt;1].index\n    for i in range(len(cats)):\n        sns.histplot(df[df[category_col]==cats[i]][y], stat='density', label=cats[i])\n        plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n# 8. 코호트별로 x컬럼과 y컬럼의 관계 확인 함수 (겹치기)  \ndef rel_cat_nx_ny1(df, category_col, numeric_col, y):  \n    WxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = category_col + \" 범주별로 \" + numeric_col + \"와 Sale_Price 관계 비교\"\n    plt.title(a)\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    for i in range(len(cats)):\n        a = df[df[category_col]==cats[i]][[numeric_col,y]]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x=numeric_col, y=y, color=WxColourDB[n], label=cats[i])  # 색 달라져야함\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n# 9. 코호트별로 x컬럼과 y컬럼의 관계 확인 함수 (각자)\ndef rel_cat_nx_ny2(df, category_col, numeric_col, y):  \n    WxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','khaki','darkkhaki','orange']\n    plt.clf()\n    plt.figure(figsize=(4,12))\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = category_col + \" 범주별로 \" + numeric_col + \"와 Sale_Price 관계 비교\"\n    plt.title(a, pad=20)\n    plt.axis('off')\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    ax=[]\n    \n    for i in range(len(cats)):\n        a = df[df[category_col]==cats[i]][[numeric_col,y]]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        ax.append(plt.subplot(int(round(len(cats)/2,0)), 2, i+1))\n        plt.xticks(visible=False)\n        plt.yticks(visible=False)\n        plt.subplot(int(round(len(cats)/2,0)), 2, i+1, sharex=ax[0], sharey=ax[0])\n        plt.scatter(a[numeric_col], a[y], color=WxColourDB[n], label=cats[i], s=2)  # 색 달라져야함\n        #plt.legend()\n        plt.subplots_adjust(hspace=1, wspace=0.5)\n        plt.title(cats[i])\n    \n    plt.ylabel(y)\n    plt.xlabel(numeric_col)\n    #plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "project2/columns3/index.html#loc1-지역1-north_ames",
    "href": "project2/columns3/index.html#loc1-지역1-north_ames",
    "title": "North_Ames",
    "section": "loc1 : 지역1 North_Ames",
    "text": "loc1 : 지역1 North_Ames\n\nSale_Price\n\nhist(loc1, 'Sale_Price')\n\n\n\n\n\n\n\n\n\n\nBedroom_AbvGr\n\nrel_nx_ny(loc1, 'Bedroom_AbvGr', 'Gr_Liv_Area')\nrel_nx_ny(loc1, 'Bedroom_AbvGr', 'Total_Bsmt_SF')\nrel_nx_ny(loc1, 'Bedroom_AbvGr', 'First_Flr_SF')\nrel_nx_ny(loc1, 'Bedroom_AbvGr', 'Garage_Area')\nrel_cx_ny(loc1, 'Overall_Cond', 'Bedroom_AbvGr')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n방 갯수에 따라 생활면적이 넓어지는 경향이 있음 (근데 편차가 큰 듯) 방 갯수에 따라 지하실 면적은 상관 없어 보임 방 갯수에 따라 1층 면적은 상관 없어 보임 방 갯수에 따라 차고 면적은 상관 없어 보임 방 갯수에 따라 품질 관계를 보면, 방 3개인 집이 데이터가 압도적으로 많기 때문에 품질도 다양하게 나오는 듯.\n\nloc1.columns\n\nIndex(['Id', 'MS_SubClass', 'MS_Zoning', 'Lot_Frontage', 'Lot_Area', 'Street',\n       'Alley', 'Lot_Shape', 'Land_Contour', 'Utilities', 'Lot_Config',\n       'Land_Slope', 'Neighborhood', 'Condition_1', 'Condition_2', 'Bldg_Type',\n       'House_Style', 'Overall_Cond', 'Year_Built', 'Year_Remod_Add',\n       'Roof_Style', 'Roof_Matl', 'Exterior_1st', 'Exterior_2nd',\n       'Mas_Vnr_Type', 'Mas_Vnr_Area', 'Exter_Cond', 'Foundation', 'Bsmt_Cond',\n       'Bsmt_Exposure', 'BsmtFin_Type_1', 'BsmtFin_SF_1', 'BsmtFin_Type_2',\n       'BsmtFin_SF_2', 'Bsmt_Unf_SF', 'Total_Bsmt_SF', 'Heating', 'Heating_QC',\n       'Central_Air', 'Electrical', 'First_Flr_SF', 'Second_Flr_SF',\n       'Gr_Liv_Area', 'Bsmt_Full_Bath', 'Bsmt_Half_Bath', 'Full_Bath',\n       'Half_Bath', 'Bedroom_AbvGr', 'Kitchen_AbvGr', 'TotRms_AbvGrd',\n       'Functional', 'Fireplaces', 'Garage_Type', 'Garage_Finish',\n       'Garage_Cars', 'Garage_Area', 'Garage_Cond', 'Paved_Drive',\n       'Wood_Deck_SF', 'Open_Porch_SF', 'Enclosed_Porch', 'Three_season_porch',\n       'Screen_Porch', 'Pool_Area', 'Pool_QC', 'Fence', 'Misc_Feature',\n       'Misc_Val', 'Mo_Sold', 'Year_Sold', 'Sale_Type', 'Sale_Condition',\n       'Sale_Price', 'Longitude', 'Latitude', 'Overall_Score', 'Bedroom_Score',\n       'Live_Score', 'Base_Score', 'Garage_Score', 'Total_Sum'],\n      dtype='object')\n\n\n\n\nGr_Liv_Area\n\nrel_nx_ny(loc1,'Gr_Liv_Area' ,'Sale_Price')\n\n\n\n\n\n\n\n\nGr_Liv_Area 와 Sale_Price가 관계가 있어보임.\n\nplt.clf()\nplt.tight_layout()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.title('North_Ames지역에서 집 품질과 집 가격 관계')\nsns.scatterplot(data=loc1, x='Overall_Score',y='Sale_Price' )\nplt.show()\n\nplt.clf()\nplt.tight_layout()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.title('North_Ames지역에서 침실 개수와 집 가격 관계')\nsns.scatterplot(data=loc1, x='Bedroom_AbvGr',y='Sale_Price' )\nplt.show()\n\n\nplt.clf()\nplt.tight_layout()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.title('North_Ames지역에서 방 개수와 집 가격 관계')\nsns.scatterplot(data=loc1, x='TotRms_AbvGrd', y='Sale_Price')\nplt.show()\n\nplt.clf()\nplt.tight_layout()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.title('North_Ames지역에서 1층 넓이와 집 가격 관계')\nsns.scatterplot(data=loc1, x='First_Flr_SF', y='Sale_Price')\nplt.show()\n\nplt.clf()\nplt.tight_layout()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.title('North_Ames지역에서 생활 면적와 집 가격 관계')\nsns.scatterplot(data=loc1, x='Gr_Liv_Area', y='Sale_Price')\nplt.show()\n\n\nplt.clf()\nplt.tight_layout()\nplt.figure(figsize=(5,5))\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.title('North_Ames지역에서 지하실 면적와 집 가격 관계')\nsns.scatterplot(data=loc1, x='Total_Bsmt_SF', y='Sale_Price')\nplt.show()\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n&lt;Figure size 672x480 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n# 지역 : Northpark_Villa, North_Ames, Briardale, Edwards, College_Creek\nlocal = ['Northpark_Villa', 'North_Ames', 'Briardale', 'Edwards', 'College_Creek']\n\nfor i in range(5):\n    nan_df1 = loc1.isna().sum()\n    print(\"\\n \" ,  local[i] ,\"지역의 nan 갯수 \\n\",nan_df1[nan_df1&gt;0])\n\n\n  Northpark_Villa 지역의 nan 갯수 \n Mas_Vnr_Type    23\nMisc_Feature    23\ndtype: int64\n\n  North_Ames 지역의 nan 갯수 \n Mas_Vnr_Type    23\nMisc_Feature    23\ndtype: int64\n\n  Briardale 지역의 nan 갯수 \n Mas_Vnr_Type    23\nMisc_Feature    23\ndtype: int64\n\n  Edwards 지역의 nan 갯수 \n Mas_Vnr_Type    23\nMisc_Feature    23\ndtype: int64\n\n  College_Creek 지역의 nan 갯수 \n Mas_Vnr_Type    23\nMisc_Feature    23\ndtype: int64\n\n\n\nlen(loc[loc['Neighborhood'] == 'Northpark_Villa'])\n\n23\n\n\n\nfrom sklearn.linear_model import LinearRegression\n\n# Northpark_Villa 지역\ntrain_x = loc1[['Overall_Score','Bedroom_AbvGr','Gr_Liv_Area','Total_Bsmt_SF','Garage_Area']]\ntrain_y = loc1[['Sale_Price']]\n\nmodel = LinearRegression()\nmodel.fit(train_x, train_y)\ntrain_y_pred = model.predict(train_x)\ntrain_y_pred\n\n   \n\nfrom statsmodels.formula.api import ols\n\nmodel = ols(formula = 'Sale_Price ~ Overall_Score + Bedroom_AbvGr + Gr_Liv_Area + Total_Bsmt_SF + Garage_Area',data = loc1).fit()\nprint(model.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:             Sale_Price   R-squared:                       0.713\nModel:                            OLS   Adj. R-squared:                  0.628\nMethod:                 Least Squares   F-statistic:                     8.435\nDate:                Tue, 20 Aug 2024   Prob (F-statistic):           0.000365\nTime:                        02:08:40   Log-Likelihood:                -228.05\nNo. Observations:                  23   AIC:                             468.1\nDf Residuals:                      17   BIC:                             474.9\nDf Model:                           5                                         \nCovariance Type:            nonrobust                                         \n=================================================================================\n                    coef    std err          t      P&gt;|t|      [0.025      0.975]\n---------------------------------------------------------------------------------\nIntercept      3.202e+04   2.77e+04      1.154      0.264   -2.65e+04    9.06e+04\nOverall_Score  4795.2742   1294.379      3.705      0.002    2064.372    7526.176\nBedroom_AbvGr -9068.1515   5430.298     -1.670      0.113   -2.05e+04    2388.775\nGr_Liv_Area      34.8051     11.398      3.054      0.007      10.758      58.853\nTotal_Bsmt_SF   -15.7520     19.658     -0.801      0.434     -57.227      25.723\nGarage_Area     117.2695     45.896      2.555      0.020      20.437     214.102\n==============================================================================\nOmnibus:                        3.991   Durbin-Watson:                   2.246\nProb(Omnibus):                  0.136   Jarque-Bera (JB):                2.145\nSkew:                           0.620   Prob(JB):                        0.342\nKurtosis:                       3.838   Cond. No.                     3.78e+04\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 3.78e+04. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\n\nSale_Price = 0.0003202 + 4795.2742 * Overall_Score -9068.1515 * Bedroom_AbvGr + 34.8051 * Gr_Liv_Area -15.7520 * Total_Bsmt_SF + 117.2695 * Garage_Area\np-value를 보면 절편, Bedroom_AbvGr, Total_Bsmt_SF 이 귀무가설 0을 기각하지 못함. 0이라고 볼 수도 있다.\n\nmodel = ols(formula = 'Sale_Price ~ Overall_Score + Bedroom_AbvGr + Gr_Liv_Area + Garage_Area',data = loc1).fit()\nprint(model.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:             Sale_Price   R-squared:                       0.702\nModel:                            OLS   Adj. R-squared:                  0.636\nMethod:                 Least Squares   F-statistic:                     10.59\nDate:                Tue, 20 Aug 2024   Prob (F-statistic):           0.000136\nTime:                        02:08:41   Log-Likelihood:                -228.47\nNo. Observations:                  23   AIC:                             466.9\nDf Residuals:                      18   BIC:                             472.6\nDf Model:                           4                                         \nCovariance Type:            nonrobust                                         \n=================================================================================\n                    coef    std err          t      P&gt;|t|      [0.025      0.975]\n---------------------------------------------------------------------------------\nIntercept      2.253e+04   2.48e+04      0.907      0.376   -2.97e+04    7.47e+04\nOverall_Score  4421.9321   1195.550      3.699      0.002    1910.174    6933.690\nBedroom_AbvGr -6699.9639   4510.097     -1.486      0.155   -1.62e+04    2775.398\nGr_Liv_Area      35.7915     11.218      3.191      0.005      12.223      59.360\nGarage_Area      97.8589     38.593      2.536      0.021      16.777     178.940\n==============================================================================\nOmnibus:                        1.655   Durbin-Watson:                   2.450\nProb(Omnibus):                  0.437   Jarque-Bera (JB):                0.564\nSkew:                           0.318   Prob(JB):                        0.754\nKurtosis:                       3.430   Cond. No.                     2.82e+04\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 2.82e+04. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\n\n\nmodel = ols(formula = 'Sale_Price ~ Overall_Score + Bedroom_AbvGr + Gr_Liv_Area + Garage_Area',data = loc1).fit()\nprint(model.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:             Sale_Price   R-squared:                       0.702\nModel:                            OLS   Adj. R-squared:                  0.636\nMethod:                 Least Squares   F-statistic:                     10.59\nDate:                Tue, 20 Aug 2024   Prob (F-statistic):           0.000136\nTime:                        02:08:41   Log-Likelihood:                -228.47\nNo. Observations:                  23   AIC:                             466.9\nDf Residuals:                      18   BIC:                             472.6\nDf Model:                           4                                         \nCovariance Type:            nonrobust                                         \n=================================================================================\n                    coef    std err          t      P&gt;|t|      [0.025      0.975]\n---------------------------------------------------------------------------------\nIntercept      2.253e+04   2.48e+04      0.907      0.376   -2.97e+04    7.47e+04\nOverall_Score  4421.9321   1195.550      3.699      0.002    1910.174    6933.690\nBedroom_AbvGr -6699.9639   4510.097     -1.486      0.155   -1.62e+04    2775.398\nGr_Liv_Area      35.7915     11.218      3.191      0.005      12.223      59.360\nGarage_Area      97.8589     38.593      2.536      0.021      16.777     178.940\n==============================================================================\nOmnibus:                        1.655   Durbin-Watson:                   2.450\nProb(Omnibus):                  0.437   Jarque-Bera (JB):                0.564\nSkew:                           0.318   Prob(JB):                        0.754\nKurtosis:                       3.430   Cond. No.                     2.82e+04\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 2.82e+04. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\n\n\nloc.columns\n\nIndex(['Id', 'MS_SubClass', 'MS_Zoning', 'Lot_Frontage', 'Lot_Area', 'Street',\n       'Alley', 'Lot_Shape', 'Land_Contour', 'Utilities', 'Lot_Config',\n       'Land_Slope', 'Neighborhood', 'Condition_1', 'Condition_2', 'Bldg_Type',\n       'House_Style', 'Overall_Cond', 'Year_Built', 'Year_Remod_Add',\n       'Roof_Style', 'Roof_Matl', 'Exterior_1st', 'Exterior_2nd',\n       'Mas_Vnr_Type', 'Mas_Vnr_Area', 'Exter_Cond', 'Foundation', 'Bsmt_Cond',\n       'Bsmt_Exposure', 'BsmtFin_Type_1', 'BsmtFin_SF_1', 'BsmtFin_Type_2',\n       'BsmtFin_SF_2', 'Bsmt_Unf_SF', 'Total_Bsmt_SF', 'Heating', 'Heating_QC',\n       'Central_Air', 'Electrical', 'First_Flr_SF', 'Second_Flr_SF',\n       'Gr_Liv_Area', 'Bsmt_Full_Bath', 'Bsmt_Half_Bath', 'Full_Bath',\n       'Half_Bath', 'Bedroom_AbvGr', 'Kitchen_AbvGr', 'TotRms_AbvGrd',\n       'Functional', 'Fireplaces', 'Garage_Type', 'Garage_Finish',\n       'Garage_Cars', 'Garage_Area', 'Garage_Cond', 'Paved_Drive',\n       'Wood_Deck_SF', 'Open_Porch_SF', 'Enclosed_Porch', 'Three_season_porch',\n       'Screen_Porch', 'Pool_Area', 'Pool_QC', 'Fence', 'Misc_Feature',\n       'Misc_Val', 'Mo_Sold', 'Year_Sold', 'Sale_Type', 'Sale_Condition',\n       'Sale_Price', 'Longitude', 'Latitude', 'Overall_Score', 'Bedroom_Score',\n       'Live_Score', 'Base_Score', 'Garage_Score', 'Total_Sum'],\n      dtype='object')\n\n\n\n# (-93.610649,42.041240) , (-93.625986,42.050680) , (-93.628119,42.052338) , ( -93.660664,42.028191) , (-93.686980,42.027368)\n\na = loc.loc[(loc['Longitude']==-93.610649) & (loc['Latitude']==42.041240), :]\nb = loc.loc[(loc['Longitude']==-93.625986) & (loc['Latitude']==42.050680), :]\nc = loc.loc[(loc['Longitude']==-93.628119) & (loc['Latitude']==42.052338), :]\nd = loc.loc[(loc['Longitude']==-93.660664) & (loc['Latitude']==42.028191), :]\ne = loc.loc[(loc['Longitude']==-93.686980) & (loc['Latitude']==42.027368), :]\n\nf = pd.concat([a,b,c,d,e], axis=0)\n\n\nf.columns\n\nIndex(['Id', 'MS_SubClass', 'MS_Zoning', 'Lot_Frontage', 'Lot_Area', 'Street',\n       'Alley', 'Lot_Shape', 'Land_Contour', 'Utilities', 'Lot_Config',\n       'Land_Slope', 'Neighborhood', 'Condition_1', 'Condition_2', 'Bldg_Type',\n       'House_Style', 'Overall_Cond', 'Year_Built', 'Year_Remod_Add',\n       'Roof_Style', 'Roof_Matl', 'Exterior_1st', 'Exterior_2nd',\n       'Mas_Vnr_Type', 'Mas_Vnr_Area', 'Exter_Cond', 'Foundation', 'Bsmt_Cond',\n       'Bsmt_Exposure', 'BsmtFin_Type_1', 'BsmtFin_SF_1', 'BsmtFin_Type_2',\n       'BsmtFin_SF_2', 'Bsmt_Unf_SF', 'Total_Bsmt_SF', 'Heating', 'Heating_QC',\n       'Central_Air', 'Electrical', 'First_Flr_SF', 'Second_Flr_SF',\n       'Gr_Liv_Area', 'Bsmt_Full_Bath', 'Bsmt_Half_Bath', 'Full_Bath',\n       'Half_Bath', 'Bedroom_AbvGr', 'Kitchen_AbvGr', 'TotRms_AbvGrd',\n       'Functional', 'Fireplaces', 'Garage_Type', 'Garage_Finish',\n       'Garage_Cars', 'Garage_Area', 'Garage_Cond', 'Paved_Drive',\n       'Wood_Deck_SF', 'Open_Porch_SF', 'Enclosed_Porch', 'Three_season_porch',\n       'Screen_Porch', 'Pool_Area', 'Pool_QC', 'Fence', 'Misc_Feature',\n       'Misc_Val', 'Mo_Sold', 'Year_Sold', 'Sale_Type', 'Sale_Condition',\n       'Sale_Price', 'Longitude', 'Latitude', 'Overall_Score', 'Bedroom_Score',\n       'Live_Score', 'Base_Score', 'Garage_Score', 'Total_Sum'],\n      dtype='object')\n\n\n\nf['MS_SubClass'].value_counts()\n\nMS_SubClass\nTwo_Story_PUD_1946_and_Newer           2\nDuplex_All_Styles_and_Ages             1\nTwo_and_Half_Story_All_Ages            1\nOne_Story_1946_and_Newer_All_Styles    1\nName: count, dtype: int64\n\n\n\nf['MS_Zoning'].value_counts()\n\nMS_Zoning\nResidential_Low_Density       4\nResidential_Medium_Density    1\nName: count, dtype: int64\n\n\n\nf['Lot_Frontage'].value_counts()\n\nLot_Frontage\n91    2\n24    2\n60    1\nName: count, dtype: int64\n\n\n\nhist(loc, 'Lot_Frontage')\n\n\n\n\n\n\n\n\n\nf['Sale_Price'].value_counts()\n\nSale_Price\n200000    1\n143000    1\n125000    1\n415000    1\n475000    1\nName: count, dtype: int64\n\n\n\nplt.clf()\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] = False\na = 'Sale_Price' + \"의 분포\"\nplt.title(a)\nsns.histplot(loc['Sale_Price'], stat='density')\n\nplt.axvline(x=200000, color='red')\nplt.axvline(x=143000, color='red')\nplt.axvline(x=125000, color='red')\nplt.axvline(x=415000, color='red')\nplt.axvline(x=475000, color='red')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n```{python}\n# 문서에 코드 보여주는데, 청크 그대로 보여줌.\ntest =1+1\ntest\n```\n\n2\n\n\n\nprint(test)\n\n2"
  },
  {
    "objectID": "project2/columns/index.html",
    "href": "project2/columns/index.html",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/houseprice-with-lonlat.csv')\ntrain_df['Id'] = np.arange(len(train_df) )\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')\ndf = train_df[train_df['Neighborhood'] == 'North_Ames']"
  },
  {
    "objectID": "project2/columns/index.html#데이터-불러오기",
    "href": "project2/columns/index.html#데이터-불러오기",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/houseprice-with-lonlat.csv')\ntrain_df['Id'] = np.arange(len(train_df) )\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')\ndf = train_df[train_df['Neighborhood'] == 'North_Ames']"
  },
  {
    "objectID": "project2/columns/index.html#모든-변수-결측치와-정보-확인",
    "href": "project2/columns/index.html#모든-변수-결측치와-정보-확인",
    "title": "house price columns",
    "section": "0. 모든 변수 결측치와 정보 확인",
    "text": "0. 모든 변수 결측치와 정보 확인\n\nnan_df = train_df.isna().sum()\nnan_df[nan_df&gt;0]\n\nMas_Vnr_Type    1775\nMisc_Feature    2824\ndtype: int64\n\n\n\ntrain_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 2930 entries, 0 to 2929\nData columns (total 76 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Unnamed: 0          2930 non-null   int64  \n 1   MS_SubClass         2930 non-null   object \n 2   MS_Zoning           2930 non-null   object \n 3   Lot_Frontage        2930 non-null   int64  \n 4   Lot_Area            2930 non-null   int64  \n 5   Street              2930 non-null   object \n 6   Alley               2930 non-null   object \n 7   Lot_Shape           2930 non-null   object \n 8   Land_Contour        2930 non-null   object \n 9   Utilities           2930 non-null   object \n 10  Lot_Config          2930 non-null   object \n 11  Land_Slope          2930 non-null   object \n 12  Neighborhood        2930 non-null   object \n 13  Condition_1         2930 non-null   object \n 14  Condition_2         2930 non-null   object \n 15  Bldg_Type           2930 non-null   object \n 16  House_Style         2930 non-null   object \n 17  Overall_Cond        2930 non-null   object \n 18  Year_Built          2930 non-null   int64  \n 19  Year_Remod_Add      2930 non-null   int64  \n 20  Roof_Style          2930 non-null   object \n 21  Roof_Matl           2930 non-null   object \n 22  Exterior_1st        2930 non-null   object \n 23  Exterior_2nd        2930 non-null   object \n 24  Mas_Vnr_Type        1155 non-null   object \n 25  Mas_Vnr_Area        2930 non-null   int64  \n 26  Exter_Cond          2930 non-null   object \n 27  Foundation          2930 non-null   object \n 28  Bsmt_Cond           2930 non-null   object \n 29  Bsmt_Exposure       2930 non-null   object \n 30  BsmtFin_Type_1      2930 non-null   object \n 31  BsmtFin_SF_1        2930 non-null   int64  \n 32  BsmtFin_Type_2      2930 non-null   object \n 33  BsmtFin_SF_2        2930 non-null   int64  \n 34  Bsmt_Unf_SF         2930 non-null   int64  \n 35  Total_Bsmt_SF       2930 non-null   int64  \n 36  Heating             2930 non-null   object \n 37  Heating_QC          2930 non-null   object \n 38  Central_Air         2930 non-null   object \n 39  Electrical          2930 non-null   object \n 40  First_Flr_SF        2930 non-null   int64  \n 41  Second_Flr_SF       2930 non-null   int64  \n 42  Gr_Liv_Area         2930 non-null   int64  \n 43  Bsmt_Full_Bath      2930 non-null   int64  \n 44  Bsmt_Half_Bath      2930 non-null   int64  \n 45  Full_Bath           2930 non-null   int64  \n 46  Half_Bath           2930 non-null   int64  \n 47  Bedroom_AbvGr       2930 non-null   int64  \n 48  Kitchen_AbvGr       2930 non-null   int64  \n 49  TotRms_AbvGrd       2930 non-null   int64  \n 50  Functional          2930 non-null   object \n 51  Fireplaces          2930 non-null   int64  \n 52  Garage_Type         2930 non-null   object \n 53  Garage_Finish       2930 non-null   object \n 54  Garage_Cars         2930 non-null   int64  \n 55  Garage_Area         2930 non-null   int64  \n 56  Garage_Cond         2930 non-null   object \n 57  Paved_Drive         2930 non-null   object \n 58  Wood_Deck_SF        2930 non-null   int64  \n 59  Open_Porch_SF       2930 non-null   int64  \n 60  Enclosed_Porch      2930 non-null   int64  \n 61  Three_season_porch  2930 non-null   int64  \n 62  Screen_Porch        2930 non-null   int64  \n 63  Pool_Area           2930 non-null   int64  \n 64  Pool_QC             2930 non-null   object \n 65  Fence               2930 non-null   object \n 66  Misc_Feature        106 non-null    object \n 67  Misc_Val            2930 non-null   int64  \n 68  Mo_Sold             2930 non-null   int64  \n 69  Year_Sold           2930 non-null   int64  \n 70  Sale_Type           2930 non-null   object \n 71  Sale_Condition      2930 non-null   object \n 72  Sale_Price          2930 non-null   int64  \n 73  Longitude           2930 non-null   float64\n 74  Latitude            2930 non-null   float64\n 75  Id                  2930 non-null   int32  \ndtypes: float64(2), int32(1), int64(33), object(40)\nmemory usage: 1.7+ MB\n\n\n‘Id’ : 수치컬럼에서 제외해야 함.\n‘MS_SubClass’ : 수치컬럼으로 되어있는데, 범주컬럼임.\n‘Lot_Frontage’ : 259개 결측치는 집에 연결된 거리가 없어서 결측치인걸까? 그렇다면 0값으로 처리해주기.\n‘Alley’ : 1369개 결측치는 골목길이 없다는 것임."
  },
  {
    "objectID": "project2/columns/index.html#함수",
    "href": "project2/columns/index.html#함수",
    "title": "house price columns",
    "section": "함수",
    "text": "함수\n\n# 1. 수치컬럼의 분포 확인 함수\ndef hist(df, numeric_col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = numeric_col + \"의 분포\"\n    plt.title(a)\n    sns.histplot(df[numeric_col], stat='density')\n    plt.tight_layout()\n    plt.show()\n    \n# 2. 수치컬럼과 y컬럼의 관계 확인 함수\ndef rel_nx_ny(df, numeric_col, y):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = numeric_col + \"과 \"+ y+\"컬럼의 관계\"\n    plt.title(a)\n    sns.scatterplot(data=df, x=numeric_col, y=y)\n    plt.tight_layout()\n    plt.show()\n    \n# 3. 범주컬럼의 빈도 확인 함수 ( 수치변수 넣으면 이상하게 나옴, 범주변수로 변환한 뒤 넣어주기)\ndef cat_count(df, category_col, order):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 빈도\"   \n    plt.title(a)\n    fig, ax = plt.subplots()\n    if order == 'value':\n        sns.countplot(df[category_col], order=df[category_col].value_counts().sort_values().index)\n    elif order == 'index':\n        sns.countplot(df[category_col], order=df[category_col].value_counts().sort_index().index)\n    for p in ax.patches:\n        plt.text(p.get_width(), p.get_y()+p.get_height()/2, int(p.get_width()))\n    plt.tight_layout()\n    #plt.figure(figsize=(5,5))\n    plt.show()\n    \n# 4. 코호트별 범주 컬럼의 빈도 확인 함수\ndef cats_count(df, category_col2 , category_col1):  # category_col1 : x축, category_col2 : 코호트\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col1 + \"의 범주별 \" + category_col2 +\"별 빈도\"    \n    plt.title(a)\n    fig, ax = plt.subplots()\n    sns.countplot(data=df, y=category_col1, hue=category_col2, order=df[category_col1].value_counts().sort_values().index)\n    for p in ax.patches:\n        plt.text(p.get_width()+10, p.get_y()+p.get_height()/2, int(p.get_width()), size=7)\n    plt.tight_layout()\n    plt.show()\n    \n# 5. 범주컬럼과 y컬럼 관계 비교 함수\ndef rel_cx_ny(df, category_col, y):  # 여기서 category_col은 새로운 범주컬럼2 임.\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    df2 = df.copy()\n    for i in range(len(cats)):\n        df2.loc[df2[category_col] == cats[i], 'category_col2'] = i\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"과 y컬럼의 관계\"\n    plt.title(a)\n    plt.xticks(np.arange(len(cats)) , cats, rotation=90)\n    plt.xlabel(category_col)\n    sns.scatterplot(data=df2, x='category_col2', y=y)\n    plt.tight_layout()\n    #plt.figure(figsize=(100,3))\n    plt.show()\n    \n# 6. 코호트별로 범주컬럼과 y컬럼 관계 비교 함수\ndef rel_cat_cx_ny(df, category_col1, category_col2, y):  # category_col1 : 코호트, category_col2 : x축 범주\n    cats = df[category_col2].value_counts().sort_values(ascending=False).index\n    df2 = df.copy()\n    for i in range(len(cats)):\n        df2.loc[df2[category_col2] == cats[i], 'category_col2'] = i\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a =  category_col1 + \"별로 \" + category_col2 + \"과 y컬럼의 관계\"\n    plt.title(a)\n    plt.xticks(np.arange(len(cats)) , cats, rotation=90)\n    plt.xlabel(category_col2)\n    sns.scatterplot(data=df2, x='category_col2', y=y, hue= category_col1)\n    plt.tight_layout()\n    #plt.figure(figsize=(100,3))\n    plt.show()\n    \n# 7. 범주컬럼의 범주별 y컬럼 분포 비교 함수\ndef cat_hist(df, category_col, y):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    a = category_col + \"의 범주별 분포 비교\"\n    plt.title(a)\n    b = df[category_col].value_counts().sort_values()\n    cats = b[b&gt;1].index\n    for i in range(len(cats)):\n        sns.histplot(df[df[category_col]==cats[i]][y], stat='density', label=cats[i])\n        plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n# 8. 코호트별로 x컬럼과 y컬럼의 관계 확인 함수 (겹치기)  \ndef rel_cat_nx_ny1(df, category_col, numeric_col, y):  \n    WxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = category_col + \" 범주별로 \" + numeric_col + \"와 Sale_Price 관계 비교\"\n    plt.title(a)\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    for i in range(len(cats)):\n        a = df[df[category_col]==cats[i]][[numeric_col,y]]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x=numeric_col, y=y, color=WxColourDB[n], label=cats[i])  # 색 달라져야함\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \n# 9. 코호트별로 x컬럼과 y컬럼의 관계 확인 함수 (각자)\ndef rel_cat_nx_ny2(df, category_col, numeric_col, y):  \n    WxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','khaki','darkkhaki','orange']\n    plt.clf()\n    plt.figure(figsize=(4,12))\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = category_col + \" 범주별로 \" + numeric_col + \"와 Sale_Price 관계 비교\"\n    plt.title(a, pad=20)\n    plt.axis('off')\n    cats = df[category_col].value_counts().sort_values(ascending=False).index\n    ax=[]\n    \n    for i in range(len(cats)):\n        a = df[df[category_col]==cats[i]][[numeric_col,y]]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        ax.append(plt.subplot(int(round(len(cats)/2,0)), 2, i+1))\n        plt.xticks(visible=False)\n        plt.yticks(visible=False)\n        plt.subplot(int(round(len(cats)/2,0)), 2, i+1, sharex=ax[0], sharey=ax[0])\n        plt.scatter(a[numeric_col], a[y], color=WxColourDB[n], label=cats[i], s=2)  # 색 달라져야함\n        #plt.legend()\n        plt.subplots_adjust(hspace=1, wspace=0.5)\n        plt.title(cats[i])\n    \n    plt.ylabel(y)\n    plt.xlabel(numeric_col)\n    #plt.tight_layout()\n    plt.show()\n\n\n#train_df['Bedroom_AbvGr'] = train_df['Bedroom_AbvGr'].astype(str)\n#train_df['Overall_Score'] = train_df['Overall_Score'].astype(str)\n#cat_count(train_df, 'Bedroom_AbvGr')\n#cat_count(train_df, 'Overall_Cond')\n#cat_count(train_df, 'Overall_Score')\n\n\n#rel_cat_nx_ny(train_df,'MS_Zoning','Lot_Area' ,'Sale_Price')\n\n\n#rel_cat_nx_ny(train_df, 'MS_Zoning','Lot_Area' ,'Sale_Price')"
  },
  {
    "objectID": "project2/columns/index.html#sale_price-판매-가격",
    "href": "project2/columns/index.html#sale_price-판매-가격",
    "title": "house price columns",
    "section": "1. ‘Sale_Price’ : 판매 가격",
    "text": "1. ‘Sale_Price’ : 판매 가격\n\nhist(train_df, 'Sale_Price')\n\nprint(\"최소값 :\", train_df['Sale_Price'].min())\nprint(\"최대값 :\", train_df['Sale_Price'].max())\n\n\n\n\n\n\n\n\n최소값 : 12789\n최대값 : 755000\n\n\n이상치 있어보임. 100,000~200,000 달러가 제일 많아보임."
  },
  {
    "objectID": "project2/columns/index.html#ms_subclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "href": "project2/columns/index.html#ms_subclass-판매-관련-주택-타입-1층인지-2층인지-언제적-집구조인지-다세대인지-등등---수치컬럼으로-되어-있지만-범주-컬럼임.",
    "title": "house price columns",
    "section": "2. ‘MS_SubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) <- 수치컬럼으로 되어 있지만 범주 컬럼임.",
    "text": "2. ‘MS_SubClass’ : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) &lt;- 수치컬럼으로 되어 있지만 범주 컬럼임.\n\n#cat_count(train_df, 'MS_SubClass')\n\n#rel_cx_ny(train_df,'MS_SubClass', 'Sale_Price' )\n\n#cat_hist(train_df, 'MS_SubClass', 'Sale_Price')\n\n'One_Story_1946_and_Newer_All_Styles' : 1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)\n'Two_Story_1946_and_Newer' : 1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)\n'One_Story_PUD_1946_and_Newer' : 1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음) 'One_and_Half_Story_Finished_All_Ages' : 2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집\n'Split_Foyer' : 현관 앞에 계단으로 층이 엇갈려있는 집\n'Two_Story_PUD_1946_and_Newer' : 1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)\n'Split_or_Multilevel' : 각 층이 엇갈려있는 집\n'One_Story_1945_and_Older' : 1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)\n'Duplex_All_Styles_and_Ages' : 다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)\n'Two_Family_conversion_All_Styles_and_Ages' : 한 집을 두 집으로 개조해서 쪼갠 집\n'One_and_Half_Story_Unfinished_All_Ages' : 2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집\n'Two_Story_1945_and_Older' : 1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)\n'Two_and_Half_Story_All_Ages' : 3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집\n'One_Story_with_Finished_Attic_All_Ages' : 다락방이 있는 1층짜리 집 &lt;- 데이터 4개밖에 없음 (1926,1930,1949,1979)\n'PUD_Multilevel_Split_Level_Foyer' : 연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집\n'One_and_Half_Story_PUD_All_Ages' : 2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)\n\ncols = train_df.columns\ntrain_df[train_df['MS_SubClass'] == 20]['Year_Built'].sort_values()  # 'MS_SubClass'=20은 1938, 1946~2010에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 30]['Year_Built'].sort_values()  # 'MS_SubClass'=30은 1885, 1910~1945, 1948에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 60]['Year_Built'].sort_values()  # 'MS_SubClass'=60은 1946~2009에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 70]['Year_Built'].sort_values()  # 'MS_SubClass'=70은 1872~1945에 지어진 집임\n\nSeries([], Name: Year_Built, dtype: int64)\n\n\n\ntrain_df[train_df['MS_SubClass'] == 120]['Year_Built'].sort_values()   # 1976~2009에 지어진 집임.\n\nSeries([], Name: Year_Built, dtype: int64)"
  },
  {
    "objectID": "project2/columns/index.html#ms_zoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "href": "project2/columns/index.html#ms_zoning-판매-관련-일반-구역-분류-수상-거주지인지-밀도가-높은-거주지인지-등",
    "title": "house price columns",
    "section": "3. ‘MS_Zoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)",
    "text": "3. ‘MS_Zoning’ : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)\n\n#cat_count(train_df, 'MS_Zoning')\n#rel_cx_ny(train_df,'MS_Zoning', 'Sale_Price' )\n#cat_hist(train_df, 'MS_Zoning', 'Sale_Price')\n\n#print(train_df['MS_Zoning'].value_counts())\n\n   A    농업\n   C    상업\n   I    산업\n   Floating_Village_Residential     수상 거주지\n   Residential_High_Density         높은 밀도 거주지\n   Residential_Medium_Density       중간 밀도 거주지\n   Residential_Low_Density          낮은 밀도 거주지\n   RP   Residential Low Density Park \n   \n빈도를 확인해보면, 제일 많은게 RL(낮은 밀도 거주지)임.\n범주별 분포를 보면, 범주마다 집값이 살짝 다른 것 같음. Residential_Low_Density 분포에 이상치도 존재하는 것 같다.\n\n#cats_count(train_df,  'MS_Zoning', 'Neighborhood' )\n\nNorth_Ames에 밀도가 낮은 집들이 대부분이고, 밀도가 높은 집이 7개뿐임? 7개만 모여도 밀도가 높은거야?\n\ntrain_df[train_df['Neighborhood']=='North_Ames']['MS_Zoning'].value_counts()\n\nMS_Zoning\nResidential_Low_Density     436\nResidential_High_Density      7\nName: count, dtype: int64\n\n\n\n#rel_cx_ny(train_df[train_df['Neighborhood']=='North_Ames'], 'MS_Zoning', 'Sale_Price')\n\n\nrel_cat_cx_ny(train_df,'MS_Zoning' ,'Neighborhood', 'Sale_Price')"
  },
  {
    "objectID": "project2/columns/index.html#lot_frontage-집과-연결된-거리의-직선-길이-feet",
    "href": "project2/columns/index.html#lot_frontage-집과-연결된-거리의-직선-길이-feet",
    "title": "house price columns",
    "section": "4. ‘Lot_Frontage’ : 집과 연결된 거리의 직선 길이 (feet)",
    "text": "4. ‘Lot_Frontage’ : 집과 연결된 거리의 직선 길이 (feet)\n\nhist(train_df, 'Lot_Frontage')\n\nrel_nx_ny(train_df,'Lot_Frontage','Sale_Price' )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n결측치 259개 있음. &lt;- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기.\nLot_Frontage의 분포를 보면 이상치 있어보임. Lot_Frontage과 Sale_Price의 관계를 보면 많이 퍼져있기는한데 이상치를 제외하면 양의 관계가 있는 것 같기도 함.\n\n#rel_cx_ny('Lot_Frontage', 'MS_Zoning') # 범주별로 y값과의 관계를 알아봄.\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'Lot_Frontage', y='Sale_Price', hue='MS_Zoning')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.clf()\nsns.scatterplot(data=train_df, x = 'Lot_Frontage', y='Lot_Area', size='Sale_Price')\nplt.show()\n\n\n\n\n\n\n\n\n\ntrain_df['MS_SubClass'] = train_df['MS_SubClass'].astype(str)\nplt.clf()\nsns.scatterplot(data=train_df, x = 'MS_SubClass', y='Neighborhood', size='Sale_Price')\nplt.show()"
  },
  {
    "objectID": "project2/columns/index.html#lot_area-부지-크기-square-feet",
    "href": "project2/columns/index.html#lot_area-부지-크기-square-feet",
    "title": "house price columns",
    "section": "5. ‘Lot_Area’ : 부지 크기 (square feet)",
    "text": "5. ‘Lot_Area’ : 부지 크기 (square feet)\n\nhist(train_df, 'Lot_Area')\n\n#rel_nx_ny(train_df, 'Lot_Area')\n\n\n\n\n\n\n\n\nLot_Area의 분포를 보면 이상치 있어보임. Lot_Area과 Sale_Price의 관계를 보면 일부의 집 때문에 굉장히 퍼지는 관계임.\n\n#train_cat_rel_xy('Lot_Area', 'MS_Zoning') # 범주별로 y값과의 관계를 알아봄."
  },
  {
    "objectID": "project2/columns/index.html#street-집에-접근-도로-유형-자갈길인지-포장길인지",
    "href": "project2/columns/index.html#street-집에-접근-도로-유형-자갈길인지-포장길인지",
    "title": "house price columns",
    "section": "6. ‘Street’ : 집에 접근 도로 유형 (자갈길인지, 포장길인지)",
    "text": "6. ‘Street’ : 집에 접근 도로 유형 (자갈길인지, 포장길인지)\n\n#cats_count(train_df, 'Street')\n#train_cat_hist('Street')\n\nprint(train_df['Street'].value_counts())\n\nStreet\nPave    2918\nGrvl      12\nName: count, dtype: int64\n\n\n   Grvl 자갈길 \n   Pave 포장길\n자갈길이 6개밖에 안됨. 범주별 분포를 보면, 포장길에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/index.html#alley-집에-접근-골목-유형-자갈-골목길인지-포장-골목길인지",
    "href": "project2/columns/index.html#alley-집에-접근-골목-유형-자갈-골목길인지-포장-골목길인지",
    "title": "house price columns",
    "section": "7. ‘Alley’ : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)",
    "text": "7. ‘Alley’ : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)\n\n#cats_count(train_df, 'Alley')\n#train_cat_hist('Alley')\n\nprint(train_df['Alley'].value_counts())\n\nAlley\nNo_Alley_Access    2732\nGravel              120\nPaved                78\nName: count, dtype: int64\n\n\n   Grvl 자갈 골목길\n   Pave 포장된 골목길\n   NA   골목길 없음\n1369 결측치 있음. &lt;- 이게 다 골목길 없다는 것임. 범주별 분포가 많이 다름. &lt;- 범주별로 집 가격 차이가 있을 것임."
  },
  {
    "objectID": "project2/columns/index.html#lot_shape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "href": "project2/columns/index.html#lot_shape-일반적인-집-모양-일반적인-모양인지-일반적이지-않은-모양인지-등",
    "title": "house price columns",
    "section": "8. ‘Lot_Shape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)",
    "text": "8. ‘Lot_Shape’ : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)\n\n#cats_count(train_df, 'Lot_Shape')\n#train_cat_hist('Lot_Shape')\n\nprint(train_df['Lot_Shape'].value_counts())\n\nLot_Shape\nRegular                 1859\nSlightly_Irregular       979\nModerately_Irregular      76\nIrregular                 16\nName: count, dtype: int64\n\n\n   Reg  보통\n   IR1  약간 보통이 아님\n   IR2  중간 정도 보통이 아님\n   IR3  보통이 아님\n일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도…?\n범주별 분포가 크게 다른 것 같진 않음. 근데 파란색분포는 살짝 다른 것 같음.\n주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/index.html#land_contour-집의-평탄-정도",
    "href": "project2/columns/index.html#land_contour-집의-평탄-정도",
    "title": "house price columns",
    "section": "9. ‘Land_Contour’ : 집의 평탄 정도",
    "text": "9. ‘Land_Contour’ : 집의 평탄 정도\n\n#cats_count(train_df, 'Land_Contour')\n#train_cat_hist('Land_Contour')\n\n\nprint(train_df['Land_Contour'].value_counts())\n\nLand_Contour\nLvl    2633\nHLS     120\nBnk     117\nLow      60\nName: count, dtype: int64\n\n\n   Lvl  평평한 것에 가까움  \n   Bnk  기움 - Quick and significant rise from street grade to building\n   HLS  비탈 - Significant slope from side to side\n   Low 움푹한 곳\n평평한 것에 가까운게 많음. 범주별 분포 차이가 없어 보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/index.html#utilities-전기-가스-수도-하수도-사용-가능-여부",
    "href": "project2/columns/index.html#utilities-전기-가스-수도-하수도-사용-가능-여부",
    "title": "house price columns",
    "section": "10. ‘Utilities’ : 전기, 가스, 수도, 하수도 사용 가능 여부",
    "text": "10. ‘Utilities’ : 전기, 가스, 수도, 하수도 사용 가능 여부\n\n#cats_count(train_df, 'Utilities')\n\nplt.clf()\nsns.histplot(train_df[train_df['Utilities']=='AllPub']['Sale_Price'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSewr']['Sale_Price'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSeWa']['Sale_Price'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='ELO']['Sale_Price'], stat='density')\nplt.title('Utilities 범주별, Sale_Price 분포')\nplt.tight_layout()\nplt.show()\n\nprint(train_df['Utilities'].value_counts())\n\n\n\n\n\n\n\n\nUtilities\nAllPub    2927\nNoSewr       2\nNoSeWa       1\nName: count, dtype: int64\n\n\n   AllPub   전기, 가스, 물, 하수도  \n   NoSewr   전기, 가스, 물 (정화조)\n   NoSeWa   전기, 가스\n   ELO      전기\n전기, 가스만 사용가능한 집이 1개만 있고, 그 외에는 모두 사용 가능한 집임. 이상치 존재해 보임."
  },
  {
    "objectID": "project2/columns/index.html#lot_config-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "href": "project2/columns/index.html#lot_config-부지-배열-부지-위치가-안쪽인지-코너인지-도로가-몇-개인지-등",
    "title": "house price columns",
    "section": "11. ‘Lot_Config’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)",
    "text": "11. ‘Lot_Config’ : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)\n\n#cats_count(train_df, 'Lot_Config')\n\n#train_cat_hist('Lot_Config')\n\nprint(train_df['Lot_Config'].value_counts())\n\nLot_Config\nInside     2140\nCorner      511\nCulDSac     180\nFR2          85\nFR3          14\nName: count, dtype: int64\n\n\n   Inside   안쪽 부지\n   Corner   코너 부지\n   CulDSac  출입하는 길이 하나인 곳\n   FR2      도로.강을 향한 면이 2곳\n   FR3      도로.강을 향한 면이 3곳\n범주별로 분포 차이가 없어보임. 초록색, 주황색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/index.html#land_slope-집-토지-경사-경사가-약간인지-심각한지-등",
    "href": "project2/columns/index.html#land_slope-집-토지-경사-경사가-약간인지-심각한지-등",
    "title": "house price columns",
    "section": "12. ‘Land_Slope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)",
    "text": "12. ‘Land_Slope’ : 집 토지 경사 (경사가 약간인지, 심각한지 등)\n\n#cats_count(train_df, 'Land_Slope')\n#train_cat_hist('Land_Slope')\n\nprint(train_df['Land_Slope'].value_counts())\n\nLand_Slope\nGtl    2789\nMod     125\nSev      16\nName: count, dtype: int64\n\n\n   Gtl  약간 경사\n   Mod  보통 경사\n   Sev  심한 경사\n경사가 심하면 건축비용이 많이 든다길래 집값에 차이가 있을 줄 알았는데, 범주별로 분포의 차이가 없어보임. 파란색 분포에 이상치가 있어보임."
  },
  {
    "objectID": "project2/columns/index.html#neighborhood-physical-locations-within-ames-city-limits-집-위치",
    "href": "project2/columns/index.html#neighborhood-physical-locations-within-ames-city-limits-집-위치",
    "title": "house price columns",
    "section": "13. ‘Neighborhood’ : Physical locations within Ames city limits (집 위치)",
    "text": "13. ‘Neighborhood’ : Physical locations within Ames city limits (집 위치)\n\n#cats_count(train_df, 'Neighborhood')\n#train_cat_hist('Neighborhood')\nplt.clf()\nsns.countplot(data=train_df, x='Neighborhood')\nplt.xticks(rotation = 50)\nplt.show()\n\n\nb = train_df['Neighborhood'].unique()\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[1]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[2]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[3]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[4]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[5]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[6]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[7]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[8]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[9]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[11]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[12]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[13]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[14]]['Sale_Price'], stat='density')\nplt.title('Neighborhood 범주별, Sale_Price 분포')\nplt.show()\n\nprint(train_df['Neighborhood'].value_counts().sort_index())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeighborhood\nBloomington_Heights                         28\nBlueste                                     10\nBriardale                                   30\nBrookside                                  108\nClear_Creek                                 44\nCollege_Creek                              267\nCrawford                                   103\nEdwards                                    194\nGilbert                                    165\nGreen_Hills                                  2\nGreens                                       8\nIowa_DOT_and_Rail_Road                      93\nLandmark                                     1\nMeadow_Village                              37\nMitchell                                   114\nNorth_Ames                                 443\nNorthpark_Villa                             23\nNorthridge                                  71\nNorthridge_Heights                         166\nNorthwest_Ames                             131\nOld_Town                                   239\nSawyer                                     151\nSawyer_West                                125\nSomerset                                   182\nSouth_and_West_of_Iowa_State_University     48\nStone_Brook                                 51\nTimberland                                  72\nVeenker                                     24\nName: count, dtype: int64\n\n\n   Blmngtn  Bloomington Heights\n   Blueste  Bluestem\n   BrDale   Briardale\n   BrkSide  Brookside\n   ClearCr  Clear Creek\n   CollgCr  College Creek\n   Crawfor  Crawford\n   Edwards  Edwards\n   Gilbert  Gilbert\n   IDOTRR   Iowa DOT and Rail Road\n   MeadowV  Meadow Village\n   Mitchel  Mitchell\n   Names    North Ames\n   NoRidge  Northridge\n   NPkVill  Northpark Villa\n   NridgHt  Northridge Heights\n   NWAmes   Northwest Ames\n   OldTown  Old Town\n   SWISU    South & West of Iowa State University\n   Sawyer   Sawyer\n   SawyerW  Sawyer West\n   Somerst  Somerset\n   StoneBr  Stone Brook\n   Timber   Timberland\n   Veenker  Veenker\n분포 차이가 있는 지역이 있는 것 같음. &lt;- 특정 지역은 집값의 차이가 있다고 볼 수 있음. 집값이 비슷한 지역끼리 묶어서 분석해볼 수도 있을 것 같음.\n빨간색, 파란색 분포에서 이상치가 있어보임.\n보라색, 하늘색, 주황색, 회색, 분홍색 지역은 특정 집값에 몰려있는 것 같음.\n집 데이터가 가장 많은 지역은 NridgHt임. 그 다음이 CollgCr임.\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['Sale_Price'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['Sale_Price'], stat='density')\nplt.title('Neighborhood 범주별, Sale_Price 분포')\nplt.show()\n\n\n\n\n\n\n\n\n집 데이터가 가장 많은 두 지역을 보면 집값 차이가 큼"
  },
  {
    "objectID": "project2/columns/index.html#condition_1-다양한-조건에-근접한지-중요-도로에-근접한지-공원에-근접한지-평범한지-등",
    "href": "project2/columns/index.html#condition_1-다양한-조건에-근접한지-중요-도로에-근접한지-공원에-근접한지-평범한지-등",
    "title": "house price columns",
    "section": "14. ‘Condition_1’ : 다양한 조건에 근접한지 (중요 도로에 근접한지, 공원에 근접한지, 평범한지 등)",
    "text": "14. ‘Condition_1’ : 다양한 조건에 근접한지 (중요 도로에 근접한지, 공원에 근접한지, 평범한지 등)\n\n#cats_count(train_df, 'Condition_1')\n#train_cat_hist('Condition_1')\n\ntrain_df['Condition_1'].value_counts()\n\nCondition_1\nNorm      2522\nFeedr      164\nArtery      92\nRRAn        50\nPosN        39\nRRAe        28\nPosA        20\nRRNn         9\nRRNe         6\nName: count, dtype: int64\n\n\n   Artery       간선도로(도시의 주요지점 연결 도로 - 고속도로, 대로 등)에 인접\n   Feedr        2차 도로(고속도로에 들어가기 전 도로 - 보조 도로)에 인접\n   Norm         보통\n   RRNn         North-South Railroad에서 200' 내에 있다.\n   RRAn         North-South Railroad에 인접 \n   PosN         공원, 그린벨트, 등등 off-site인 곳\n   PosA         공원, 그린벨트, 등등 off-site에 인접\n   RRNe         East-West Railroad에서 200' 내에 있다.\n   RRAe         East-West Railroad에 인접\nNorm이 압도적으로 많음. Feedr와 Artery가 다른 조건들보다는 많음.\n\npd.set_option('display.max_rows',None)\ntrain_df.groupby(['Neighborhood','Condition_1']).agg(id_count=('Id','count'))\n\n\n\n\n\n\n\n\n\nid_count\n\n\nNeighborhood\nCondition_1\n\n\n\n\n\nBloomington_Heights\nNorm\n28\n\n\nBlueste\nNorm\n10\n\n\nBriardale\nNorm\n30\n\n\nBrookside\nArtery\n1\n\n\nFeedr\n14\n\n\nNorm\n78\n\n\nPosN\n1\n\n\nRRAn\n12\n\n\nRRNn\n2\n\n\nClear_Creek\nFeedr\n4\n\n\nNorm\n40\n\n\nCollege_Creek\nFeedr\n2\n\n\nNorm\n259\n\n\nPosN\n6\n\n\nCrawford\nArtery\n1\n\n\nFeedr\n4\n\n\nNorm\n95\n\n\nPosA\n2\n\n\nPosN\n1\n\n\nEdwards\nArtery\n7\n\n\nFeedr\n12\n\n\nNorm\n174\n\n\nPosN\n1\n\n\nGilbert\nFeedr\n2\n\n\nNorm\n144\n\n\nRRAn\n17\n\n\nRRNn\n2\n\n\nGreen_Hills\nNorm\n2\n\n\nGreens\nNorm\n8\n\n\nIowa_DOT_and_Rail_Road\nArtery\n7\n\n\nFeedr\n6\n\n\nNorm\n76\n\n\nRRAe\n1\n\n\nRRNe\n2\n\n\nRRNn\n1\n\n\nLandmark\nNorm\n1\n\n\nMeadow_Village\nNorm\n37\n\n\nMitchell\nArtery\n3\n\n\nFeedr\n2\n\n\nNorm\n109\n\n\nNorth_Ames\nArtery\n29\n\n\nFeedr\n31\n\n\nNorm\n369\n\n\nPosA\n5\n\n\nPosN\n8\n\n\nRRAn\n1\n\n\nNorthpark_Villa\nNorm\n23\n\n\nNorthridge\nNorm\n71\n\n\nNorthridge_Heights\nNorm\n161\n\n\nPosA\n1\n\n\nPosN\n4\n\n\nNorthwest_Ames\nFeedr\n8\n\n\nNorm\n92\n\n\nPosA\n8\n\n\nPosN\n12\n\n\nRRAn\n10\n\n\nRRNn\n1\n\n\nOld_Town\nArtery\n42\n\n\nFeedr\n11\n\n\nNorm\n184\n\n\nRRAn\n2\n\n\nSawyer\nFeedr\n32\n\n\nNorm\n99\n\n\nPosA\n2\n\n\nPosN\n1\n\n\nRRAe\n15\n\n\nRRNe\n2\n\n\nSawyer_West\nFeedr\n14\n\n\nNorm\n97\n\n\nRRAe\n12\n\n\nRRNe\n2\n\n\nSomerset\nFeedr\n9\n\n\nNorm\n159\n\n\nPosN\n3\n\n\nRRAn\n8\n\n\nRRNn\n3\n\n\nSouth_and_West_of_Iowa_State_University\nArtery\n2\n\n\nFeedr\n9\n\n\nNorm\n37\n\n\nStone_Brook\nNorm\n48\n\n\nPosA\n1\n\n\nPosN\n2\n\n\nTimberland\nNorm\n71\n\n\nPosA\n1\n\n\nVeenker\nFeedr\n4\n\n\nNorm\n20\n\n\n\n\n\n\n\n\npd.set_option('display.max_rows',None)\ntrain_df.groupby(['Neighborhood','Bedroom_AbvGr']).agg(id_count=('Id','count'))\n\n\n\n\n\n\n\n\n\nid_count\n\n\nNeighborhood\nBedroom_AbvGr\n\n\n\n\n\nBloomington_Heights\n1\n3\n\n\n2\n25\n\n\nBlueste\n1\n2\n\n\n2\n7\n\n\n3\n1\n\n\nBriardale\n2\n14\n\n\n3\n15\n\n\n4\n1\n\n\nBrookside\n1\n6\n\n\n2\n39\n\n\n3\n53\n\n\n4\n9\n\n\n5\n1\n\n\nClear_Creek\n0\n2\n\n\n1\n5\n\n\n2\n10\n\n\n3\n14\n\n\n4\n10\n\n\n5\n3\n\n\nCollege_Creek\n1\n16\n\n\n2\n26\n\n\n3\n211\n\n\n4\n14\n\n\nCrawford\n1\n1\n\n\n2\n28\n\n\n3\n50\n\n\n4\n22\n\n\n5\n2\n\n\nEdwards\n1\n4\n\n\n2\n61\n\n\n3\n93\n\n\n4\n30\n\n\n5\n5\n\n\n6\n1\n\n\nGilbert\n2\n5\n\n\n3\n138\n\n\n4\n21\n\n\n5\n1\n\n\nGreen_Hills\n1\n1\n\n\n2\n1\n\n\nGreens\n1\n8\n\n\nIowa_DOT_and_Rail_Road\n1\n7\n\n\n2\n37\n\n\n3\n35\n\n\n4\n12\n\n\n5\n2\n\n\nLandmark\n3\n1\n\n\nMeadow_Village\n1\n8\n\n\n2\n4\n\n\n3\n22\n\n\n4\n2\n\n\n5\n1\n\n\nMitchell\n0\n1\n\n\n1\n5\n\n\n2\n33\n\n\n3\n59\n\n\n4\n13\n\n\n5\n3\n\n\nNorth_Ames\n1\n3\n\n\n2\n117\n\n\n3\n260\n\n\n4\n50\n\n\n5\n5\n\n\n6\n8\n\n\nNorthpark_Villa\n2\n11\n\n\n3\n11\n\n\n4\n1\n\n\nNorthridge\n2\n5\n\n\n3\n22\n\n\n4\n43\n\n\n5\n1\n\n\nNorthridge_Heights\n1\n8\n\n\n2\n60\n\n\n3\n69\n\n\n4\n27\n\n\n5\n2\n\n\nNorthwest_Ames\n2\n10\n\n\n3\n80\n\n\n4\n39\n\n\n5\n2\n\n\nOld_Town\n0\n1\n\n\n1\n9\n\n\n2\n85\n\n\n3\n90\n\n\n4\n40\n\n\n5\n13\n\n\n6\n1\n\n\nSawyer\n0\n2\n\n\n1\n1\n\n\n2\n27\n\n\n3\n105\n\n\n4\n13\n\n\n6\n3\n\n\nSawyer_West\n1\n3\n\n\n2\n24\n\n\n3\n75\n\n\n4\n17\n\n\n5\n1\n\n\n6\n5\n\n\nSomerset\n1\n9\n\n\n2\n59\n\n\n3\n109\n\n\n4\n5\n\n\nSouth_and_West_of_Iowa_State_University\n1\n1\n\n\n2\n9\n\n\n3\n19\n\n\n4\n12\n\n\n5\n3\n\n\n6\n3\n\n\n8\n1\n\n\nStone_Brook\n0\n1\n\n\n1\n8\n\n\n2\n21\n\n\n3\n9\n\n\n4\n10\n\n\n5\n2\n\n\nTimberland\n2\n19\n\n\n3\n44\n\n\n4\n8\n\n\n5\n1\n\n\nVeenker\n0\n1\n\n\n1\n4\n\n\n2\n6\n\n\n3\n12\n\n\n4\n1"
  },
  {
    "objectID": "project2/columns2/index.html",
    "href": "project2/columns2/index.html",
    "title": "house price columns",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n#from sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')\n\n함수\n\nWxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n\n# scatter 하려면 범주를 수치화하기\n                              \ndef train_cat_rel_cxy(col1, col2):  # col1 : 범주, col2:범주\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col1 + \"의\" + col2 + \"범주별 SalePrice와의 관계 비교\"\n    plt.title(a)\n    plt.tight_layout()\n    cats = train_df[col2].value_counts().sort_values(ascending=False).index\n    \n    for i in range(len(cats)):\n        a = train_df[train_df[col2]==cats[i]][[col1,'SalePrice']]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x=col1, y='SalePrice', color=WxColourDB[n])  # 색 달라져야함\n        plt.show()\n\n각 지역별 확인\n\nWxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid','navy','hotpink','plum','lightsteelblue','blue','darkturquoise','cyan','green','yellow','darkkhaki','orange']\n\ncats = train_df['Neighborhood'].value_counts().sort_values(ascending=False).index\nfor i in range(len(cats)):\n        plt.clf()\n        plt.rcParams['font.family'] = 'Malgun Gothic'\n        plt.rcParams['axes.unicode_minus'] = False\n        a = \"Neighborhood '\" + cats[i] +\"' 지역의 MSSubClass과 SalePrice 관계\"\n        plt.title(a)\n        plt.ylim([0,800000])\n        plt.xlim([15,195])\n        plt.tight_layout()\n        a = train_df[train_df['Neighborhood']==cats[i]][['MSSubClass','SalePrice']]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x='MSSubClass', y='SalePrice', color=WxColourDB[n])  # 색 달라져야함\n        plt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n누적으로 확인\n\ntrain_cat_rel_cxy('MSSubClass', 'Neighborhood')  # col1 : 범주, col2:범주"
  },
  {
    "objectID": "posts/hw8/index.html",
    "href": "posts/hw8/index.html",
    "title": "hw8",
    "section": "",
    "text": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 60, 100)\ny = norm.pdf(x, loc=30, scale=5)\nplt.clf()\nplt.plot(x,y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# X ~ N(30,5^2) 일 때, p(X &gt; 45) 구해라.\nprint(\"45점 보다 높은 점수를 받았을 확률 :\",1- norm.cdf(45, loc=30, scale=5))\n\n45점 보다 높은 점수를 받았을 확률 : 0.0013498980316301035\n\n\n\n\n\n\n\n\n\nprint(\"상위 10%에 해당하는 점수 :\",norm.ppf(0.9, loc=30, scale=5))\n\n상위 10%에 해당하는 점수 : 36.407757827723\n\n\n\n\n\n\n\n\n\nx = np.linspace(0, 60, 100)\ny = norm.pdf(x, loc=30, scale=5)\ny2 = norm.pdf(x, loc=30, scale=5/np.sqrt(16))\n\n\nplt.clf()\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.plot(x,y, label='점수의 확률 밀도 함수')\nplt.plot(x, y2, label='16명의 평균 점수의 확률 밀도 함수')\nplt.legend()\nplt.show()\n\n\nprint()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# X_bar ~ N(30, (5/sqrt(16))^2) 일 때, p(X_bar &gt; 38) 구해라.\nprint(\"38점 보다 높은 점수를 받았을 확률 :\",1- norm.cdf(38, loc=30, scale=5/np.sqrt(16)))\n\n38점 보다 높은 점수를 받았을 확률 : 7.76885222819601e-11"
  },
  {
    "objectID": "posts/hw8/index.html#년에-실시-된-adp-실기-시험의-통계파트-표준점수는-평균이-30-표준편차가-5인-정규분포를",
    "href": "posts/hw8/index.html#년에-실시-된-adp-실기-시험의-통계파트-표준점수는-평균이-30-표준편차가-5인-정규분포를",
    "title": "hw7",
    "section": "",
    "text": "따른다고 한다.\n#### 1) ADP 실기 시험의 통계파트 표준점수의 밀도함수를 그려보세요.\n\nimport numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 60, 100)\ny = norm.pdf(x, loc=30, scale=5)\nplt.clf()\nplt.plot(x,y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n확률을 구하세요.\n\n# X ~ N(30,5^2) 일 때, p(X &gt; 45) 구해라.\nprint(\"45점 보다 높은 점수를 받았을 확률 :\",1- norm.cdf(45, loc=30, scale=5))\n\n45점 보다 높은 점수를 받았을 확률 : 0.0013498980316301035\n\n\n\n\n\n세요.\n\nprint(\"상위 10%에 해당하는 점수 :\",norm.ppf(0.9, loc=30, scale=5))\n\n상위 10%에 해당하는 점수 : 36.407757827723\n\n\n\n\n\n내었을 때, 이 평균값이 따르는 분포의 확률밀도 함수를 1번의 그래프와 겹쳐 그려보세요.\n\nx = np.linspace(0, 60, 100)\ny = norm.pdf(x, loc=30, scale=5)\ny2 = norm.pdf(x, loc=30, scale=5/np.sqrt(16))\n\n\nplt.clf()\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.plot(x,y, label='점수의 확률 밀도 함수')\nplt.plot(x, y2, label='16명의 평균 점수의 확률 밀도 함수')\nplt.legend()\nplt.show()\n\n\nprint()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n나올 확률을 구하세요.\n\n# X_bar ~ N(30, (5/sqrt(16))^2) 일 때, p(X_bar &gt; 38) 구해라.\nprint(\"38점 보다 높은 점수를 받았을 확률 :\",1- norm.cdf(38, loc=30, scale=5/np.sqrt(16)))\n\n38점 보다 높은 점수를 받았을 확률 : 7.76885222819601e-11"
  },
  {
    "objectID": "posts/hw8/index.html#covid19의-발병률은-1라고-한다.-다음은-이번-코로나-사태로-인하여-코로나-의심-환자들-1085명을-대상으로-슬통-회사의-다잡아-키트를-사용하여-양성-반응을-체크한-결과이다.",
    "href": "posts/hw8/index.html#covid19의-발병률은-1라고-한다.-다음은-이번-코로나-사태로-인하여-코로나-의심-환자들-1085명을-대상으로-슬통-회사의-다잡아-키트를-사용하여-양성-반응을-체크한-결과이다.",
    "title": "hw8",
    "section": "Covid‑19의 발병률은 1%라고 한다. 다음은 이번 코로나 사태로 인하여 코로나 의심 환자들 1,085명을 대상으로 슬통 회사의 “다잡아” 키트를 사용하여 양성 반응을 체크한 결과이다.",
    "text": "Covid‑19의 발병률은 1%라고 한다. 다음은 이번 코로나 사태로 인하여 코로나 의심 환자들 1,085명을 대상으로 슬통 회사의 “다잡아” 키트를 사용하여 양성 반응을 체크한 결과이다.\n\n1) 다잡아 키트가 코로나 바이러스에 걸린 사람을 양성으로 잡아낼 확률을 계산하세요.\n\n\np(키트 양성 | 실제 양성) = 370 / (370 + 15) =  0.961038961038961\n\n\n\n\n\n\n\n2) 슬통 회사에서 다잡아 키트를 사용해 양성으로 나온 사람이 실제로는 코로나 바이러스에 걸려 있을 확률을 97%라며, 키트의 우수성을 주장했다. 이 주장이 옳지 않은 이유를 서술하세요.\n실제로는 코로나 걸릴 확률이 0.01인데, 슬통 회사가 조사한 자료에 의하면 코로나 걸릴 확률이 0.35으로 실제와 차이가 커서 키트의 우수성을 주장하기가 어렵다.\n\n\np(조사된 코로나 걸릴 확률) = 실제 양성인 사람 수 / 전체 사람 수  = (370 + 15) / (370 + 10 + 15 + 690) =  0.3548387096774194\np(실제 코로나 걸릴 확률) =  0.01\n\n\n\n\n\n\n\n3) Covid‑19 발병률을 사용하여, 키트의 결과값이 양성으로 나온 사람이 실제로 코로나 바이러스에 걸려있을 확률을 구하세요.\n\n\np(실제 양성 | 키트 양성) \n= p(실제 양성 동시에 키트 양성) / p(키트 양성) \n= p(실제 양성)*p(키트 양성 | 실제 양성) / {p(실제 양성)*p(키트 양성 | 실제 양성) + p(실제 음성)*p(키트 양성 | 실제 음성)} \n= 0.01*370/(370+15) / {0.01*370/(370+15) + (1-0.01)*10/(10+690)} \n= 0.4045926735921268"
  },
  {
    "objectID": "posts/hw8/index.html#년에-실시-된-adp-실기-시험의-통계파트-표준점수는-평균이-30-표준편차가-5인-정규분포를-따른다고-한다.",
    "href": "posts/hw8/index.html#년에-실시-된-adp-실기-시험의-통계파트-표준점수는-평균이-30-표준편차가-5인-정규분포를-따른다고-한다.",
    "title": "hw8",
    "section": "",
    "text": "import numpy as np\nfrom scipy.stats import norm\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 60, 100)\ny = norm.pdf(x, loc=30, scale=5)\nplt.clf()\nplt.plot(x,y)\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# X ~ N(30,5^2) 일 때, p(X &gt; 45) 구해라.\nprint(\"45점 보다 높은 점수를 받았을 확률 :\",1- norm.cdf(45, loc=30, scale=5))\n\n45점 보다 높은 점수를 받았을 확률 : 0.0013498980316301035\n\n\n\n\n\n\n\n\n\nprint(\"상위 10%에 해당하는 점수 :\",norm.ppf(0.9, loc=30, scale=5))\n\n상위 10%에 해당하는 점수 : 36.407757827723\n\n\n\n\n\n\n\n\n\nx = np.linspace(0, 60, 100)\ny = norm.pdf(x, loc=30, scale=5)\ny2 = norm.pdf(x, loc=30, scale=5/np.sqrt(16))\n\n\nplt.clf()\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.plot(x,y, label='점수의 확률 밀도 함수')\nplt.plot(x, y2, label='16명의 평균 점수의 확률 밀도 함수')\nplt.legend()\nplt.show()\n\n\nprint()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# X_bar ~ N(30, (5/sqrt(16))^2) 일 때, p(X_bar &gt; 38) 구해라.\nprint(\"38점 보다 높은 점수를 받았을 확률 :\",1- norm.cdf(38, loc=30, scale=5/np.sqrt(16)))\n\n38점 보다 높은 점수를 받았을 확률 : 7.76885222819601e-11"
  },
  {
    "objectID": "posts/hw9/index.html",
    "href": "posts/hw9/index.html",
    "title": "hw9",
    "section": "",
    "text": "문제1 : 데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요.\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom scipy.stats import chi2, norm\n\ndf = pd.read_csv('../../../lsbigdata-project1/leukemia_remission/leukemia_remission.txt', delim_whitespace= True) \ntrain = df.drop(columns=('REMISS'))\n\nmodel = sm.formula.logit(\"REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP\", data=df).fit()\nprint(model.summary())\n\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:40:00   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_2844\\1794366257.py:7: FutureWarning:\n\nThe 'delim_whitespace' keyword in pd.read_csv is deprecated and will be removed in a future version. Use ``sep='\\s+'`` instead\n\n\n\n\n\n\n\n\n문제2 : 해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오\n\n# 검정통계량 : −2(ℓ(𝛽)̂ (0) − ℓ(𝛽)̂ )  =  -2*(-17.186+10.797)  = 12.779\n1 - chi2.cdf(12.779, df=6)  # 0.0467\n\n0.0466828104726148\n\n\n결론 : LLR p-value: 0.0467 &lt; 유의수준 0.05보다 작으니까 통계적으로 유의하다고 할 수 있다.\n\n\n\n\n\n문제3 : 유의수준이 0.2를 기준으로 통계적으로 유의한 변수는 몇개이며, 어느 변수 인가요?\n\nprint(model.summary())\n\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:40:00   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P&gt;|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n\n\nP&gt;|z|가 0.2보다 작은 LI, TEMP가 유의하다\n\n\n\n\n\n문제4 : 다음 환자에 대한 오즈는 얼마인가요?\n\nCELL (골수의 세포성): 65% , SMEAR (골수편의 백혈구 비율): 45% , INFIL (골수의 백혈병 세포 침투 비율): 55% , LI (골수 백혈병 세포의 라벨링 인덱스): 1.2 , BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL , TEMP (치료 시작 전 최고 체온): 0.9\n\nodds = np.exp( 64.2581 + 30.8301*0.65 + 24.6863 * 0.45  - 24.9745 * 0.55 + 4.3605 * 1.2 - 0.0115*1.1 - 100.1734 * 0.9)\nprint(odds) # 오즈 : 0.03817459641135519\n\n0.03817459641135519\n\n\n\n\n\n\n\n\n문제5 : 위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?\n\nodds / (1+odds)  # 0.03677088280074742\n\n0.03677088280074742\n\n\n\n\n\n\n\n문제 6 : TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.\nTEMP 변수의 계수 : -100.1734 e^(-100.1734) = 3.13e-44 는 0에 가까운 값입니다. 이는 체온이 1단위 상승할 때 백혈병 세포가 관측되지 않을 확률이 (오즈비만큼 변동)거의 없어지는 것을 의미 -&gt; 온도가 높아질수록 백혈병 세포가 관측될 확률 높아짐.\nTEMP 변수 1 단위 증가하면 로그오즈가 100.1734 감소하는데, 오즈비는 (e^-100.1734)배 감소한다. TEMP가 1단위 올라가면, 오즈비가 (e^-100.1734)배 감소. 관측 불가 확률이 감소한다. 즉 관측될 확률이 증가한다. 따라서 백혈병 치료를 해야한다.\n\n\n문제 7 : CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.\nCELL 변수의 베타에 대한 99% 신뢰구간 : (베타_hat - z(0.005)SE , 베타_hat + z(0.005)SE) CELL 변수의 오즈비에 대한 99% 신뢰구간 : (exp(베타_hat - z(0.005)SE) , exp(베타_hat + z(0.005)SE))\n\nz0005 = norm.ppf(0.995, loc=0, scale=1)  # 2.5758293035489004\n# CELL 변수의 베타에 대한 99% 신뢰구간 : (-103.4607607405219, 165.12096074052192\n30.8301 - 52.135*z0005 , 30.8301 + 52.135*z0005 \n# CELL 변수의 오즈비에 대한 99% 신뢰구간 : (1.1683218982002717e-45, 5.141881884993857e+71)\nnp.exp(30.8301 - 52.135*z0005) , np.exp(30.8301 + 52.135*z0005)  \n\n(1.1683218982002717e-45, 5.141881884993857e+71)\n\n\nCELL 변수의 베타에 대한 99% 신뢰구간 : (-103.4607607405219, 165.12096074052192 CELL 변수의 오즈비에 대한 99% 신뢰구간 : (1.1683218982002717e-45, 5.141881884993857e+71)\n\n\n\n\n\n문제 8 : 주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, 50% 이상인 경우 1로 처리하여, 혼동 행렬를 구하시오.\n\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ny_pred = model.predict(train)\nresult = pd.DataFrame({'y_pred' : y_pred})\nresult['result'] = np.where(result['y_pred']&gt;=0.5, 1,0)\n\nconf_mat = confusion_matrix(y_true = df['REMISS'], y_pred = result['result'], labels=[1,0])\np = ConfusionMatrixDisplay(confusion_matrix = conf_mat, display_labels = ('관측불가_1', '관측가능_0'))\nplt.rcParams['font.family'] = 'Malgun Gothic'\np.plot(cmap=\"Blues\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n문제 9 : 해당 모델의 Accuracy는 얼마인가요?\n\n# 방법1 \nprint((5+15)/(5+3+4+15))  # 0.7407407407407407\n\n# 방법2\nfrom sklearn.metrics import accuracy_score, f1_score\nprint(accuracy_score(df['REMISS'], result['result'])) # 0.7407407407407407\n\n0.7407407407407407\n0.7407407407407407\n\n\n\n\n\n\n\n문제10 : 해당 모델의 F1 Score를 구하세요.\n\n# 방법1\nprecision = 5/(5+3)\nrecall = 5/(5+4)\nprint(2 / (1/precision + 1/recall))  # 0.5882352941176471\n\n# 방법2\nprint(f1_score(df['REMISS'], result['result']))  # 0.5882352941176471\n\n0.5882352941176471\n0.5882352941176471"
  }
]