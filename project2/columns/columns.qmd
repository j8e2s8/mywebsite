---
title: "house price columns"
author: "정은서"
format: html
editor: visual
jupyter: python3
---

## 데이터 불러오기

```{python}
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns

# 데이터 불러오기
train_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')
test_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')
submission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')
```

# 

## 0. 모든 변수 결측치 확인

```{python}
pd.set_option('display.max_rows',None)
nan_df = train_df.isna().sum()
nan_df[nan_df>0]
pd.reset_option('display.max_rows')
```

```{python}
train_df.info()
```

'Id' : 수치컬럼에서 제외해야 함. 'MSSubClass' : 수치컬럼으로 되어있는데, 범주컬럼임. 'LotFrontage' : 259개 결측치는 집에 연결된 거리가 없어서 결측치인걸까? 그렇다면 0값으로 처리해주기. 'Alley' : 1369개 결측치는 골목길이 없다는 것임.

# 

## 1. 'SalePrice' : 판매 가격

```{python}
plt.clf()
sns.histplot(train_df['SalePrice'] , stat='density')
plt.tight_layout()
plt.show()

print("최소값 :", train_df['SalePrice'].min())
print("최대값 :", train_df['SalePrice'].max())
```

이상치 있어보임. 100,000\~200,000 달러가 제일 많아보임.

# 

## 2. 'MSSubClass' : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) \<- 수치컬럼으로 되어 있지만 범주 컬럼임.

```{python}
train_df['MSSubClass'].value_counts().sort_index()
train_df['MSSubClass'] = train_df['MSSubClass'].astype('object')

plt.clf()
sns.countplot(data=train_df, x='MSSubClass')
plt.show()
```

```         
    20  1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)
    30  1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)
    40  다락방이 있는 1층짜리 집 <- 데이터 4개밖에 없음 (1926,1930,1949,1979)
    45  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집
    50  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집
    60  1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)
    70  1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)
    75  3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집
    80  각 층이 엇갈려있는 집
    85  현관 앞에 계단으로 층이 엇갈려있는 집
    90  다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)
   120  1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음)
   150  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)
   160  1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)
   180  연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집
   190  한 집을 두 집으로 개조해서 쪼갠 집
```

```{python}
cols = train_df.columns
train_df[train_df['MSSubClass'] == 20]['YearBuilt'].sort_values()  # 'MSSubClass'=20은 1938, 1946~2010에 지어진 집임
```

```{python}
train_df[train_df['MSSubClass'] == 30]['YearBuilt'].sort_values()  # 'MSSubClass'=30은 1885, 1910~1945, 1948에 지어진 집임
```

```{python}
train_df[train_df['MSSubClass'] == 60]['YearBuilt'].sort_values()  # 'MSSubClass'=60은 1946~2009에 지어진 집임
```

```{python}
train_df[train_df['MSSubClass'] == 70]['YearBuilt'].sort_values()  # 'MSSubClass'=70은 1872~1945에 지어진 집임
```

```{python}
train_df[train_df['MSSubClass'] == 40]['YearBuilt'].sort_values()   # 4개밖에 없음
```

```{python}
train_df[train_df['MSSubClass'] == 120]['YearBuilt'].sort_values()   # 1976~2009에 지어진 집임.
```

# 

## 3. 'MSZoning' : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)

```{python}
train_df['MSZoning'].value_counts()

plt.clf()
sns.countplot(data=train_df, x='MSZoning')
plt.show()
```

```         
   A    농업
   C    상업
   FV   수상 거주지
   I    산업
   RH   높은 밀도 거주지
   RL   낮은 밀도 거주지
   RP   Residential Low Density Park 
   RM  중간 밀도 거주지
```

=\> 데이터상 RL, RM, RH, FV, C(all) 만 있음.

# 

## 4. 'LotFrontage' : 집과 연결된 거리의 직선 길이 (feet)

```{python}
plt.clf()
sns.histplot(train_df['LotFrontage'], stat='density')
plt.show()
```

결측치 259개 있음. \<- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기. 이상치 있어보임.

# 

## 'LotArea' : 부지 크기 (square feet)

```{python}
plt.clf()
sns.histplot(train_df['LotArea'], stat='density')
plt.show()
```

이상치 있어보임.

# 

## 'Street' : 집에 접근 도로 유형 (자갈길인지, 포장길인지)

```{python}
train_df['Street'].value_counts()

plt.clf()
sns.countplot(data=train_df, x='Street')
plt.show()
```

```         
   Grvl 자갈길 
   Pave 포장길
```

자갈길이 6개밖에 안됨.

# 

## 'Alley' : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)

```{python}
train_df['Alley'].value_counts()

plt.clf()
sns.countplot(data=train_df, x='Alley')
plt.show()
```

```         
   Grvl 자갈 골목길
   Pave 포장된 골목길
   NA   골목길 없음
```

1369 결측치 있음. \<- 이게 다 골목길 없다는 것임.

# 

## 'LotShape' : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)

```{python}
train_df['LotShape'].value_counts()

plt.clf()
sns.countplot(data=train_df, x='LotShape')
plt.show()
```

```         
   Reg  보통
   IR1  약간 보통이 아님
   IR2  중간 정도 보통이 아님
   IR3  보통이 아님
```

일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도...?

# 

## 'LandContour' : 집의 평탄 정도

```{python}
train_df['LandContour'].value_counts()

plt.clf()
sns.countplot(data=train_df, x='LandContour')
plt.show()
```

```         
   Lvl  평평한 것에 가까움  
   Bnk  기움 - Quick and significant rise from street grade to building
   HLS  비탈 - Significant slope from side to side
   Low 움푹한 곳
```

평평한 것에 가까운게 많음.
