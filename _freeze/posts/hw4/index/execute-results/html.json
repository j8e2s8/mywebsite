{
  "hash": "668c8873777824df1aa5dc2512f0cbc3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: hw4\nauthor: 정은서\ndate: '2024-07-29 '\ncategories:\n  - bigdata\neditor: visual\n---\n\n# 표본 분산 계산 시 왜 n-1로 나누는지 알아보도록 하겠습니다.\n\n## 균일분포 (3, 7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요. (n으로 구하는 방법, n-1로 구하는 방법)\n\n### 참고 : 분산을 구하는 함수 3가지\n\n::: {#e30a8a75 .cell execution_count=1}\n``` {.python .cell-code}\nfrom scipy.stats import uniform\nimport numpy as np\nx = uniform.rvs(loc=3, scale=4, size=20)\nx_bar = np.mean(x)\ns_2_1 = sum((x-x_bar)**2)/(len(x)-1)  # n-1로 표본 분산 구하는 방법1\ns_2_2 = x.var(ddof=1)  # n-1로 표본 분산 구하는 방법2\ns_2_3 = np.var(x, ddof=1)  # n-1로 표본 분산 구하는 방법3\n\nprint(\"s_2_1 : \",s_2_1)\nprint(\"s_2_2 : \",s_2_2)\nprint(\"s_2_3 : \",s_2_3)\n\nk_2_1 = sum((x-x_bar)**2)/len(x)  # n로 표본 분산 구하는 방법1\nk_2_2 = x.var()  # n로 표본 분산 구하는 방법2\nk_2_3 = np.var(x)  # n로 표본 분산 구하는 방법3\n\nprint(\"k_2_1 : \",k_2_1)\nprint(\"k_2_2 : \",k_2_2)\nprint(\"k_2_3 : \",k_2_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ns_2_1 :  1.641466623473874\ns_2_2 :  1.641466623473874\ns_2_3 :  1.641466623473874\nk_2_1 :  1.5593932923001803\nk_2_2 :  1.55939329230018\nk_2_3 :  1.55939329230018\n```\n:::\n:::\n\n\n### 1. n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n### 2. 각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n#### n-1로 표본 분산 구하는 방법1 \n\n::: {#be6a4a36 .cell execution_count=2}\n``` {.python .cell-code}\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20))**2).sum(axis=1)/(20 -1)\npopulation_variance = ((x-x.mean() )**2 ).sum() /(10000*20)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=589 height=411}\n:::\n:::\n\n\n#### n-1로 표본 분산 구하는 방법2\n\n::: {#90d583a3 .cell execution_count=3}\n``` {.python .cell-code}\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = x.var(axis=1, ddof=1)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=x.var(), color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=589 height=411}\n:::\n:::\n\n\n#### n-1로 표본 분산 구하는 방법3\n\n::: {#d64769ba .cell execution_count=4}\n``` {.python .cell-code}\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=1)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=np.var(x ,ddof=1), color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=589 height=411}\n:::\n:::\n\n\n#\n\n#\n\n#### n으로 표본 분산 구하는 방법1 \n\n::: {#6dd02b01 .cell execution_count=5}\n``` {.python .cell-code}\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\nk_2 = ((x- np.repeat(x.mean(axis=1) ,20).reshape(-1,20))**2).sum(axis=1)/20\npopulation_variance = ((x-x.mean() )**2 ).sum() /(10000*20)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(k_2, stat='density')\nplt.axvline(x=population_variance, color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=589 height=411}\n:::\n:::\n\n\n#### n으로 표본 분산 구하는 방법2\n\n::: {#63eb9303 .cell execution_count=6}\n``` {.python .cell-code}\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\nk_2 = x.var(axis=1, ddof=0)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(k_2, stat='density')\nplt.axvline(x=x.var(), color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=589 height=411}\n:::\n:::\n\n\n#### n으로 표본 분산 구하는 방법3\n\n::: {#daa7b1e7 .cell execution_count=7}\n``` {.python .cell-code}\nnp.random.seed(20240729)\nx = uniform.rvs(loc=3, scale=4, size=10000*20).reshape(-1,20)\ns_2 = np.var(x, axis=1 ,ddof=0)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.clf()\nsns.histplot(s_2, stat='density')\nplt.axvline(x=np.var(x ,ddof=0), color='red')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=589 height=411}\n:::\n:::\n\n\n# \n\n#\n\n### 3. 결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n분포를 보면, n-1로 나눈 분포에서 모분산을 나타낸 선이 더 가운데(무게 중심)에 있다는 것을 알 수 있다.\n그래서 n-1로 나눈 것이 분산을 추정하는 지표로 사용되는게 타당하다.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}