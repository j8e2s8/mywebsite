{
  "hash": "ec2064a80ead0aa12435875a9070b204",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: house price columns\nauthor: 정은서\nformat: html\neditor: visual\n---\n\n## 데이터 불러오기\n\n::: {#3b22c645 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')\n```\n:::\n\n\n# \n\n## 0. 모든 변수 결측치와 정보 확인\n\n::: {#7ab7854d .cell execution_count=2}\n``` {.python .cell-code}\npd.set_option('display.max_rows',None)\nnan_df = train_df.isna().sum()\nnan_df[nan_df>0]\npd.reset_option('display.max_rows')\n```\n:::\n\n\n::: {#8233247d .cell execution_count=3}\n``` {.python .cell-code}\ntrain_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n```\n:::\n:::\n\n\n'Id' : 수치컬럼에서 제외해야 함.\\\n'MSSubClass' : 수치컬럼으로 되어있는데, 범주컬럼임.\\\n'LotFrontage' : 259개 결측치는 집에 연결된 거리가 없어서 결측치인걸까? 그렇다면 0값으로 처리해주기.\\\n'Alley' : 1369개 결측치는 골목길이 없다는 것임.\n\n# \n\n#### 수치컬럼의 분포 확인 함수\n\n::: {#04c0888d .cell execution_count=4}\n``` {.python .cell-code}\ndef train_numeric_hist(col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col + \"의 분포\"\n    plt.title(a)\n    plt.tight_layout()\n    sns.histplot(train_df[col], stat='density')\n    plt.show()\n```\n:::\n\n\n#### 수치컬럼과 y컬럼의 관계 확인 함수\n\n::: {#ee2d9f22 .cell execution_count=5}\n``` {.python .cell-code}\ndef train_rel_xy(col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col + \"과 SalePrice의 관계\"\n    plt.title(a)\n    plt.tight_layout()\n    sns.scatterplot(data=train_df, x=col, y='SalePrice')\n    plt.show()\n```\n:::\n\n\n#### 범주컬럼의 빈도 확인 함수\n\n::: {#e5a1fc77 .cell execution_count=6}\n``` {.python .cell-code}\ndef train_cat_count(col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col + \"의 범주별 빈도 확인\"\n    plt.title(a)\n    plt.tight_layout()\n    sns.countplot(train_df[col])\n    plt.show()\n```\n:::\n\n\n#### 범주컬럼의 범주별 분포 비교 함수\n\n::: {#2505eef3 .cell execution_count=7}\n``` {.python .cell-code}\ndef train_cat_hist(col):\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col + \"의 범주별 분포 비교\"\n    plt.title(a)\n    plt.tight_layout()\n    cats = train_df[col].value_counts().sort_values().index\n    for i in range(len(cats)):\n        sns.histplot(train_df[train_df[col]==cats[i]]['SalePrice'], stat='density')\n    plt.show()\n```\n:::\n\n\n#### 범주컬럼의 범주별로 x컬럼과 y컬럼의 관계 확인 함수\n\n::: {#c5eced16 .cell execution_count=8}\n``` {.python .cell-code}\nWxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid']\n                              \ndef train_cat_rel_xy(col1, col2):  # col1 : 수치, col2:범주\n    plt.clf()\n    plt.rcParams['font.family'] = 'Malgun Gothic'\n    plt.rcParams['axes.unicode_minus'] = False\n    a = col1 + \"의\" + col2 + \"범주별 SalePrice와의 관계 비교\"\n    plt.title(a)\n    plt.tight_layout()\n    cats = train_df[col2].value_counts().sort_values(ascending=False).index\n    \n    for i in range(len(cats)):\n        a = train_df[train_df[col2]==cats[i]][[col1,'SalePrice']]\n        n = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\n        n = n.tolist()[i]\n        sns.scatterplot(data=a, x=col1, y='SalePrice', color=WxColourDB[n])  # 색 달라져야함\n        plt.show()\n```\n:::\n\n\n::: {#a96dcd33 .cell execution_count=9}\n``` {.python .cell-code}\nn = np.random.choice(np.arange(len(WxColourDB)),len(WxColourDB),replace=False)\nn.tolist()\nn.tolist()[2]\n\nWxColourDB = ['black', 'red', 'chocolate','darkorange','darkgoldenrod','olive','plum','lightslategrey','forestgreen','gold','lightseagreen','fuchsia','deepskyblue','slateblue','mediumorchid']\n\nplt.clf()\nsns.scatterplot(data=train_df, x='LotArea', y='SalePrice', color=WxColourDB[12])  # 색 달라져야함\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-10-output-1.png){width=618 height=429}\n:::\n:::\n\n\n# \n\n## 1. 'SalePrice' : 판매 가격\n\n::: {#e3ec259c .cell execution_count=10}\n``` {.python .cell-code}\ntrain_numeric_hist('SalePrice')\n\nprint(\"최소값 :\", train_df['SalePrice'].min())\nprint(\"최대값 :\", train_df['SalePrice'].max())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-11-output-1.png){width=661 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n최소값 : 34900\n최대값 : 755000\n```\n:::\n:::\n\n\n이상치 있어보임. 100,000\\~200,000 달러가 제일 많아보임.\n\n# \n\n## 2. 'MSSubClass' : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) \\<- 수치컬럼으로 되어 있지만 범주 컬럼임.\n\n::: {#4df06e06 .cell execution_count=11}\n``` {.python .cell-code}\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype(str)  # 범주 컬럼 처리\ntrain_cat_count('MSSubClass')\n\ntrain_cat_hist('MSSubClass')\n\nprint(train_df['MSSubClass'].value_counts().sort_index())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-12-output-1.png){width=676 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-12-output-2.png){width=671 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nMSSubClass\n120     87\n160     63\n180     10\n190     30\n20     536\n30      69\n40       4\n45      12\n50     144\n60     299\n70      60\n75      16\n80      58\n85      20\n90      52\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n    20  1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)\n    30  1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)\n    40  다락방이 있는 1층짜리 집 <- 데이터 4개밖에 없음 (1926,1930,1949,1979)\n    45  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집\n    50  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집\n    60  1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)\n    70  1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)\n    75  3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집\n    80  각 층이 엇갈려있는 집\n    85  현관 앞에 계단으로 층이 엇갈려있는 집\n    90  다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)\n   120  1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음)\n   150  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)\n   160  1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)\n   180  연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집\n   190  한 집을 두 집으로 개조해서 쪼갠 집\n```\n\n::: {#154d91fe .cell execution_count=12}\n``` {.python .cell-code}\ncols = train_df.columns\ntrain_df[train_df['MSSubClass'] == 20]['YearBuilt'].sort_values()  # 'MSSubClass'=20은 1938, 1946~2010에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\nSeries([], Name: YearBuilt, dtype: int64)\n```\n:::\n:::\n\n\n::: {#87c5c668 .cell execution_count=13}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 30]['YearBuilt'].sort_values()  # 'MSSubClass'=30은 1885, 1910~1945, 1948에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nSeries([], Name: YearBuilt, dtype: int64)\n```\n:::\n:::\n\n\n::: {#76798fed .cell execution_count=14}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 60]['YearBuilt'].sort_values()  # 'MSSubClass'=60은 1946~2009에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nSeries([], Name: YearBuilt, dtype: int64)\n```\n:::\n:::\n\n\n::: {#6d6f12a5 .cell execution_count=15}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 70]['YearBuilt'].sort_values()  # 'MSSubClass'=70은 1872~1945에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nSeries([], Name: YearBuilt, dtype: int64)\n```\n:::\n:::\n\n\n::: {#e3de6ceb .cell execution_count=16}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 120]['YearBuilt'].sort_values()   # 1976~2009에 지어진 집임.\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nSeries([], Name: YearBuilt, dtype: int64)\n```\n:::\n:::\n\n\n# \n\n## 3. 'MSZoning' : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)\n\n::: {#bf42e6df .cell execution_count=17}\n``` {.python .cell-code}\ntrain_cat_count('MSZoning')\ntrain_cat_hist('MSZoning')\n\nprint(train_df['MSZoning'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-18-output-1.png){width=699 height=489}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-18-output-2.png){width=671 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nMSZoning\nRL         1151\nRM          218\nFV           65\nRH           16\nC (all)      10\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   A    농업\n   C    상업\n   FV   수상 거주지\n   I    산업\n   RH   높은 밀도 거주지\n   RL   낮은 밀도 거주지\n   RP   Residential Low Density Park \n   RM  중간 밀도 거주지\n```\n\n=\\> 데이터상 RL, RM, RH, FV, C(all) 만 있음.\\\n빈도를 확인해보면, 제일 많은게 RL(낮은 밀도 거주지)임.\\\n범주별 분포를 보면, 범주마다 집값이 살짝 다른 것 같음. 보라색 분포에 이상치도 존재하는 것 같다.\n\n# \n\n## 4. 'LotFrontage' : 집과 연결된 거리의 직선 길이 (feet)\n\n::: {#282c72f3 .cell execution_count=18}\n``` {.python .cell-code}\ntrain_numeric_hist('LotFrontage')\n\ntrain_rel_xy('LotFrontage')\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-19-output-1.png){width=686 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-19-output-2.png){width=698 height=488}\n:::\n:::\n\n\n결측치 259개 있음. \\<- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기.\\\nLotFrontage의 분포를 보면 이상치 있어보임. LotFrontage과 SalePrice의 관계를 보면 많이 퍼져있기는한데 이상치를 제외하면 양의 관계가 있는 것 같기도 함.\n\n::: {#dfccc8d4 .cell execution_count=19}\n``` {.python .cell-code}\ntrain_cat_rel_xy('LotFrontage', 'MSZoning') # 범주별로 y값과의 관계를 알아봄.\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-20-output-1.png){width=698 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-20-output-2.png){width=612 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-20-output-3.png){width=612 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-20-output-4.png){width=612 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-20-output-5.png){width=612 height=429}\n:::\n:::\n\n\n::: {#43e7e12f .cell execution_count=20}\n``` {.python .cell-code}\nplt.clf()\nsns.scatterplot(data=train_df, x = 'LotFrontage', y='SalePrice', hue='MSZoning')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-21-output-1.png){width=612 height=429}\n:::\n:::\n\n\n::: {#fbc8b773 .cell execution_count=21}\n``` {.python .cell-code}\nplt.clf()\nsns.scatterplot(data=train_df, x = 'LotFrontage', y='LotArea', size='SalePrice')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-22-output-1.png){width=612 height=429}\n:::\n:::\n\n\n::: {#24e5851c .cell execution_count=22}\n``` {.python .cell-code}\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype(str)\nplt.clf()\nsns.scatterplot(data=train_df, x = 'MSSubClass', y='Neighborhood', size='SalePrice')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-23-output-1.png){width=628 height=429}\n:::\n:::\n\n\n# \n\n## 5. 'LotArea' : 부지 크기 (square feet)\n\n::: {#4adc25d8 .cell execution_count=23}\n``` {.python .cell-code}\ntrain_numeric_hist('LotArea')\n\ntrain_rel_xy('LotArea')\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-24-output-1.png){width=701 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-24-output-2.png){width=698 height=488}\n:::\n:::\n\n\nLotArea의 분포를 보면 이상치 있어보임. LotArea과 SalePrice의 관계를 보면 일부의 집 때문에 굉장히 퍼지는 관계임.\n\n::: {#3bb2dc9a .cell execution_count=24}\n``` {.python .cell-code}\ntrain_cat_rel_xy('LotArea', 'MSZoning') # 범주별로 y값과의 관계를 알아봄.\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-25-output-1.png){width=698 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-25-output-2.png){width=612 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-25-output-3.png){width=612 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-25-output-4.png){width=612 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-25-output-5.png){width=612 height=429}\n:::\n:::\n\n\n# \n\n## 6. 'Street' : 집에 접근 도로 유형 (자갈길인지, 포장길인지)\n\n::: {#8e48582d .cell execution_count=25}\n``` {.python .cell-code}\ntrain_cat_count('Street')\ntrain_cat_hist('Street')\n\nprint(train_df['Street'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-26-output-1.png){width=681 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-26-output-2.png){width=661 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nStreet\nPave    1454\nGrvl       6\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Grvl 자갈길 \n   Pave 포장길\n```\n\n자갈길이 6개밖에 안됨. 범주별 분포를 보면, 포장길에 이상치가 있어보임.\n\n# \n\n## 7. 'Alley' : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)\n\n::: {#1abcdbcd .cell execution_count=26}\n``` {.python .cell-code}\ntrain_cat_count('Alley')\ntrain_cat_hist('Alley')\n\nprint(train_df['Alley'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-27-output-1.png){width=681 height=489}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-27-output-2.png){width=671 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nAlley\nGrvl    50\nPave    41\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Grvl 자갈 골목길\n   Pave 포장된 골목길\n   NA   골목길 없음\n```\n\n1369 결측치 있음. \\<- 이게 다 골목길 없다는 것임. 범주별 분포가 많이 다름. \\<- 범주별로 집 가격 차이가 있을 것임.\n\n# \n\n## 8. 'LotShape' : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)\n\n::: {#f20c7b98 .cell execution_count=27}\n``` {.python .cell-code}\ntrain_cat_count('LotShape')\ntrain_cat_hist('LotShape')\n\nprint(train_df['LotShape'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-28-output-1.png){width=677 height=489}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-28-output-2.png){width=671 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLotShape\nReg    925\nIR1    484\nIR2     41\nIR3     10\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Reg  보통\n   IR1  약간 보통이 아님\n   IR2  중간 정도 보통이 아님\n   IR3  보통이 아님\n```\n\n일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도...?\\\n범주별 분포가 크게 다른 것 같진 않음. 근데 파란색분포는 살짝 다른 것 같음.\\\n주황색 분포에 이상치가 있어보임.\n\n# \n\n## 9. 'LandContour' : 집의 평탄 정도\n\n::: {#17fa6b92 .cell execution_count=28}\n``` {.python .cell-code}\ntrain_cat_count('LandContour')\ntrain_cat_hist('LandContour')\n\n\nprint(train_df['LandContour'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-29-output-1.png){width=678 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-29-output-2.png){width=661 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLandContour\nLvl    1311\nBnk      63\nHLS      50\nLow      36\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Lvl  평평한 것에 가까움  \n   Bnk  기움 - Quick and significant rise from street grade to building\n   HLS  비탈 - Significant slope from side to side\n   Low 움푹한 곳\n```\n\n평평한 것에 가까운게 많음. 범주별 분포 차이가 없어 보임. 파란색 분포에 이상치가 있어보임.\n\n# \n\n## 10. 'Utilities' : 전기, 가스, 수도, 하수도 사용 가능 여부\n\n::: {#87f04f99 .cell execution_count=29}\n``` {.python .cell-code}\ntrain_cat_count('Utilities')\n\nplt.clf()\nsns.histplot(train_df[train_df['Utilities']=='AllPub']['SalePrice'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSewr']['SalePrice'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='NoSeWa']['SalePrice'], stat='density')\n#sns.histplot(train_df[train_df['Utilities']=='ELO']['SalePrice'], stat='density')\nplt.title('Utilities 범주별, SalePrice 분포')\nplt.tight_layout()\nplt.show()\n\nprint(train_df['Utilities'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-30-output-1.png){width=705 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-30-output-2.png){width=662 height=469}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nUtilities\nAllPub    1459\nNoSeWa       1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   AllPub   전기, 가스, 물, 하수도  \n   NoSewr   전기, 가스, 물 (정화조)\n   NoSeWa   전기, 가스\n   ELO      전기\n```\n\n전기, 가스만 사용가능한 집이 1개만 있고, 그 외에는 모두 사용 가능한 집임. 이상치 존재해 보임.\n\n# \n\n## 11. 'LotConfig' : 부지 배열 (부지 위치가 안쪽인지, 코너인지, 도로가 몇 개인지 등)\n\n::: {#71dff219 .cell execution_count=30}\n``` {.python .cell-code}\ntrain_cat_count('LotConfig')\n\ntrain_cat_hist('LotConfig')\n\nprint(train_df['LotConfig'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-31-output-1.png){width=703 height=489}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-31-output-2.png){width=671 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLotConfig\nInside     1052\nCorner      263\nCulDSac      94\nFR2          47\nFR3           4\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Inside   안쪽 부지\n   Corner   코너 부지\n   CulDSac  출입하는 길이 하나인 곳\n   FR2      도로.강을 향한 면이 2곳\n   FR3      도로.강을 향한 면이 3곳\n```\n\n범주별로 분포 차이가 없어보임. 초록색, 주황색 분포에 이상치가 있어보임.\n\n# \n\n## 12. 'LandSlope' : 집 토지 경사 (경사가 약간인지, 심각한지 등)\n\n::: {#b7219525 .cell execution_count=31}\n``` {.python .cell-code}\ntrain_cat_count('LandSlope')\ntrain_cat_hist('LandSlope')\n\nprint(train_df['LandSlope'].value_counts())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-32-output-1.png){width=682 height=489}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-32-output-2.png){width=661 height=488}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nLandSlope\nGtl    1382\nMod      65\nSev      13\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Gtl  약간 경사\n   Mod  보통 경사\n   Sev  심한 경사\n```\n\n경사가 심하면 건축비용이 많이 든다길래 집값에 차이가 있을 줄 알았는데, 범주별로 분포의 차이가 없어보임. 파란색 분포에 이상치가 있어보임.\n\n# \n\n## 13. 'Neighborhood' : Physical locations within Ames city limits (집 위치)\n\n::: {#816a44a6 .cell execution_count=32}\n``` {.python .cell-code}\ntrain_cat_count('Neighborhood')\ntrain_cat_hist('Neighborhood')\nplt.clf()\nsns.countplot(data=train_df, x='Neighborhood')\nplt.xticks(rotation = 50)\nplt.show()\n\n\nb = train_df['Neighborhood'].unique()\n\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[1]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[2]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[3]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[4]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[5]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[6]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[7]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[8]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[9]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[11]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[12]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[13]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[14]]['SalePrice'], stat='density')\nplt.title('Neighborhood 범주별, SalePrice 분포')\nplt.show()\n\nprint(train_df['Neighborhood'].value_counts().sort_index())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-33-output-1.png){width=714 height=489}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-33-output-2.png){width=661 height=488}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-33-output-3.png){width=598 height=471}\n:::\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-33-output-4.png){width=585 height=451}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighborhood\nBlmngtn     17\nBlueste      2\nBrDale      16\nBrkSide     58\nClearCr     28\nCollgCr    150\nCrawfor     51\nEdwards    100\nGilbert     79\nIDOTRR      37\nMeadowV     17\nMitchel     49\nNAmes      225\nNPkVill      9\nNWAmes      73\nNoRidge     41\nNridgHt     77\nOldTown    113\nSWISU       25\nSawyer      74\nSawyerW     59\nSomerst     86\nStoneBr     25\nTimber      38\nVeenker     11\nName: count, dtype: int64\n```\n:::\n:::\n\n\n```         \n   Blmngtn  Bloomington Heights\n   Blueste  Bluestem\n   BrDale   Briardale\n   BrkSide  Brookside\n   ClearCr  Clear Creek\n   CollgCr  College Creek\n   Crawfor  Crawford\n   Edwards  Edwards\n   Gilbert  Gilbert\n   IDOTRR   Iowa DOT and Rail Road\n   MeadowV  Meadow Village\n   Mitchel  Mitchell\n   Names    North Ames\n   NoRidge  Northridge\n   NPkVill  Northpark Villa\n   NridgHt  Northridge Heights\n   NWAmes   Northwest Ames\n   OldTown  Old Town\n   SWISU    South & West of Iowa State University\n   Sawyer   Sawyer\n   SawyerW  Sawyer West\n   Somerst  Somerset\n   StoneBr  Stone Brook\n   Timber   Timberland\n   Veenker  Veenker\n```\n\n분포 차이가 있는 지역이 있는 것 같음. \\<- 특정 지역은 집값의 차이가 있다고 볼 수 있음. 집값이 비슷한 지역끼리 묶어서 분석해볼 수도 있을 것 같음.\\\n빨간색, 파란색 분포에서 이상치가 있어보임.\\\n보라색, 하늘색, 주황색, 회색, 분홍색 지역은 특정 집값에 몰려있는 것 같음.\\\n집 데이터가 가장 많은 지역은 NridgHt임. 그 다음이 CollgCr임.\n\n::: {#804dceec .cell execution_count=33}\n``` {.python .cell-code}\nplt.clf()\nsns.histplot(train_df[train_df['Neighborhood']==b[0]]['SalePrice'], stat='density')\nsns.histplot(train_df[train_df['Neighborhood']==b[10]]['SalePrice'], stat='density')\nplt.title('Neighborhood 범주별, SalePrice 분포')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-34-output-1.png){width=585 height=451}\n:::\n:::\n\n\n집 데이터가 가장 많은 두 지역을 보면 집값 차이가 큼\n\n",
    "supporting": [
      "columns_files"
    ],
    "filters": [],
    "includes": {}
  }
}