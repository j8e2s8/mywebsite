{
  "hash": "7a7aa0999ddba166813298ddc481ea7d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: house price columns\nauthor: 정은서\nformat: html\neditor: visual\n---\n\n## 데이터 불러오기\n\n::: {#38f596bd .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 데이터 불러오기\ntrain_df = pd.read_csv('../../../lsbigdata-project1/house price/train.csv')\ntest_df = pd.read_csv('../../../lsbigdata-project1/house price/test.csv')\nsubmission = pd.read_csv('../../../lsbigdata-project1/house price/sample_submission.csv')\n```\n:::\n\n\n# \n\n## 0. 모든 변수 결측치 확인\n\n::: {#2f529bbd .cell execution_count=2}\n``` {.python .cell-code}\npd.set_option('display.max_rows',None)\nnan_df = train_df.isna().sum()\nnan_df[nan_df>0]\npd.reset_option('display.max_rows')\n```\n:::\n\n\n::: {#6e75de4c .cell execution_count=3}\n``` {.python .cell-code}\ntrain_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n```\n:::\n:::\n\n\n'Id' : 수치컬럼에서 제외해야 함. 'MSSubClass' : 수치컬럼으로 되어있는데, 범주컬럼임. 'LotFrontage' : 259개 결측치는 집에 연결된 거리가 없어서 결측치인걸까? 그렇다면 0값으로 처리해주기. 'Alley' : 1369개 결측치는 골목길이 없다는 것임.\n\n# \n\n## 1. 'SalePrice' : 판매 가격\n\n::: {#7799a1d4 .cell execution_count=4}\n``` {.python .cell-code}\nplt.clf()\nsns.histplot(train_df['SalePrice'] , stat='density')\nplt.tight_layout()\nplt.show()\n\nprint(\"최소값 :\", train_df['SalePrice'].min())\nprint(\"최대값 :\", train_df['SalePrice'].max())\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-5-output-1.png){width=662 height=470}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n최소값 : 34900\n최대값 : 755000\n```\n:::\n:::\n\n\n이상치 있어보임. 100,000\\~200,000 달러가 제일 많아보임.\n\n# \n\n## 2. 'MSSubClass' : 판매 관련 주택 타입 (1층인지, 2층인지, 언제적 집구조인지, 다세대인지 등등) \\<- 수치컬럼으로 되어 있지만 범주 컬럼임.\n\n::: {#0e956ac2 .cell execution_count=5}\n``` {.python .cell-code}\ntrain_df['MSSubClass'].value_counts().sort_index()\ntrain_df['MSSubClass'] = train_df['MSSubClass'].astype('object')\n\nplt.clf()\nsns.countplot(data=train_df, x='MSSubClass')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-6-output-1.png){width=593 height=429}\n:::\n:::\n\n\n```         \n    20  1946년부터 그 이후로 지어진 1층 짜리 최신 집 (1938, 1946~2010년에 지어진 집들임.)\n    30  1945년부터 그 이전으로 지어진 1층 짜리 오래된 집 (1885, 1910~1945, 1948에 지어진 집임.)\n    40  다락방이 있는 1층짜리 집 <- 데이터 4개밖에 없음 (1926,1930,1949,1979)\n    45  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 미완성 집\n    50  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 완성된 집\n    60  1946년부터 그 이후로 지어진 2층 짜리 최신 집 (1946~2009에 지어진 집임)\n    70  1945년부터 그 이전으로 지어진 2층 짜리 오래된 집 (1872~1945에 지어진 집임)\n    75  3층짜리 집이지만, 삐족한 지붕때문에 3층의 절반은 없는 집\n    80  각 층이 엇갈려있는 집\n    85  현관 앞에 계단으로 층이 엇갈려있는 집\n    90  다세대 주택 (한 건물에 집이 나눠져 있고 여러 유닛이 삶)\n   120  1946년부터 그 이후로 지어진 1층짜리 최신 연립주택 그룹 (집이 모여있음)\n   150  2층짜리 집이지만, 삐족한 지붕때문에 2층의 절반은 없는 연립주택 그룹 (집이 모여있음)\n   160  1946년부터 그 이후로 지어진 2층짜리 최신 연립주택 그룹 (집이 모여있음)\n   180  연립주택 그룹 + 각 층이 엇갈림 + 현관 계단 집\n   190  한 집을 두 집으로 개조해서 쪼갠 집\n```\n\n::: {#cb8e4b56 .cell execution_count=6}\n``` {.python .cell-code}\ncols = train_df.columns\ntrain_df[train_df['MSSubClass'] == 20]['YearBuilt'].sort_values()  # 'MSSubClass'=20은 1938, 1946~2010에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n1332    1938\n533     1946\n1049    1946\n1123    1947\n607     1948\n        ... \n507     2009\n987     2009\n644     2009\n412     2009\n378     2010\nName: YearBuilt, Length: 536, dtype: int64\n```\n:::\n:::\n\n\n::: {#361fb3db .cell execution_count=7}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 30]['YearBuilt'].sort_values()  # 'MSSubClass'=30은 1885, 1910~1945, 1948에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n106     1885\n1013    1910\n638     1910\n438     1913\n1380    1914\n        ... \n1337    1941\n393     1941\n241     1945\n68      1945\n836     1948\nName: YearBuilt, Length: 69, dtype: int64\n```\n:::\n:::\n\n\n::: {#1970acbd .cell execution_count=8}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 60]['YearBuilt'].sort_values()  # 'MSSubClass'=60은 1946~2009에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n425     1946\n868     1948\n397     1962\n1351    1962\n895     1963\n        ... \n157     2009\n762     2009\n572     2009\n212     2009\n460     2009\nName: YearBuilt, Length: 299, dtype: int64\n```\n:::\n:::\n\n\n::: {#97cb8e6d .cell execution_count=9}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 70]['YearBuilt'].sort_values()  # 'MSSubClass'=70은 1872~1945에 지어진 집임\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n1349    1872\n630     1880\n747     1880\n1132    1880\n991     1882\n716     1890\n1292    1892\n676     1900\n841     1904\n974     1910\n740     1910\n1408    1910\n596     1910\n1234    1911\n1235    1914\n1096    1914\n565     1915\n482     1915\n3       1915\n289     1915\n407     1915\n456     1916\n417     1918\n1263    1919\n1149    1920\n531     1920\n30      1920\n1397    1920\n1382    1920\n181     1920\n329     1920\n365     1920\n1360    1921\n63      1921\n1440    1922\n1012    1923\n807     1923\n671     1925\n314     1925\n458     1925\n840     1925\n217     1925\n519     1926\n508     1928\n1244    1929\n657     1931\n1174    1932\n190     1932\n608     1934\n463     1934\n1168    1935\n461     1936\n1075    1940\n939     1940\n651     1940\n1147    1941\n1457    1941\n467     1942\n1301    1942\n114     1945\nName: YearBuilt, dtype: int64\n```\n:::\n:::\n\n\n::: {#e2d23177 .cell execution_count=10}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 40]['YearBuilt'].sort_values()   # 4개밖에 없음\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n164     1926\n589     1930\n873     1949\n1270    1979\nName: YearBuilt, dtype: int64\n```\n:::\n:::\n\n\n::: {#e2d6c14c .cell execution_count=11}\n``` {.python .cell-code}\ntrain_df[train_df['MSSubClass'] == 120]['YearBuilt'].sort_values()   # 1976~2009에 지어진 집임.\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n23      1976\n126     1976\n1431    1976\n357     1976\n1421    1977\n        ... \n350     2007\n1415    2007\n1181    2008\n1228    2008\n819     2009\nName: YearBuilt, Length: 87, dtype: int64\n```\n:::\n:::\n\n\n# \n\n## 3. 'MSZoning' : 판매 관련 일반 구역 분류 (수상 거주지인지, 밀도가 높은 거주지인지 등)\n\n::: {#ae4fd360 .cell execution_count=12}\n``` {.python .cell-code}\ntrain_df['MSZoning'].value_counts()\n\nplt.clf()\nsns.countplot(data=train_df, x='MSZoning')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-13-output-1.png){width=601 height=432}\n:::\n:::\n\n\n```         \n   A    농업\n   C    상업\n   FV   수상 거주지\n   I    산업\n   RH   높은 밀도 거주지\n   RL   낮은 밀도 거주지\n   RP   Residential Low Density Park \n   RM  중간 밀도 거주지\n```\n\n=\\> 데이터상 RL, RM, RH, FV, C(all) 만 있음.\n\n# \n\n## 4. 'LotFrontage' : 집과 연결된 거리의 직선 길이 (feet)\n\n::: {#72588807 .cell execution_count=13}\n``` {.python .cell-code}\nplt.clf()\nsns.histplot(train_df['LotFrontage'], stat='density')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-14-output-1.png){width=606 height=429}\n:::\n:::\n\n\n결측치 259개 있음. \\<- 집에 연결된 거리가 없어서 결측치인걸 수도 있음. 그렇다면 0값으로 처리해주기. 이상치 있어보임.\n\n# \n\n## 'LotArea' : 부지 크기 (square feet)\n\n::: {#1accee9b .cell execution_count=14}\n``` {.python .cell-code}\nplt.clf()\nsns.histplot(train_df['LotArea'], stat='density')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-15-output-1.png){width=623 height=429}\n:::\n:::\n\n\n이상치 있어보임.\n\n# \n\n## 'Street' : 집에 접근 도로 유형 (자갈길인지, 포장길인지)\n\n::: {#012ca7fb .cell execution_count=15}\n``` {.python .cell-code}\ntrain_df['Street'].value_counts()\n\nplt.clf()\nsns.countplot(data=train_df, x='Street')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-16-output-1.png){width=601 height=429}\n:::\n:::\n\n\n```         \n   Grvl 자갈길 \n   Pave 포장길\n```\n\n자갈길이 6개밖에 안됨.\n\n# \n\n## 'Alley' : 집에 접근 골목 유형 (자갈 골목길인지, 포장 골목길인지)\n\n::: {#8de99475 .cell execution_count=16}\n``` {.python .cell-code}\ntrain_df['Alley'].value_counts()\n\nplt.clf()\nsns.countplot(data=train_df, x='Alley')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-17-output-1.png){width=585 height=429}\n:::\n:::\n\n\n```         \n   Grvl 자갈 골목길\n   Pave 포장된 골목길\n   NA   골목길 없음\n```\n\n1369 결측치 있음. \\<- 이게 다 골목길 없다는 것임.\n\n# \n\n## 'LotShape' : 일반적인 집 모양 (일반적인 모양인지, 일반적이지 않은 모양인지 등)\n\n::: {#c7436f3f .cell execution_count=17}\n``` {.python .cell-code}\ntrain_df['LotShape'].value_counts()\n\nplt.clf()\nsns.countplot(data=train_df, x='LotShape')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-18-output-1.png){width=593 height=429}\n:::\n:::\n\n\n```         \n   Reg  보통\n   IR1  약간 보통이 아님\n   IR2  중간 정도 보통이 아님\n   IR3  보통이 아님\n```\n\n일반적이지 않은 집이 10개 있음. 이상치에 해당하는 집일 수도...?\n\n# \n\n## 'LandContour' : 집의 평탄 정도\n\n::: {#09669a58 .cell execution_count=18}\n``` {.python .cell-code}\ntrain_df['LandContour'].value_counts()\n\nplt.clf()\nsns.countplot(data=train_df, x='LandContour')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](columns_files/figure-html/cell-19-output-1.png){width=601 height=429}\n:::\n:::\n\n\n```         \n   Lvl  평평한 것에 가까움  \n   Bnk  기움 - Quick and significant rise from street grade to building\n   HLS  비탈 - Significant slope from side to side\n   Low 움푹한 곳\n```\n\n평평한 것에 가까운게 많음.\n\n",
    "supporting": [
      "columns_files"
    ],
    "filters": [],
    "includes": {}
  }
}